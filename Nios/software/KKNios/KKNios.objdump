
KKNios.elf:     file format elf32-littlenios2
KKNios.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00011c1c memsz 0x00011d80 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fa14  000401bc  000401bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000580  0004fbd0  0004fbd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00050150  00050150  00011150  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00051c3c  00051c3c  00012c3c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00051da0  00051da0  00012c3c  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  00012c3c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000cf8  00000000  00000000  00012c78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024940  00000000  00000000  00013970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000931f  00000000  00000000  000382b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b327  00000000  00000000  000415cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000218c  00000000  00000000  0004c8f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000326b  00000000  00000000  0004ea84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016d97  00000000  00000000  00051cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00068a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001300  00000000  00000000  00068aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ce3f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0006ce42  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ce4c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ce4d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006ce4e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006ce57  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006ce60  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006ce69  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  0006ce73  2**0
                  CONTENTS, READONLY
 26 .jdi          00003fa3  00000000  00000000  0006cea7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004ccbb  00000000  00000000  00070e4a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401bc l    d  .text	00000000 .text
0004fbd0 l    d  .rodata	00000000 .rodata
00050150 l    d  .rwdata	00000000 .rwdata
00051c3c l    d  .bss	00000000 .bss
00051da0 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../KKNios_bsp//obj/HAL/src/crt0.o
00040200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00040eb0 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004fe9e l     O .rodata	00000010 zeroes.4155
0004feae l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0004555c l     F .text	00000204 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00047010 l     F .text	00000008 __fp_lock
00047018 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00050150 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00050594 l     O .rwdata	00000020 lc_ctype_charset
00050574 l     O .rwdata	00000020 lc_message_charset
000505b4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004fee0 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004a430 l     F .text	000000fc __sprint_r.part.0
00050014 l     O .rodata	00000010 blanks.4099
00050004 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0004d178 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004d290 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004d2bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004d3b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0004d4a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004d680 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00051c2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004d8d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004da0c l     F .text	00000038 alt_dev_reg
00050b9c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004dd2c l     F .text	000001fc altera_avalon_jtag_uart_irq
0004df28 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004e540 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004e9f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004ee68 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004efa0 l     F .text	00000050 alt_get_errno
0004eff0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
000432b0 g     F .text	0000001c putchar
00049940 g     F .text	00000074 _mprec_log10
00049a2c g     F .text	00000088 __any_on
0004bea8 g     F .text	00000064 _isatty_r
0004feec g     O .rodata	00000028 __mprec_tinytens
0004d5c8 g     F .text	00000078 alt_main
000432cc g     F .text	000000b8 _puts_r
00051ca0 g     O .bss	00000100 alt_irq
0004bf0c g     F .text	0000006c _lseek_r
0004cd40 g     F .text	00000084 .hidden __eqdf2
00051da0 g       *ABS*	00000000 __alt_heap_start
0004326c g     F .text	0000003c printf
0004bfe4 g     F .text	0000009c _wcrtomb_r
0004a328 g     F .text	0000005c __sseek
000470a8 g     F .text	0000019c __sinit
0004f528 g     F .text	00000024 alt_get_cpu_freq
0004b7d8 g     F .text	00000180 __swbuf_r
00047db8 g     F .text	00000070 _setlocale_r
0004702c g     F .text	00000064 __sfmoreglue
0004d660 g     F .text	00000020 __malloc_unlock
00051c68 g     O .bss	00000004 altera_avalon_timer_ts_freq
000488ec g     F .text	0000013c memmove
0004e63c g     F .text	0000027c perf_print_formatted_report
00047090 g     F .text	00000018 _cleanup
00048b3c g     F .text	000000a8 _Balloc
0004cdc4 g     F .text	000000d8 .hidden __gtdf2
0004f3ac g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	00000000 __reset
0004be40 g     F .text	00000068 _fstat_r
00051c54 g     O .bss	00000004 errno
0004a2a4 g     F .text	00000008 __seofread
00051c5c g     O .bss	00000004 alt_argv
00059bfc g       *ABS*	00000000 _gp
00050a1c g     O .rwdata	00000180 alt_fd_list
000432a8 g     F .text	00000008 _putchar_r
0004f54c g     F .text	00000090 alt_find_dev
00043134 g     F .text	0000010c memcpy
00047020 g     F .text	0000000c _cleanup_r
0004d008 g     F .text	000000d0 .hidden __floatsidf
0004ef28 g     F .text	00000078 alt_io_redirect
0004ce9c g     F .text	000000ec .hidden __ltdf2
0004fbd0 g       *ABS*	00000000 __DTOR_END__
00043384 g     F .text	00000014 puts
0004a184 g     F .text	00000068 __fpclassifyd
000498a0 g     F .text	000000a0 __ratio
0004b7b4 g     F .text	00000024 __vfiprintf_internal
0004e120 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00043240 g     F .text	0000002c _printf_r
00040fb4 g     F .text	00000008 .hidden __udivsi3
0004d408 g     F .text	000000a0 isatty
0004ff3c g     O .rodata	000000c8 __mprec_tens
00047e28 g     F .text	0000000c __locale_charset
00051c50 g     O .bss	00000004 __malloc_top_pad
0004f4cc g     F .text	0000003c perf_get_num_starts
00051c04 g     O .rwdata	00000004 __mb_cur_max
00047e58 g     F .text	0000000c _localeconv_r
00048f3c g     F .text	0000003c __i2b
000477ac g     F .text	000004ac __sfvwrite_r
0004a1ec g     F .text	00000064 _sbrk_r
0004bf78 g     F .text	0000006c _read_r
00051c24 g     O .rwdata	00000004 alt_max_fd
0004bb08 g     F .text	00000128 _fclose_r
00046fe0 g     F .text	00000030 fflush
00051c4c g     O .bss	00000004 __malloc_max_sbrked_mem
00040fc4 g     F .text	0000087c .hidden __adddf3
0004966c g     F .text	000000f0 __b2d
0004c7a8 g     F .text	00000598 .hidden __umoddi3
0004d4f8 g     F .text	000000d0 lseek
00051bfc g     O .rwdata	00000004 _global_impure_ptr
00049c20 g     F .text	00000564 _realloc_r
00051da0 g       *ABS*	00000000 __bss_end
0004ed78 g     F .text	000000f0 alt_iic_isr_register
0004f2a8 g     F .text	00000104 alt_tick
0004c1e4 g     F .text	000005c4 .hidden __udivdi3
0004bc44 g     F .text	00000184 _fputwc_r
0004ff14 g     O .rodata	00000028 __mprec_bigtens
00048d20 g     F .text	00000104 __s2b
0004d0d8 g     F .text	000000a0 .hidden __floatunsidf
000493fc g     F .text	00000060 __mcmp
00047370 g     F .text	00000018 __fp_lock_all
0004ed2c g     F .text	0000004c alt_ic_irq_enabled
0004f210 g     F .text	00000098 alt_alarm_stop
00051c6c g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000d0 alt_irq_handler
000509f4 g     O .rwdata	00000028 alt_dev_null
00048e24 g     F .text	00000068 __hi0bits
0004cf88 g     F .text	00000080 .hidden __fixdfsi
00040458 g     F .text	00000158 calculate_error
00051c1c g     O .rwdata	00000008 alt_dev_list
0004d920 g     F .text	000000ec write
00049ab4 g     F .text	000000a0 _putc_r
0004d30c g     F .text	000000ac fstat
0004ce9c g     F .text	000000ec .hidden __ledf2
00049164 g     F .text	00000148 __pow5mult
0004a544 g     F .text	00001270 ___vfiprintf_internal_r
00051c44 g     O .bss	00000004 __nlocale_changed
00040fbc g     F .text	00000008 .hidden __umodsi3
00051da0 g       *ABS*	00000000 end
0004dc6c g     F .text	000000c0 altera_avalon_jtag_uart_init
0004fbd0 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
0004e5b4 g     F .text	00000088 alt_avalon_timer_sc_init
00043088 g     F .text	000000ac .hidden __clzsi2
0004e328 g     F .text	00000218 altera_avalon_jtag_uart_write
00047360 g     F .text	00000004 __sfp_lock_acquire
00048804 g     F .text	000000e8 memchr
00043424 g     F .text	00001fdc ___vfprintf_internal_r
000474dc g     F .text	000002d0 _free_r
00047e34 g     F .text	00000010 __locale_mb_cur_max
0004f988 g     F .text	000001a4 __call_exitprocs
00051c40 g     O .bss	00000004 __mlocale_changed
00051c08 g     O .rwdata	00000004 __malloc_sbrk_base
000401bc g     F .text	00000048 _start
00051c70 g     O .bss	00000004 _alt_tick_rate
0004fb2c g     F .text	00000070 .hidden __floatundidf
000492ac g     F .text	00000150 __lshift
00051c74 g     O .bss	00000004 _alt_nticks
0004d6d0 g     F .text	000000f0 read
0004da78 g     F .text	00000090 alt_sys_init
0004f86c g     F .text	0000011c __register_exitproc
00048f78 g     F .text	000001ec __multiply
0004dfcc g     F .text	00000068 altera_avalon_jtag_uart_close
00051c78 g     O .bss	00000028 __malloc_current_mallinfo
0004975c g     F .text	00000144 __d2b
0004db08 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004f6f0 g     F .text	000000b4 alt_get_fd
0004b9e0 g     F .text	00000064 _close_r
0004f3cc g     F .text	000000b4 perf_get_section_time
0004f7f0 g     F .text	0000007c memcmp
0004dbc8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00051da0 g       *ABS*	00000000 __alt_stack_base
0004dc18 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00045424 g     F .text	00000138 __swsetup_r
00041840 g     F .text	000008d4 .hidden __divdf3
00047244 g     F .text	0000011c __sfp
000499b4 g     F .text	00000078 __copybits
0004f480 g     F .text	0000004c perf_get_total_time
000505ec g     O .rwdata	00000408 __malloc_av_
0004736c g     F .text	00000004 __sinit_lock_release
00042114 g     F .text	000006ec .hidden __muldf3
0004a250 g     F .text	00000054 __sread
0004f5dc g     F .text	00000114 alt_find_file
0004ea48 g     F .text	000000a0 alt_dev_llist_insert
0004d640 g     F .text	00000020 __malloc_lock
0004d820 g     F .text	000000b0 sbrk
00046d9c g     F .text	00000244 _fflush_r
0004ba44 g     F .text	000000c4 _calloc_r
00051c3c g       *ABS*	00000000 __bss_start
00048a28 g     F .text	00000114 memset
00040e14 g     F .text	0000009c main
00051c60 g     O .bss	00000004 alt_envp
00051c48 g     O .bss	00000004 __malloc_max_total_mem
0004db68 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004b958 g     F .text	0000001c __swbuf
0004a384 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
0004bc30 g     F .text	00000014 fclose
00045760 g     F .text	0000163c _dtoa_r
00048040 g     F .text	000007c4 _malloc_r
0004c158 g     F .text	00000030 __ascii_wctomb
00051c28 g     O .rwdata	00000004 alt_errno
000405b0 g     F .text	00000864 the_algorithm
000402b4 g     F .text	000001a4 multiply_matrix
00047c58 g     F .text	000000a8 _fwalk
00049b54 g     F .text	000000cc putc
00040f20 g     F .text	00000048 .hidden __divsi3
000473a0 g     F .text	0000013c _malloc_trim_r
0004fbd0 g       *ABS*	00000000 __CTOR_END__
0004a38c g     F .text	000000a4 strcmp
0004fbd0 g       *ABS*	00000000 __DTOR_LIST__
0004cd40 g     F .text	00000084 .hidden __nedf2
0004da44 g     F .text	00000034 alt_irq_init
0004d7c0 g     F .text	00000060 alt_release_fd
0004fd58 g     O .rodata	00000100 .hidden __clz_tab
00051c3c g     O .bss	00000004 _PathLocale
0004f7a4 g     F .text	00000014 atexit
0004b974 g     F .text	0000006c _write_r
00047e64 g     F .text	0000001c setlocale
00051c00 g     O .rwdata	00000004 _impure_ptr
00051c58 g     O .bss	00000004 alt_argc
00051c64 g     O .bss	00000004 altera_avalon_timer_ts_base
0004eb44 g     F .text	0000005c _do_dtors
00047e50 g     F .text	00000008 __locale_cjk_lang
00040020 g       .exceptions	00000000 alt_irq_entry
0004960c g     F .text	00000060 __ulp
00047388 g     F .text	00000018 __fp_unlock_all
00051c14 g     O .rwdata	00000008 alt_fs_list
00047e80 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0004eba0 g     F .text	00000050 alt_ic_isr_register
00051c3c g       *ABS*	00000000 _edata
00051da0 g       *ABS*	00000000 _end
0004e034 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0004ec8c g     F .text	000000a0 alt_ic_irq_disable
0004a2ac g     F .text	0000007c __swrite
00051c0c g     O .rwdata	00000004 __malloc_trim_threshold
0004f508 g     F .text	00000020 alt_get_performance_counter_base
00047e44 g     F .text	0000000c __locale_msgcharset
0004f7b8 g     F .text	00000038 exit
00047d00 g     F .text	000000b8 _fwalk_reent
0004945c g     F .text	000001b0 __mdiff
00040f68 g     F .text	0000004c .hidden __modsi3
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00047364 g     F .text	00000004 __sfp_lock_release
0004fb9c g     F .text	00000034 _exit
0004e8b8 g     F .text	00000140 alt_alarm_start
00047e8c g     F .text	000001b4 __smakebuf_r
00043398 g     F .text	0000008c strlen
0004f0bc g     F .text	00000154 open
0004cdc4 g     F .text	000000d8 .hidden __gedf2
00051c10 g     O .rwdata	00000004 __wctomb
0004a52c g     F .text	00000018 __sprint_r
00051c30 g     O .rwdata	00000004 alt_priority_mask
0004ebf0 g     F .text	0000009c alt_ic_irq_enable
00045400 g     F .text	00000024 __vfprintf_internal
0004c188 g     F .text	0000005c _wctomb_r
00042800 g     F .text	00000888 .hidden __subdf3
00048e8c g     F .text	000000b0 __lo0bits
00051c34 g     O .rwdata	00000008 alt_alarm_list
0004eae8 g     F .text	0000005c _do_ctors
0004c080 g     F .text	000000d8 wcrtomb
0004d1c8 g     F .text	000000c8 close
00040204 g     F .text	000000b0 print_matrix
0004bdc8 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
00047368 g     F .text	00000004 __sinit_lock_acquire
00048c0c g     F .text	00000114 __multadd
00048be4 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18c72804 	addi	r3,r3,7328
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10800017 	ldw	r2,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	21072804 	addi	r4,r4,7328
   4014c:	e0fffd17 	ldw	r3,-12(fp)
   40150:	180690fa 	slli	r3,r3,3
   40154:	20c7883a 	add	r3,r4,r3
   40158:	18c00104 	addi	r3,r3,4
   4015c:	18c00017 	ldw	r3,0(r3)
   40160:	1809883a 	mov	r4,r3
   40164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	0001883a 	nop
}
   401a8:	e037883a 	mov	sp,fp
   401ac:	dfc00117 	ldw	ra,4(sp)
   401b0:	df000017 	ldw	fp,0(sp)
   401b4:	dec00204 	addi	sp,sp,8
   401b8:	f800283a 	ret

Disassembly of section .text:

000401bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   401c8:	00bffd16 	blt	zero,r2,401c0 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401cc:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401d0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   401d4:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401d8:	d6a6ff14 	ori	gp,gp,39932
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401dc:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401e0:	10870f14 	ori	r2,r2,7228

    movhi r3, %hi(__bss_end)
   401e4:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401e8:	18c76814 	ori	r3,r3,7584

    beq r2, r3, 1f
   401ec:	10c00326 	beq	r2,r3,401fc <_start+0x40>

0:
    stw zero, (r2)
   401f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f8:	10fffd36 	bltu	r2,r3,401f0 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401fc:	004d5c80 	call	4d5c8 <alt_main>

00040200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40200:	003fff06 	br	40200 <alt_after_alt_main>

00040204 <print_matrix>:
/**
 * @brief Print a matrix.
 *
 * @param matrix N-by-N matrix.
 */
void print_matrix(double matrix[N][N]) {
   40204:	defffb04 	addi	sp,sp,-20
   40208:	dfc00415 	stw	ra,16(sp)
   4020c:	df000315 	stw	fp,12(sp)
   40210:	df000304 	addi	fp,sp,12
   40214:	e13fff15 	stw	r4,-4(fp)
	int i, j;
	for(i = 0; i < N; i++) {
   40218:	e03ffd15 	stw	zero,-12(fp)
   4021c:	00001b06 	br	4028c <print_matrix+0x88>
		for(j = 0; j < N; j++) {
   40220:	e03ffe15 	stw	zero,-8(fp)
   40224:	00001106 	br	4026c <print_matrix+0x68>
			printf("\t %.2f", matrix[i][j]);
   40228:	e0bffd17 	ldw	r2,-12(fp)
   4022c:	1004917a 	slli	r2,r2,5
   40230:	e0ffff17 	ldw	r3,-4(fp)
   40234:	1887883a 	add	r3,r3,r2
   40238:	e0bffe17 	ldw	r2,-8(fp)
   4023c:	100490fa 	slli	r2,r2,3
   40240:	1889883a 	add	r4,r3,r2
   40244:	20800017 	ldw	r2,0(r4)
   40248:	20c00117 	ldw	r3,4(r4)
   4024c:	01000174 	movhi	r4,5
   40250:	213ef404 	addi	r4,r4,-1072
   40254:	100b883a 	mov	r5,r2
   40258:	180d883a 	mov	r6,r3
   4025c:	004326c0 	call	4326c <printf>
 * @param matrix N-by-N matrix.
 */
void print_matrix(double matrix[N][N]) {
	int i, j;
	for(i = 0; i < N; i++) {
		for(j = 0; j < N; j++) {
   40260:	e0bffe17 	ldw	r2,-8(fp)
   40264:	10800044 	addi	r2,r2,1
   40268:	e0bffe15 	stw	r2,-8(fp)
   4026c:	e0bffe17 	ldw	r2,-8(fp)
   40270:	10800110 	cmplti	r2,r2,4
   40274:	103fec1e 	bne	r2,zero,40228 <print_matrix+0x24>
			printf("\t %.2f", matrix[i][j]);
		}
		printf("\n");
   40278:	01000284 	movi	r4,10
   4027c:	00432b00 	call	432b0 <putchar>
 *
 * @param matrix N-by-N matrix.
 */
void print_matrix(double matrix[N][N]) {
	int i, j;
	for(i = 0; i < N; i++) {
   40280:	e0bffd17 	ldw	r2,-12(fp)
   40284:	10800044 	addi	r2,r2,1
   40288:	e0bffd15 	stw	r2,-12(fp)
   4028c:	e0bffd17 	ldw	r2,-12(fp)
   40290:	10800110 	cmplti	r2,r2,4
   40294:	103fe21e 	bne	r2,zero,40220 <print_matrix+0x1c>
		for(j = 0; j < N; j++) {
			printf("\t %.2f", matrix[i][j]);
		}
		printf("\n");
	}
	printf("\n");
   40298:	01000284 	movi	r4,10
   4029c:	00432b00 	call	432b0 <putchar>
}
   402a0:	e037883a 	mov	sp,fp
   402a4:	dfc00117 	ldw	ra,4(sp)
   402a8:	df000017 	ldw	fp,0(sp)
   402ac:	dec00204 	addi	sp,sp,8
   402b0:	f800283a 	ret

000402b4 <multiply_matrix>:
 *
 * @param A First N-by-N matrix.
 * @param B Second N-by-N matrix.
 * @param C Result N-by-N matrix.
 */
void multiply_matrix(double A[N][N], double B[N][N], double C[N][N]) {
   402b4:	defff504 	addi	sp,sp,-44
   402b8:	dfc00a15 	stw	ra,40(sp)
   402bc:	df000915 	stw	fp,36(sp)
   402c0:	dc800815 	stw	r18,32(sp)
   402c4:	dc400715 	stw	r17,28(sp)
   402c8:	dc000615 	stw	r16,24(sp)
   402cc:	df000904 	addi	fp,sp,36
   402d0:	e13ffa15 	stw	r4,-24(fp)
   402d4:	e17ffb15 	stw	r5,-20(fp)
   402d8:	e1bffc15 	stw	r6,-16(fp)
	int i, j, k;
	for(i = 0; i < N; i++) {
   402dc:	e03ff715 	stw	zero,-36(fp)
   402e0:	00005206 	br	4042c <multiply_matrix+0x178>
		for(j = 0; j < N; j++) {
   402e4:	e03ff815 	stw	zero,-32(fp)
   402e8:	00004a06 	br	40414 <multiply_matrix+0x160>
			C[i][j] = 0;
   402ec:	e0bff717 	ldw	r2,-36(fp)
   402f0:	1004917a 	slli	r2,r2,5
   402f4:	e0fffc17 	ldw	r3,-16(fp)
   402f8:	1887883a 	add	r3,r3,r2
   402fc:	e0bff817 	ldw	r2,-32(fp)
   40300:	100490fa 	slli	r2,r2,3
   40304:	1885883a 	add	r2,r3,r2
   40308:	10000015 	stw	zero,0(r2)
   4030c:	10000115 	stw	zero,4(r2)
			for(k = 0; k < N; k++)
   40310:	e03ff915 	stw	zero,-28(fp)
   40314:	00003906 	br	403fc <multiply_matrix+0x148>
				C[i][j] += A[i][k] * B[k][j];
   40318:	e0bff717 	ldw	r2,-36(fp)
   4031c:	1004917a 	slli	r2,r2,5
   40320:	e0fffc17 	ldw	r3,-16(fp)
   40324:	18a5883a 	add	r18,r3,r2
   40328:	e0bff717 	ldw	r2,-36(fp)
   4032c:	1004917a 	slli	r2,r2,5
   40330:	e0fffc17 	ldw	r3,-16(fp)
   40334:	1887883a 	add	r3,r3,r2
   40338:	e0bff817 	ldw	r2,-32(fp)
   4033c:	100490fa 	slli	r2,r2,3
   40340:	1885883a 	add	r2,r3,r2
   40344:	14000017 	ldw	r16,0(r2)
   40348:	14400117 	ldw	r17,4(r2)
   4034c:	e0bff717 	ldw	r2,-36(fp)
   40350:	1004917a 	slli	r2,r2,5
   40354:	e0fffa17 	ldw	r3,-24(fp)
   40358:	1887883a 	add	r3,r3,r2
   4035c:	e0bff917 	ldw	r2,-28(fp)
   40360:	100490fa 	slli	r2,r2,3
   40364:	1885883a 	add	r2,r3,r2
   40368:	11400017 	ldw	r5,0(r2)
   4036c:	11800117 	ldw	r6,4(r2)
   40370:	e0bff917 	ldw	r2,-28(fp)
   40374:	1004917a 	slli	r2,r2,5
   40378:	e0fffb17 	ldw	r3,-20(fp)
   4037c:	1887883a 	add	r3,r3,r2
   40380:	e0bff817 	ldw	r2,-32(fp)
   40384:	100490fa 	slli	r2,r2,3
   40388:	1889883a 	add	r4,r3,r2
   4038c:	20800017 	ldw	r2,0(r4)
   40390:	20c00117 	ldw	r3,4(r4)
   40394:	2809883a 	mov	r4,r5
   40398:	300b883a 	mov	r5,r6
   4039c:	100d883a 	mov	r6,r2
   403a0:	180f883a 	mov	r7,r3
   403a4:	00421140 	call	42114 <__muldf3>
   403a8:	1009883a 	mov	r4,r2
   403ac:	180b883a 	mov	r5,r3
   403b0:	2005883a 	mov	r2,r4
   403b4:	2807883a 	mov	r3,r5
   403b8:	8009883a 	mov	r4,r16
   403bc:	880b883a 	mov	r5,r17
   403c0:	100d883a 	mov	r6,r2
   403c4:	180f883a 	mov	r7,r3
   403c8:	0040fc40 	call	40fc4 <__adddf3>
   403cc:	1009883a 	mov	r4,r2
   403d0:	180b883a 	mov	r5,r3
   403d4:	2005883a 	mov	r2,r4
   403d8:	2807883a 	mov	r3,r5
   403dc:	e13ff817 	ldw	r4,-32(fp)
   403e0:	200890fa 	slli	r4,r4,3
   403e4:	9109883a 	add	r4,r18,r4
   403e8:	20800015 	stw	r2,0(r4)
   403ec:	20c00115 	stw	r3,4(r4)
void multiply_matrix(double A[N][N], double B[N][N], double C[N][N]) {
	int i, j, k;
	for(i = 0; i < N; i++) {
		for(j = 0; j < N; j++) {
			C[i][j] = 0;
			for(k = 0; k < N; k++)
   403f0:	e0bff917 	ldw	r2,-28(fp)
   403f4:	10800044 	addi	r2,r2,1
   403f8:	e0bff915 	stw	r2,-28(fp)
   403fc:	e0bff917 	ldw	r2,-28(fp)
   40400:	10800110 	cmplti	r2,r2,4
   40404:	103fc41e 	bne	r2,zero,40318 <multiply_matrix+0x64>
 * @param C Result N-by-N matrix.
 */
void multiply_matrix(double A[N][N], double B[N][N], double C[N][N]) {
	int i, j, k;
	for(i = 0; i < N; i++) {
		for(j = 0; j < N; j++) {
   40408:	e0bff817 	ldw	r2,-32(fp)
   4040c:	10800044 	addi	r2,r2,1
   40410:	e0bff815 	stw	r2,-32(fp)
   40414:	e0bff817 	ldw	r2,-32(fp)
   40418:	10800110 	cmplti	r2,r2,4
   4041c:	103fb31e 	bne	r2,zero,402ec <multiply_matrix+0x38>
 * @param B Second N-by-N matrix.
 * @param C Result N-by-N matrix.
 */
void multiply_matrix(double A[N][N], double B[N][N], double C[N][N]) {
	int i, j, k;
	for(i = 0; i < N; i++) {
   40420:	e0bff717 	ldw	r2,-36(fp)
   40424:	10800044 	addi	r2,r2,1
   40428:	e0bff715 	stw	r2,-36(fp)
   4042c:	e0bff717 	ldw	r2,-36(fp)
   40430:	10800110 	cmplti	r2,r2,4
   40434:	103fab1e 	bne	r2,zero,402e4 <multiply_matrix+0x30>
			C[i][j] = 0;
			for(k = 0; k < N; k++)
				C[i][j] += A[i][k] * B[k][j];
		}
	}
}
   40438:	e6fffd04 	addi	sp,fp,-12
   4043c:	dfc00417 	ldw	ra,16(sp)
   40440:	df000317 	ldw	fp,12(sp)
   40444:	dc800217 	ldw	r18,8(sp)
   40448:	dc400117 	ldw	r17,4(sp)
   4044c:	dc000017 	ldw	r16,0(sp)
   40450:	dec00504 	addi	sp,sp,20
   40454:	f800283a 	ret

00040458 <calculate_error>:
 *
 * @param matrix N-by-N matrix.
 *
 * @return Error distance. Less is better.
 */
double calculate_error(double matrix[N][N]) {
   40458:	defff704 	addi	sp,sp,-36
   4045c:	dfc00815 	stw	ra,32(sp)
   40460:	df000715 	stw	fp,28(sp)
   40464:	dc400615 	stw	r17,24(sp)
   40468:	dc000515 	stw	r16,20(sp)
   4046c:	df000704 	addi	fp,sp,28
   40470:	e13ffd15 	stw	r4,-12(fp)
	int i, j;
	double val = 0;
   40474:	e03ffb15 	stw	zero,-20(fp)
   40478:	e03ffc15 	stw	zero,-16(fp)

	for(i = 0; i < N; i++) {
   4047c:	e03ff915 	stw	zero,-28(fp)
   40480:	00003206 	br	4054c <calculate_error+0xf4>
		for(j = 0; j < N; j++) {
   40484:	e03ffa15 	stw	zero,-24(fp)
   40488:	00002a06 	br	40534 <calculate_error+0xdc>
			val += fabs(((i == j)? 1 : 0) - matrix[i][j]);
   4048c:	e0fff917 	ldw	r3,-28(fp)
   40490:	e0bffa17 	ldw	r2,-24(fp)
   40494:	1880031e 	bne	r3,r2,404a4 <calculate_error+0x4c>
   40498:	0005883a 	mov	r2,zero
   4049c:	00cffc34 	movhi	r3,16368
   404a0:	00000206 	br	404ac <calculate_error+0x54>
   404a4:	0005883a 	mov	r2,zero
   404a8:	0007883a 	mov	r3,zero
   404ac:	e13ff917 	ldw	r4,-28(fp)
   404b0:	2008917a 	slli	r4,r4,5
   404b4:	e17ffd17 	ldw	r5,-12(fp)
   404b8:	290b883a 	add	r5,r5,r4
   404bc:	e13ffa17 	ldw	r4,-24(fp)
   404c0:	200890fa 	slli	r4,r4,3
   404c4:	2909883a 	add	r4,r5,r4
   404c8:	21c00017 	ldw	r7,0(r4)
   404cc:	22000117 	ldw	r8,4(r4)
   404d0:	1009883a 	mov	r4,r2
   404d4:	180b883a 	mov	r5,r3
   404d8:	380d883a 	mov	r6,r7
   404dc:	400f883a 	mov	r7,r8
   404e0:	00428000 	call	42800 <__subdf3>
   404e4:	1009883a 	mov	r4,r2
   404e8:	180b883a 	mov	r5,r3
   404ec:	2005883a 	mov	r2,r4
   404f0:	2807883a 	mov	r3,r5
   404f4:	1021883a 	mov	r16,r2
   404f8:	01200034 	movhi	r4,32768
   404fc:	213fffc4 	addi	r4,r4,-1
   40500:	1922703a 	and	r17,r3,r4
   40504:	e13ffb17 	ldw	r4,-20(fp)
   40508:	e17ffc17 	ldw	r5,-16(fp)
   4050c:	800d883a 	mov	r6,r16
   40510:	880f883a 	mov	r7,r17
   40514:	0040fc40 	call	40fc4 <__adddf3>
   40518:	1009883a 	mov	r4,r2
   4051c:	180b883a 	mov	r5,r3
   40520:	e13ffb15 	stw	r4,-20(fp)
   40524:	e17ffc15 	stw	r5,-16(fp)
double calculate_error(double matrix[N][N]) {
	int i, j;
	double val = 0;

	for(i = 0; i < N; i++) {
		for(j = 0; j < N; j++) {
   40528:	e0bffa17 	ldw	r2,-24(fp)
   4052c:	10800044 	addi	r2,r2,1
   40530:	e0bffa15 	stw	r2,-24(fp)
   40534:	e0bffa17 	ldw	r2,-24(fp)
   40538:	10800110 	cmplti	r2,r2,4
   4053c:	103fd31e 	bne	r2,zero,4048c <calculate_error+0x34>
 */
double calculate_error(double matrix[N][N]) {
	int i, j;
	double val = 0;

	for(i = 0; i < N; i++) {
   40540:	e0bff917 	ldw	r2,-28(fp)
   40544:	10800044 	addi	r2,r2,1
   40548:	e0bff915 	stw	r2,-28(fp)
   4054c:	e0bff917 	ldw	r2,-28(fp)
   40550:	10800110 	cmplti	r2,r2,4
   40554:	103fcb1e 	bne	r2,zero,40484 <calculate_error+0x2c>
		for(j = 0; j < N; j++) {
			val += fabs(((i == j)? 1 : 0) - matrix[i][j]);
		}
	}

	val /= N * N;
   40558:	e13ffb17 	ldw	r4,-20(fp)
   4055c:	e17ffc17 	ldw	r5,-16(fp)
   40560:	000d883a 	mov	r6,zero
   40564:	01d00c34 	movhi	r7,16432
   40568:	00418400 	call	41840 <__divdf3>
   4056c:	1009883a 	mov	r4,r2
   40570:	180b883a 	mov	r5,r3
   40574:	e13ffb15 	stw	r4,-20(fp)
   40578:	e17ffc15 	stw	r5,-16(fp)

	return val;
   4057c:	e17ffb17 	ldw	r5,-20(fp)
   40580:	e1bffc17 	ldw	r6,-16(fp)
   40584:	2807883a 	mov	r3,r5
   40588:	3009883a 	mov	r4,r6
}
   4058c:	1805883a 	mov	r2,r3
   40590:	2007883a 	mov	r3,r4
   40594:	e6fffe04 	addi	sp,fp,-8
   40598:	dfc00317 	ldw	ra,12(sp)
   4059c:	df000217 	ldw	fp,8(sp)
   405a0:	dc400117 	ldw	r17,4(sp)
   405a4:	dc000017 	ldw	r16,0(sp)
   405a8:	dec00404 	addi	sp,sp,16
   405ac:	f800283a 	ret

000405b0 <the_algorithm>:

/**
 * @brief Run KK Algorithm.
 */
void the_algorithm(void) {
   405b0:	deff5204 	addi	sp,sp,-696
   405b4:	dfc0ad15 	stw	ra,692(sp)
   405b8:	df00ac15 	stw	fp,688(sp)
   405bc:	dcc0ab15 	stw	r19,684(sp)
   405c0:	dc80aa15 	stw	r18,680(sp)
   405c4:	dc40a915 	stw	r17,676(sp)
   405c8:	dc00a815 	stw	r16,672(sp)
   405cc:	df00ac04 	addi	fp,sp,688
									{1, 2, 4},
									{1, 3, 9}
							};
#elif N == 4
	/* 4 x 4 Vandermonde Matrix */
	double matrix_O[N][N] = {
   405d0:	00800174 	movhi	r2,5
   405d4:	10bf2204 	addi	r2,r2,-888
   405d8:	e13f5c04 	addi	r4,fp,-656
   405dc:	1007883a 	mov	r3,r2
   405e0:	00802004 	movi	r2,128
   405e4:	180b883a 	mov	r5,r3
   405e8:	100d883a 	mov	r6,r2
   405ec:	00431340 	call	43134 <memcpy>
	/* Calculated identity matrix based on calculated inverted matrix */
	double matrix_IC[N][N];
	/* Error distance from true identity */
	double error;
	/* Auxiliary variables */
	int i, j, k, next = 0, prev = 1, curr = 2;
   405f0:	e03f5715 	stw	zero,-676(fp)
   405f4:	00800044 	movi	r2,1
   405f8:	e0bf5815 	stw	r2,-672(fp)
   405fc:	00800084 	movi	r2,2
   40600:	e0bf5915 	stw	r2,-668(fp)
	/* Timestamp before: Transfer matrix */
	then[0] = alt_timestamp();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Start performance counter: Transfer matrix */
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 1);
   40604:	0007883a 	mov	r3,zero
   40608:	00800504 	movi	r2,20
   4060c:	10c00035 	stwio	r3,0(r2)
#endif

	/* Save original matrix */
	for(i = 0; i < N; i++)
   40610:	e03f5415 	stw	zero,-688(fp)
   40614:	00002506 	br	406ac <the_algorithm+0xfc>
		for(j = 0; j < N; j++)
   40618:	e03f5515 	stw	zero,-684(fp)
   4061c:	00001d06 	br	40694 <the_algorithm+0xe4>
			matrix_K[curr][i][j] = matrix_O[i][j];
   40620:	e0bf5417 	ldw	r2,-688(fp)
   40624:	1085883a 	add	r2,r2,r2
   40628:	1087883a 	add	r3,r2,r2
   4062c:	e0bf5517 	ldw	r2,-684(fp)
   40630:	1885883a 	add	r2,r3,r2
   40634:	100490fa 	slli	r2,r2,3
   40638:	e0ff5404 	addi	r3,fp,-688
   4063c:	1885883a 	add	r2,r3,r2
   40640:	11000804 	addi	r4,r2,32
   40644:	20800017 	ldw	r2,0(r4)
   40648:	20c00117 	ldw	r3,4(r4)
   4064c:	e13f5917 	ldw	r4,-668(fp)
   40650:	2109883a 	add	r4,r4,r4
   40654:	210b883a 	add	r5,r4,r4
   40658:	e13f5417 	ldw	r4,-688(fp)
   4065c:	2909883a 	add	r4,r5,r4
   40660:	2109883a 	add	r4,r4,r4
   40664:	210b883a 	add	r5,r4,r4
   40668:	e13f5517 	ldw	r4,-684(fp)
   4066c:	2909883a 	add	r4,r5,r4
   40670:	200890fa 	slli	r4,r4,3
   40674:	e17f5404 	addi	r5,fp,-688
   40678:	2909883a 	add	r4,r5,r4
   4067c:	21002804 	addi	r4,r4,160
   40680:	20800015 	stw	r2,0(r4)
   40684:	20c00115 	stw	r3,4(r4)
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 1);
#endif

	/* Save original matrix */
	for(i = 0; i < N; i++)
		for(j = 0; j < N; j++)
   40688:	e0bf5517 	ldw	r2,-684(fp)
   4068c:	10800044 	addi	r2,r2,1
   40690:	e0bf5515 	stw	r2,-684(fp)
   40694:	e0bf5517 	ldw	r2,-684(fp)
   40698:	10800110 	cmplti	r2,r2,4
   4069c:	103fe01e 	bne	r2,zero,40620 <the_algorithm+0x70>
	/* Start performance counter: Transfer matrix */
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 1);
#endif

	/* Save original matrix */
	for(i = 0; i < N; i++)
   406a0:	e0bf5417 	ldw	r2,-688(fp)
   406a4:	10800044 	addi	r2,r2,1
   406a8:	e0bf5415 	stw	r2,-688(fp)
   406ac:	e0bf5417 	ldw	r2,-688(fp)
   406b0:	10800110 	cmplti	r2,r2,4
   406b4:	103fd81e 	bne	r2,zero,40618 <the_algorithm+0x68>
	/* Timestamp before: KK Iterations */
	then[1] = alt_timestamp();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Stop performance counter: Transfer matrix */
	PERF_END(PERFORMANCE_COUNTER_BASE, 1);
   406b8:	0007883a 	mov	r3,zero
   406bc:	00800404 	movi	r2,16
   406c0:	10c00035 	stwio	r3,0(r2)

	/* Start performance counter: KK Iterations */
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 2);
   406c4:	0007883a 	mov	r3,zero
   406c8:	00800904 	movi	r2,36
   406cc:	10c00035 	stwio	r3,0(r2)
#endif

	/* KK iterations */
	for(k = 0; k < N-1; k++) {
   406d0:	e03f5615 	stw	zero,-680(fp)
   406d4:	00011a06 	br	40b40 <the_algorithm+0x590>
		for(i = 0; i < N; i++) {
   406d8:	e03f5415 	stw	zero,-688(fp)
   406dc:	00010006 	br	40ae0 <the_algorithm+0x530>
			for(j = 0; j < N; j++) {
   406e0:	e03f5515 	stw	zero,-684(fp)
   406e4:	0000f806 	br	40ac8 <the_algorithm+0x518>
				matrix_K[next][i % N][j % N] =
   406e8:	e0ff5417 	ldw	r3,-688(fp)
   406ec:	00a00034 	movhi	r2,32768
   406f0:	108000c4 	addi	r2,r2,3
   406f4:	1884703a 	and	r2,r3,r2
   406f8:	1000040e 	bge	r2,zero,4070c <the_algorithm+0x15c>
   406fc:	10bfffc4 	addi	r2,r2,-1
   40700:	00ffff04 	movi	r3,-4
   40704:	10c4b03a 	or	r2,r2,r3
   40708:	10800044 	addi	r2,r2,1
   4070c:	1027883a 	mov	r19,r2
   40710:	e0ff5517 	ldw	r3,-684(fp)
   40714:	00a00034 	movhi	r2,32768
   40718:	108000c4 	addi	r2,r2,3
   4071c:	1884703a 	and	r2,r3,r2
   40720:	1000040e 	bge	r2,zero,40734 <the_algorithm+0x184>
   40724:	10bfffc4 	addi	r2,r2,-1
   40728:	00ffff04 	movi	r3,-4
   4072c:	10c4b03a 	or	r2,r2,r3
   40730:	10800044 	addi	r2,r2,1
   40734:	1025883a 	mov	r18,r2
						(matrix_K[curr][i % N][j % N] * matrix_K[curr][(i + 1) % N][(j + 1) % N] - (matrix_K[curr][(i + 1) % N][j % N] * matrix_K[curr][i % N][(j + 1) % N])) /
   40738:	e0ff5417 	ldw	r3,-688(fp)
   4073c:	00a00034 	movhi	r2,32768
   40740:	108000c4 	addi	r2,r2,3
   40744:	1884703a 	and	r2,r3,r2
   40748:	1000040e 	bge	r2,zero,4075c <the_algorithm+0x1ac>
   4074c:	10bfffc4 	addi	r2,r2,-1
   40750:	00ffff04 	movi	r3,-4
   40754:	10c4b03a 	or	r2,r2,r3
   40758:	10800044 	addi	r2,r2,1
   4075c:	1009883a 	mov	r4,r2
   40760:	e0ff5517 	ldw	r3,-684(fp)
   40764:	00a00034 	movhi	r2,32768
   40768:	108000c4 	addi	r2,r2,3
   4076c:	1884703a 	and	r2,r3,r2
   40770:	1000040e 	bge	r2,zero,40784 <the_algorithm+0x1d4>
   40774:	10bfffc4 	addi	r2,r2,-1
   40778:	00ffff04 	movi	r3,-4
   4077c:	10c4b03a 	or	r2,r2,r3
   40780:	10800044 	addi	r2,r2,1
   40784:	1007883a 	mov	r3,r2
   40788:	e0bf5917 	ldw	r2,-668(fp)
   4078c:	1085883a 	add	r2,r2,r2
   40790:	1085883a 	add	r2,r2,r2
   40794:	1105883a 	add	r2,r2,r4
   40798:	1085883a 	add	r2,r2,r2
   4079c:	1085883a 	add	r2,r2,r2
   407a0:	10c5883a 	add	r2,r2,r3
   407a4:	100490fa 	slli	r2,r2,3
   407a8:	e0ff5404 	addi	r3,fp,-688
   407ac:	1885883a 	add	r2,r3,r2
   407b0:	10802804 	addi	r2,r2,160
   407b4:	11400017 	ldw	r5,0(r2)
   407b8:	11800117 	ldw	r6,4(r2)
   407bc:	e0bf5417 	ldw	r2,-688(fp)
   407c0:	10c00044 	addi	r3,r2,1
   407c4:	00a00034 	movhi	r2,32768
   407c8:	108000c4 	addi	r2,r2,3
   407cc:	1884703a 	and	r2,r3,r2
   407d0:	1000040e 	bge	r2,zero,407e4 <the_algorithm+0x234>
   407d4:	10bfffc4 	addi	r2,r2,-1
   407d8:	00ffff04 	movi	r3,-4
   407dc:	10c4b03a 	or	r2,r2,r3
   407e0:	10800044 	addi	r2,r2,1
   407e4:	1009883a 	mov	r4,r2
   407e8:	e0bf5517 	ldw	r2,-684(fp)
   407ec:	10c00044 	addi	r3,r2,1
   407f0:	00a00034 	movhi	r2,32768
   407f4:	108000c4 	addi	r2,r2,3
   407f8:	1884703a 	and	r2,r3,r2
   407fc:	1000040e 	bge	r2,zero,40810 <the_algorithm+0x260>
   40800:	10bfffc4 	addi	r2,r2,-1
   40804:	00ffff04 	movi	r3,-4
   40808:	10c4b03a 	or	r2,r2,r3
   4080c:	10800044 	addi	r2,r2,1
   40810:	1007883a 	mov	r3,r2
   40814:	e0bf5917 	ldw	r2,-668(fp)
   40818:	1085883a 	add	r2,r2,r2
   4081c:	1085883a 	add	r2,r2,r2
   40820:	1105883a 	add	r2,r2,r4
   40824:	1085883a 	add	r2,r2,r2
   40828:	1085883a 	add	r2,r2,r2
   4082c:	10c5883a 	add	r2,r2,r3
   40830:	100490fa 	slli	r2,r2,3
   40834:	e0ff5404 	addi	r3,fp,-688
   40838:	1885883a 	add	r2,r3,r2
   4083c:	11002804 	addi	r4,r2,160
   40840:	20800017 	ldw	r2,0(r4)
   40844:	20c00117 	ldw	r3,4(r4)
   40848:	2809883a 	mov	r4,r5
   4084c:	300b883a 	mov	r5,r6
   40850:	100d883a 	mov	r6,r2
   40854:	180f883a 	mov	r7,r3
   40858:	00421140 	call	42114 <__muldf3>
   4085c:	1009883a 	mov	r4,r2
   40860:	180b883a 	mov	r5,r3
   40864:	2021883a 	mov	r16,r4
   40868:	2823883a 	mov	r17,r5
   4086c:	e0bf5417 	ldw	r2,-688(fp)
   40870:	10c00044 	addi	r3,r2,1
   40874:	00a00034 	movhi	r2,32768
   40878:	108000c4 	addi	r2,r2,3
   4087c:	1884703a 	and	r2,r3,r2
   40880:	1000040e 	bge	r2,zero,40894 <the_algorithm+0x2e4>
   40884:	10bfffc4 	addi	r2,r2,-1
   40888:	00ffff04 	movi	r3,-4
   4088c:	10c4b03a 	or	r2,r2,r3
   40890:	10800044 	addi	r2,r2,1
   40894:	1009883a 	mov	r4,r2
   40898:	e0ff5517 	ldw	r3,-684(fp)
   4089c:	00a00034 	movhi	r2,32768
   408a0:	108000c4 	addi	r2,r2,3
   408a4:	1884703a 	and	r2,r3,r2
   408a8:	1000040e 	bge	r2,zero,408bc <the_algorithm+0x30c>
   408ac:	10bfffc4 	addi	r2,r2,-1
   408b0:	00ffff04 	movi	r3,-4
   408b4:	10c4b03a 	or	r2,r2,r3
   408b8:	10800044 	addi	r2,r2,1
   408bc:	1007883a 	mov	r3,r2
   408c0:	e0bf5917 	ldw	r2,-668(fp)
   408c4:	1085883a 	add	r2,r2,r2
   408c8:	1085883a 	add	r2,r2,r2
   408cc:	1105883a 	add	r2,r2,r4
   408d0:	1085883a 	add	r2,r2,r2
   408d4:	1085883a 	add	r2,r2,r2
   408d8:	10c5883a 	add	r2,r2,r3
   408dc:	100490fa 	slli	r2,r2,3
   408e0:	e17f5404 	addi	r5,fp,-688
   408e4:	2885883a 	add	r2,r5,r2
   408e8:	10802804 	addi	r2,r2,160
   408ec:	11400017 	ldw	r5,0(r2)
   408f0:	11800117 	ldw	r6,4(r2)
   408f4:	e0ff5417 	ldw	r3,-688(fp)
   408f8:	00a00034 	movhi	r2,32768
   408fc:	108000c4 	addi	r2,r2,3
   40900:	1884703a 	and	r2,r3,r2
   40904:	1000040e 	bge	r2,zero,40918 <the_algorithm+0x368>
   40908:	10bfffc4 	addi	r2,r2,-1
   4090c:	00ffff04 	movi	r3,-4
   40910:	10c4b03a 	or	r2,r2,r3
   40914:	10800044 	addi	r2,r2,1
   40918:	1009883a 	mov	r4,r2
   4091c:	e0bf5517 	ldw	r2,-684(fp)
   40920:	10c00044 	addi	r3,r2,1
   40924:	00a00034 	movhi	r2,32768
   40928:	108000c4 	addi	r2,r2,3
   4092c:	1884703a 	and	r2,r3,r2
   40930:	1000040e 	bge	r2,zero,40944 <the_algorithm+0x394>
   40934:	10bfffc4 	addi	r2,r2,-1
   40938:	00ffff04 	movi	r3,-4
   4093c:	10c4b03a 	or	r2,r2,r3
   40940:	10800044 	addi	r2,r2,1
   40944:	1007883a 	mov	r3,r2
   40948:	e0bf5917 	ldw	r2,-668(fp)
   4094c:	1085883a 	add	r2,r2,r2
   40950:	1085883a 	add	r2,r2,r2
   40954:	1105883a 	add	r2,r2,r4
   40958:	1085883a 	add	r2,r2,r2
   4095c:	1085883a 	add	r2,r2,r2
   40960:	10c5883a 	add	r2,r2,r3
   40964:	100490fa 	slli	r2,r2,3
   40968:	e0ff5404 	addi	r3,fp,-688
   4096c:	1885883a 	add	r2,r3,r2
   40970:	11002804 	addi	r4,r2,160
   40974:	20800017 	ldw	r2,0(r4)
   40978:	20c00117 	ldw	r3,4(r4)
   4097c:	2809883a 	mov	r4,r5
   40980:	300b883a 	mov	r5,r6
   40984:	100d883a 	mov	r6,r2
   40988:	180f883a 	mov	r7,r3
   4098c:	00421140 	call	42114 <__muldf3>
   40990:	1009883a 	mov	r4,r2
   40994:	180b883a 	mov	r5,r3
   40998:	2005883a 	mov	r2,r4
   4099c:	2807883a 	mov	r3,r5
   409a0:	8009883a 	mov	r4,r16
   409a4:	880b883a 	mov	r5,r17
   409a8:	100d883a 	mov	r6,r2
   409ac:	180f883a 	mov	r7,r3
   409b0:	00428000 	call	42800 <__subdf3>
   409b4:	100f883a 	mov	r7,r2
   409b8:	1811883a 	mov	r8,r3
   409bc:	380b883a 	mov	r5,r7
   409c0:	400d883a 	mov	r6,r8
						(k? (matrix_K[prev][(i + 1) % N][(j + 1) % N]) : 1.0);
   409c4:	e0bf5617 	ldw	r2,-680(fp)
   409c8:	10002426 	beq	r2,zero,40a5c <the_algorithm+0x4ac>
   409cc:	e0bf5417 	ldw	r2,-688(fp)
   409d0:	10c00044 	addi	r3,r2,1
   409d4:	00a00034 	movhi	r2,32768
   409d8:	108000c4 	addi	r2,r2,3
   409dc:	1884703a 	and	r2,r3,r2
   409e0:	1000040e 	bge	r2,zero,409f4 <the_algorithm+0x444>
   409e4:	10bfffc4 	addi	r2,r2,-1
   409e8:	00ffff04 	movi	r3,-4
   409ec:	10c4b03a 	or	r2,r2,r3
   409f0:	10800044 	addi	r2,r2,1
   409f4:	1009883a 	mov	r4,r2
   409f8:	e0bf5517 	ldw	r2,-684(fp)
   409fc:	10c00044 	addi	r3,r2,1
   40a00:	00a00034 	movhi	r2,32768
   40a04:	108000c4 	addi	r2,r2,3
   40a08:	1884703a 	and	r2,r3,r2
   40a0c:	1000040e 	bge	r2,zero,40a20 <the_algorithm+0x470>
   40a10:	10bfffc4 	addi	r2,r2,-1
   40a14:	00ffff04 	movi	r3,-4
   40a18:	10c4b03a 	or	r2,r2,r3
   40a1c:	10800044 	addi	r2,r2,1
   40a20:	1007883a 	mov	r3,r2
   40a24:	e0bf5817 	ldw	r2,-672(fp)
   40a28:	1085883a 	add	r2,r2,r2
   40a2c:	1085883a 	add	r2,r2,r2
   40a30:	1105883a 	add	r2,r2,r4
   40a34:	1085883a 	add	r2,r2,r2
   40a38:	1085883a 	add	r2,r2,r2
   40a3c:	10c5883a 	add	r2,r2,r3
   40a40:	100490fa 	slli	r2,r2,3
   40a44:	e0ff5404 	addi	r3,fp,-688
   40a48:	1885883a 	add	r2,r3,r2
   40a4c:	11002804 	addi	r4,r2,160
   40a50:	20800017 	ldw	r2,0(r4)
   40a54:	20c00117 	ldw	r3,4(r4)
   40a58:	00000206 	br	40a64 <the_algorithm+0x4b4>
   40a5c:	0005883a 	mov	r2,zero
   40a60:	00cffc34 	movhi	r3,16368
	/* KK iterations */
	for(k = 0; k < N-1; k++) {
		for(i = 0; i < N; i++) {
			for(j = 0; j < N; j++) {
				matrix_K[next][i % N][j % N] =
						(matrix_K[curr][i % N][j % N] * matrix_K[curr][(i + 1) % N][(j + 1) % N] - (matrix_K[curr][(i + 1) % N][j % N] * matrix_K[curr][i % N][(j + 1) % N])) /
   40a64:	2809883a 	mov	r4,r5
   40a68:	300b883a 	mov	r5,r6
   40a6c:	100d883a 	mov	r6,r2
   40a70:	180f883a 	mov	r7,r3
   40a74:	00418400 	call	41840 <__divdf3>
   40a78:	1009883a 	mov	r4,r2
   40a7c:	180b883a 	mov	r5,r3
   40a80:	2005883a 	mov	r2,r4
   40a84:	2807883a 	mov	r3,r5

	/* KK iterations */
	for(k = 0; k < N-1; k++) {
		for(i = 0; i < N; i++) {
			for(j = 0; j < N; j++) {
				matrix_K[next][i % N][j % N] =
   40a88:	e13f5717 	ldw	r4,-676(fp)
   40a8c:	2109883a 	add	r4,r4,r4
   40a90:	2109883a 	add	r4,r4,r4
   40a94:	24c9883a 	add	r4,r4,r19
   40a98:	2109883a 	add	r4,r4,r4
   40a9c:	2109883a 	add	r4,r4,r4
   40aa0:	2489883a 	add	r4,r4,r18
   40aa4:	200890fa 	slli	r4,r4,3
   40aa8:	e17f5404 	addi	r5,fp,-688
   40aac:	2909883a 	add	r4,r5,r4
   40ab0:	21002804 	addi	r4,r4,160
   40ab4:	20800015 	stw	r2,0(r4)
   40ab8:	20c00115 	stw	r3,4(r4)
#endif

	/* KK iterations */
	for(k = 0; k < N-1; k++) {
		for(i = 0; i < N; i++) {
			for(j = 0; j < N; j++) {
   40abc:	e0bf5517 	ldw	r2,-684(fp)
   40ac0:	10800044 	addi	r2,r2,1
   40ac4:	e0bf5515 	stw	r2,-684(fp)
   40ac8:	e0bf5517 	ldw	r2,-684(fp)
   40acc:	10800110 	cmplti	r2,r2,4
   40ad0:	103f051e 	bne	r2,zero,406e8 <the_algorithm+0x138>
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 2);
#endif

	/* KK iterations */
	for(k = 0; k < N-1; k++) {
		for(i = 0; i < N; i++) {
   40ad4:	e0bf5417 	ldw	r2,-688(fp)
   40ad8:	10800044 	addi	r2,r2,1
   40adc:	e0bf5415 	stw	r2,-688(fp)
   40ae0:	e0bf5417 	ldw	r2,-688(fp)
   40ae4:	10800110 	cmplti	r2,r2,4
   40ae8:	103efd1e 	bne	r2,zero,406e0 <the_algorithm+0x130>
						(k? (matrix_K[prev][(i + 1) % N][(j + 1) % N]) : 1.0);
			}
		}

		/* Refresh indexes */
		next = (next + 1) % 3;
   40aec:	e0bf5717 	ldw	r2,-676(fp)
   40af0:	10800044 	addi	r2,r2,1
   40af4:	1009883a 	mov	r4,r2
   40af8:	014000c4 	movi	r5,3
   40afc:	0040f680 	call	40f68 <__modsi3>
   40b00:	e0bf5715 	stw	r2,-676(fp)
		prev = (prev + 1) % 3;
   40b04:	e0bf5817 	ldw	r2,-672(fp)
   40b08:	10800044 	addi	r2,r2,1
   40b0c:	1009883a 	mov	r4,r2
   40b10:	014000c4 	movi	r5,3
   40b14:	0040f680 	call	40f68 <__modsi3>
   40b18:	e0bf5815 	stw	r2,-672(fp)
		curr = (curr + 1) % 3;
   40b1c:	e0bf5917 	ldw	r2,-668(fp)
   40b20:	10800044 	addi	r2,r2,1
   40b24:	1009883a 	mov	r4,r2
   40b28:	014000c4 	movi	r5,3
   40b2c:	0040f680 	call	40f68 <__modsi3>
   40b30:	e0bf5915 	stw	r2,-668(fp)
	/* Start performance counter: KK Iterations */
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 2);
#endif

	/* KK iterations */
	for(k = 0; k < N-1; k++) {
   40b34:	e0bf5617 	ldw	r2,-680(fp)
   40b38:	10800044 	addi	r2,r2,1
   40b3c:	e0bf5615 	stw	r2,-680(fp)
   40b40:	e0bf5617 	ldw	r2,-680(fp)
   40b44:	108000d0 	cmplti	r2,r2,3
   40b48:	103ee31e 	bne	r2,zero,406d8 <the_algorithm+0x128>
	/* Timestamp after: KK Iterations */
	now[1] = alt_timestamp();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Stop performance counter: KK Iterations */
	PERF_END(PERFORMANCE_COUNTER_BASE, 2);
   40b4c:	0007883a 	mov	r3,zero
   40b50:	00800804 	movi	r2,32
   40b54:	10c00035 	stwio	r3,0(r2)
#endif

	/* Print intermediate matrix */
	printf("################################################\n");
   40b58:	01000174 	movhi	r4,5
   40b5c:	213ef604 	addi	r4,r4,-1064
   40b60:	00433840 	call	43384 <puts>
	printf("Matrix K+1: K = %d\n", (k+1));
   40b64:	e0bf5617 	ldw	r2,-680(fp)
   40b68:	10800044 	addi	r2,r2,1
   40b6c:	01000174 	movhi	r4,5
   40b70:	213f0304 	addi	r4,r4,-1012
   40b74:	100b883a 	mov	r5,r2
   40b78:	004326c0 	call	4326c <printf>
	print_matrix(matrix_K[curr]);
   40b7c:	e0ff7c04 	addi	r3,fp,-528
   40b80:	e0bf5917 	ldw	r2,-668(fp)
   40b84:	100491fa 	slli	r2,r2,7
   40b88:	1885883a 	add	r2,r3,r2
   40b8c:	1009883a 	mov	r4,r2
   40b90:	00402040 	call	40204 <print_matrix>
	/* Timestamp before: Final iteration */
	then[2] = alt_timestamp();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Start performance counter: Final iteration */
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 3);
   40b94:	0007883a 	mov	r3,zero
   40b98:	00800d04 	movi	r2,52
   40b9c:	10c00035 	stwio	r3,0(r2)
#endif

	/* Final iteration: Calculate inverse */
	for(i = 0; i < N; i++)
   40ba0:	e03f5415 	stw	zero,-688(fp)
   40ba4:	00005506 	br	40cfc <the_algorithm+0x74c>
		for(j = 0; j < N; j++)
   40ba8:	e03f5515 	stw	zero,-684(fp)
   40bac:	00004d06 	br	40ce4 <the_algorithm+0x734>
				matrix_K[next][i][j] = (matrix_K[prev][(j + 1) % N][(i + 1) % N] / matrix_K[curr][i][j]);
   40bb0:	e0bf5517 	ldw	r2,-684(fp)
   40bb4:	10c00044 	addi	r3,r2,1
   40bb8:	00a00034 	movhi	r2,32768
   40bbc:	108000c4 	addi	r2,r2,3
   40bc0:	1884703a 	and	r2,r3,r2
   40bc4:	1000040e 	bge	r2,zero,40bd8 <the_algorithm+0x628>
   40bc8:	10bfffc4 	addi	r2,r2,-1
   40bcc:	00ffff04 	movi	r3,-4
   40bd0:	10c4b03a 	or	r2,r2,r3
   40bd4:	10800044 	addi	r2,r2,1
   40bd8:	1009883a 	mov	r4,r2
   40bdc:	e0bf5417 	ldw	r2,-688(fp)
   40be0:	10c00044 	addi	r3,r2,1
   40be4:	00a00034 	movhi	r2,32768
   40be8:	108000c4 	addi	r2,r2,3
   40bec:	1884703a 	and	r2,r3,r2
   40bf0:	1000040e 	bge	r2,zero,40c04 <the_algorithm+0x654>
   40bf4:	10bfffc4 	addi	r2,r2,-1
   40bf8:	00ffff04 	movi	r3,-4
   40bfc:	10c4b03a 	or	r2,r2,r3
   40c00:	10800044 	addi	r2,r2,1
   40c04:	1007883a 	mov	r3,r2
   40c08:	e0bf5817 	ldw	r2,-672(fp)
   40c0c:	1085883a 	add	r2,r2,r2
   40c10:	1085883a 	add	r2,r2,r2
   40c14:	1105883a 	add	r2,r2,r4
   40c18:	1085883a 	add	r2,r2,r2
   40c1c:	1085883a 	add	r2,r2,r2
   40c20:	10c5883a 	add	r2,r2,r3
   40c24:	100490fa 	slli	r2,r2,3
   40c28:	e0ff5404 	addi	r3,fp,-688
   40c2c:	1885883a 	add	r2,r3,r2
   40c30:	10802804 	addi	r2,r2,160
   40c34:	11400017 	ldw	r5,0(r2)
   40c38:	11800117 	ldw	r6,4(r2)
   40c3c:	e0bf5917 	ldw	r2,-668(fp)
   40c40:	1085883a 	add	r2,r2,r2
   40c44:	1087883a 	add	r3,r2,r2
   40c48:	e0bf5417 	ldw	r2,-688(fp)
   40c4c:	1885883a 	add	r2,r3,r2
   40c50:	1085883a 	add	r2,r2,r2
   40c54:	1087883a 	add	r3,r2,r2
   40c58:	e0bf5517 	ldw	r2,-684(fp)
   40c5c:	1885883a 	add	r2,r3,r2
   40c60:	100490fa 	slli	r2,r2,3
   40c64:	e0ff5404 	addi	r3,fp,-688
   40c68:	1885883a 	add	r2,r3,r2
   40c6c:	11002804 	addi	r4,r2,160
   40c70:	20800017 	ldw	r2,0(r4)
   40c74:	20c00117 	ldw	r3,4(r4)
   40c78:	2809883a 	mov	r4,r5
   40c7c:	300b883a 	mov	r5,r6
   40c80:	100d883a 	mov	r6,r2
   40c84:	180f883a 	mov	r7,r3
   40c88:	00418400 	call	41840 <__divdf3>
   40c8c:	1009883a 	mov	r4,r2
   40c90:	180b883a 	mov	r5,r3
   40c94:	2005883a 	mov	r2,r4
   40c98:	2807883a 	mov	r3,r5
   40c9c:	e13f5717 	ldw	r4,-676(fp)
   40ca0:	2109883a 	add	r4,r4,r4
   40ca4:	210b883a 	add	r5,r4,r4
   40ca8:	e13f5417 	ldw	r4,-688(fp)
   40cac:	2909883a 	add	r4,r5,r4
   40cb0:	2109883a 	add	r4,r4,r4
   40cb4:	210b883a 	add	r5,r4,r4
   40cb8:	e13f5517 	ldw	r4,-684(fp)
   40cbc:	2909883a 	add	r4,r5,r4
   40cc0:	200890fa 	slli	r4,r4,3
   40cc4:	e17f5404 	addi	r5,fp,-688
   40cc8:	2909883a 	add	r4,r5,r4
   40ccc:	21002804 	addi	r4,r4,160
   40cd0:	20800015 	stw	r2,0(r4)
   40cd4:	20c00115 	stw	r3,4(r4)
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 3);
#endif

	/* Final iteration: Calculate inverse */
	for(i = 0; i < N; i++)
		for(j = 0; j < N; j++)
   40cd8:	e0bf5517 	ldw	r2,-684(fp)
   40cdc:	10800044 	addi	r2,r2,1
   40ce0:	e0bf5515 	stw	r2,-684(fp)
   40ce4:	e0bf5517 	ldw	r2,-684(fp)
   40ce8:	10800110 	cmplti	r2,r2,4
   40cec:	103fb01e 	bne	r2,zero,40bb0 <the_algorithm+0x600>
	/* Start performance counter: Final iteration */
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 3);
#endif

	/* Final iteration: Calculate inverse */
	for(i = 0; i < N; i++)
   40cf0:	e0bf5417 	ldw	r2,-688(fp)
   40cf4:	10800044 	addi	r2,r2,1
   40cf8:	e0bf5415 	stw	r2,-688(fp)
   40cfc:	e0bf5417 	ldw	r2,-688(fp)
   40d00:	10800110 	cmplti	r2,r2,4
   40d04:	103fa81e 	bne	r2,zero,40ba8 <the_algorithm+0x5f8>
	/* Timestamp after: Final iteration */
	now[2] = alt_timestamp();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Stop performance counter: Final iteration */
	PERF_END(PERFORMANCE_COUNTER_BASE, 3);
   40d08:	0007883a 	mov	r3,zero
   40d0c:	00800c04 	movi	r2,48
   40d10:	10c00035 	stwio	r3,0(r2)
#endif

	/* Print inverted matrix */
	printf("################################################\n");
   40d14:	01000174 	movhi	r4,5
   40d18:	213ef604 	addi	r4,r4,-1064
   40d1c:	00433840 	call	43384 <puts>
	printf("Inverted matrix:\n");
   40d20:	01000174 	movhi	r4,5
   40d24:	213f0804 	addi	r4,r4,-992
   40d28:	00433840 	call	43384 <puts>
	print_matrix(matrix_K[next]);
   40d2c:	e0ff7c04 	addi	r3,fp,-528
   40d30:	e0bf5717 	ldw	r2,-676(fp)
   40d34:	100491fa 	slli	r2,r2,7
   40d38:	1885883a 	add	r2,r3,r2
   40d3c:	1009883a 	mov	r4,r2
   40d40:	00402040 	call	40204 <print_matrix>
	/* Timestamp before: Calculate identity */
	then[3] = alt_timestamp();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Start performance counter: Calculate identity */
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 4);
   40d44:	0007883a 	mov	r3,zero
   40d48:	00801104 	movi	r2,68
   40d4c:	10c00035 	stwio	r3,0(r2)
#endif

	/* Calculate identity */
	multiply_matrix(matrix_K[next], matrix_O, matrix_IC);
   40d50:	e0ff7c04 	addi	r3,fp,-528
   40d54:	e0bf5717 	ldw	r2,-676(fp)
   40d58:	100491fa 	slli	r2,r2,7
   40d5c:	1889883a 	add	r4,r3,r2
   40d60:	e0ff5c04 	addi	r3,fp,-656
   40d64:	e0bfdc04 	addi	r2,fp,-144
   40d68:	180b883a 	mov	r5,r3
   40d6c:	100d883a 	mov	r6,r2
   40d70:	00402b40 	call	402b4 <multiply_matrix>
	/* Timestamp after: Calculate identity */
	now[3] = alt_timestamp();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Stop performance counter: Calculate identity */
	PERF_END(PERFORMANCE_COUNTER_BASE, 4);
   40d74:	0007883a 	mov	r3,zero
   40d78:	00801004 	movi	r2,64
   40d7c:	10c00035 	stwio	r3,0(r2)
#endif

	/* Print calculated identity matrix */
	printf("################################################\n");
   40d80:	01000174 	movhi	r4,5
   40d84:	213ef604 	addi	r4,r4,-1064
   40d88:	00433840 	call	43384 <puts>
	printf("Calculated identity based on calculated inverted matrix:\n");
   40d8c:	01000174 	movhi	r4,5
   40d90:	213f0d04 	addi	r4,r4,-972
   40d94:	00433840 	call	43384 <puts>
	print_matrix(matrix_IC);
   40d98:	e0bfdc04 	addi	r2,fp,-144
   40d9c:	1009883a 	mov	r4,r2
   40da0:	00402040 	call	40204 <print_matrix>
	printf("################################################\n");
   40da4:	01000174 	movhi	r4,5
   40da8:	213ef604 	addi	r4,r4,-1064
   40dac:	00433840 	call	43384 <puts>
	/* Timestamp before: Calculate error */
	then[4] = alt_timestamp();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Start performance counter: Calculate error */
	PERF_BEGIN(PERFORMANCE_COUNTER_BASE, 5);
   40db0:	0007883a 	mov	r3,zero
   40db4:	00801504 	movi	r2,84
   40db8:	10c00035 	stwio	r3,0(r2)
#endif

	/* Calculate error */
	error = calculate_error(matrix_IC);
   40dbc:	e0bfdc04 	addi	r2,fp,-144
   40dc0:	1009883a 	mov	r4,r2
   40dc4:	00404580 	call	40458 <calculate_error>
   40dc8:	e0bf5a15 	stw	r2,-664(fp)
   40dcc:	e0ff5b15 	stw	r3,-660(fp)
	/* Timestamp after: Calculate error */
	now[4] = alt_timestamp();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Stop performance counter: Calculate error */
	PERF_END(PERFORMANCE_COUNTER_BASE, 5);
   40dd0:	0007883a 	mov	r3,zero
   40dd4:	00801404 	movi	r2,80
   40dd8:	10c00035 	stwio	r3,0(r2)
#endif

	/* Print error */
	printf("Error distance: %.8lf\n", error);
   40ddc:	01000174 	movhi	r4,5
   40de0:	213f1c04 	addi	r4,r4,-912
   40de4:	e17f5a17 	ldw	r5,-664(fp)
   40de8:	e1bf5b17 	ldw	r6,-660(fp)
   40dec:	004326c0 	call	4326c <printf>
	printf("Timestamp 1: Iterations: %u ticks\n", now[1] - then[1]);
	printf("Timestamp 2: Final iteration: %u ticks\n", now[2] - then[2]);
	printf("Timestamp 3: Calculated identity: %u ticks\n", now[3] - then[3]);
	printf("Timestamp 4: Error distance: %u ticks\n", now[4] - then[4]);
#endif
}
   40df0:	e6fffc04 	addi	sp,fp,-16
   40df4:	dfc00517 	ldw	ra,20(sp)
   40df8:	df000417 	ldw	fp,16(sp)
   40dfc:	dcc00317 	ldw	r19,12(sp)
   40e00:	dc800217 	ldw	r18,8(sp)
   40e04:	dc400117 	ldw	r17,4(sp)
   40e08:	dc000017 	ldw	r16,0(sp)
   40e0c:	dec00604 	addi	sp,sp,24
   40e10:	f800283a 	ret

00040e14 <main>:

/**
 * @brief Main function.
 */
int main(void) {
   40e14:	defffa04 	addi	sp,sp,-24
   40e18:	dfc00515 	stw	ra,20(sp)
   40e1c:	df000415 	stw	fp,16(sp)
   40e20:	df000404 	addi	fp,sp,16
	/* Start timestamp counter */
	alt_timestamp_start();
#endif
#ifdef ACTIVATE_PERFCOUNT
	/* Reset and start global counter */
	PERF_RESET(PERFORMANCE_COUNTER_BASE);
   40e24:	00c00044 	movi	r3,1
   40e28:	0005883a 	mov	r2,zero
   40e2c:	10c00035 	stwio	r3,0(r2)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_BASE);
   40e30:	0007883a 	mov	r3,zero
   40e34:	00800104 	movi	r2,4
   40e38:	10c00035 	stwio	r3,0(r2)
#endif

	/* Execute algorithm */
	the_algorithm();
   40e3c:	00405b00 	call	405b0 <the_algorithm>

#ifdef ACTIVATE_PERFCOUNT
	/* Stop global counter */
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_BASE);
   40e40:	0007883a 	mov	r3,zero
   40e44:	0005883a 	mov	r2,zero
   40e48:	10c00035 	stwio	r3,0(r2)

	/* Print performance counter report */
	perf_print_formatted_report(PERFORMANCE_COUNTER_BASE, ALT_CPU_FREQ, 5,
   40e4c:	00800174 	movhi	r2,5
   40e50:	10bf4604 	addi	r2,r2,-744
   40e54:	d8800015 	stw	r2,0(sp)
   40e58:	00800174 	movhi	r2,5
   40e5c:	10bf4904 	addi	r2,r2,-732
   40e60:	d8800115 	stw	r2,4(sp)
   40e64:	00800174 	movhi	r2,5
   40e68:	10bf4d04 	addi	r2,r2,-716
   40e6c:	d8800215 	stw	r2,8(sp)
   40e70:	00800174 	movhi	r2,5
   40e74:	10bf5204 	addi	r2,r2,-696
   40e78:	d8800315 	stw	r2,12(sp)
   40e7c:	0009883a 	mov	r4,zero
   40e80:	01405f74 	movhi	r5,381
   40e84:	295e1004 	addi	r5,r5,30784
   40e88:	01800144 	movi	r6,5
   40e8c:	01c00174 	movhi	r7,5
   40e90:	39ff4204 	addi	r7,r7,-760
   40e94:	004e63c0 	call	4e63c <perf_print_formatted_report>
							"Last iteration",
							"Calculated identity",
							"Error distance");
#endif

	return 0;
   40e98:	0005883a 	mov	r2,zero
}
   40e9c:	e037883a 	mov	sp,fp
   40ea0:	dfc00117 	ldw	ra,4(sp)
   40ea4:	df000017 	ldw	fp,0(sp)
   40ea8:	dec00204 	addi	sp,sp,8
   40eac:	f800283a 	ret

00040eb0 <udivmodsi4>:
   40eb0:	2900182e 	bgeu	r5,r4,40f14 <udivmodsi4+0x64>
   40eb4:	28001716 	blt	r5,zero,40f14 <udivmodsi4+0x64>
   40eb8:	00800804 	movi	r2,32
   40ebc:	00c00044 	movi	r3,1
   40ec0:	00000206 	br	40ecc <udivmodsi4+0x1c>
   40ec4:	10001126 	beq	r2,zero,40f0c <udivmodsi4+0x5c>
   40ec8:	28000516 	blt	r5,zero,40ee0 <udivmodsi4+0x30>
   40ecc:	294b883a 	add	r5,r5,r5
   40ed0:	10bfffc4 	addi	r2,r2,-1
   40ed4:	18c7883a 	add	r3,r3,r3
   40ed8:	293ffa36 	bltu	r5,r4,40ec4 <udivmodsi4+0x14>
   40edc:	18000b26 	beq	r3,zero,40f0c <udivmodsi4+0x5c>
   40ee0:	0005883a 	mov	r2,zero
   40ee4:	21400236 	bltu	r4,r5,40ef0 <udivmodsi4+0x40>
   40ee8:	2149c83a 	sub	r4,r4,r5
   40eec:	10c4b03a 	or	r2,r2,r3
   40ef0:	1806d07a 	srli	r3,r3,1
   40ef4:	280ad07a 	srli	r5,r5,1
   40ef8:	183ffa1e 	bne	r3,zero,40ee4 <udivmodsi4+0x34>
   40efc:	3000011e 	bne	r6,zero,40f04 <udivmodsi4+0x54>
   40f00:	f800283a 	ret
   40f04:	2005883a 	mov	r2,r4
   40f08:	f800283a 	ret
   40f0c:	0005883a 	mov	r2,zero
   40f10:	003ffa06 	br	40efc <udivmodsi4+0x4c>
   40f14:	00c00044 	movi	r3,1
   40f18:	0005883a 	mov	r2,zero
   40f1c:	003ff106 	br	40ee4 <udivmodsi4+0x34>

00040f20 <__divsi3>:
   40f20:	deffff04 	addi	sp,sp,-4
   40f24:	dfc00015 	stw	ra,0(sp)
   40f28:	20000916 	blt	r4,zero,40f50 <__divsi3+0x30>
   40f2c:	000f883a 	mov	r7,zero
   40f30:	28000a16 	blt	r5,zero,40f5c <__divsi3+0x3c>
   40f34:	000d883a 	mov	r6,zero
   40f38:	0040eb00 	call	40eb0 <udivmodsi4>
   40f3c:	38000126 	beq	r7,zero,40f44 <__divsi3+0x24>
   40f40:	0085c83a 	sub	r2,zero,r2
   40f44:	dfc00017 	ldw	ra,0(sp)
   40f48:	dec00104 	addi	sp,sp,4
   40f4c:	f800283a 	ret
   40f50:	0109c83a 	sub	r4,zero,r4
   40f54:	01c00044 	movi	r7,1
   40f58:	283ff60e 	bge	r5,zero,40f34 <__divsi3+0x14>
   40f5c:	014bc83a 	sub	r5,zero,r5
   40f60:	39c0005c 	xori	r7,r7,1
   40f64:	003ff306 	br	40f34 <__divsi3+0x14>

00040f68 <__modsi3>:
   40f68:	20000316 	blt	r4,zero,40f78 <__modsi3+0x10>
   40f6c:	28000c16 	blt	r5,zero,40fa0 <__modsi3+0x38>
   40f70:	01800044 	movi	r6,1
   40f74:	0040eb01 	jmpi	40eb0 <udivmodsi4>
   40f78:	deffff04 	addi	sp,sp,-4
   40f7c:	dfc00015 	stw	ra,0(sp)
   40f80:	0109c83a 	sub	r4,zero,r4
   40f84:	28000916 	blt	r5,zero,40fac <__modsi3+0x44>
   40f88:	01800044 	movi	r6,1
   40f8c:	0040eb00 	call	40eb0 <udivmodsi4>
   40f90:	0085c83a 	sub	r2,zero,r2
   40f94:	dfc00017 	ldw	ra,0(sp)
   40f98:	dec00104 	addi	sp,sp,4
   40f9c:	f800283a 	ret
   40fa0:	014bc83a 	sub	r5,zero,r5
   40fa4:	01800044 	movi	r6,1
   40fa8:	0040eb01 	jmpi	40eb0 <udivmodsi4>
   40fac:	014bc83a 	sub	r5,zero,r5
   40fb0:	003ff506 	br	40f88 <__modsi3+0x20>

00040fb4 <__udivsi3>:
   40fb4:	000d883a 	mov	r6,zero
   40fb8:	0040eb01 	jmpi	40eb0 <udivmodsi4>

00040fbc <__umodsi3>:
   40fbc:	01800044 	movi	r6,1
   40fc0:	0040eb01 	jmpi	40eb0 <udivmodsi4>

00040fc4 <__adddf3>:
   40fc4:	00800434 	movhi	r2,16
   40fc8:	10bfffc4 	addi	r2,r2,-1
   40fcc:	defffb04 	addi	sp,sp,-20
   40fd0:	2890703a 	and	r8,r5,r2
   40fd4:	2806d7fa 	srli	r3,r5,31
   40fd8:	3884703a 	and	r2,r7,r2
   40fdc:	2014d77a 	srli	r10,r4,29
   40fe0:	3812d53a 	srli	r9,r7,20
   40fe4:	dc400115 	stw	r17,4(sp)
   40fe8:	100490fa 	slli	r2,r2,3
   40fec:	2822d53a 	srli	r17,r5,20
   40ff0:	380ed7fa 	srli	r7,r7,31
   40ff4:	400a90fa 	slli	r5,r8,3
   40ff8:	3010d77a 	srli	r8,r6,29
   40ffc:	dc800215 	stw	r18,8(sp)
   41000:	dc000015 	stw	r16,0(sp)
   41004:	dfc00415 	stw	ra,16(sp)
   41008:	dcc00315 	stw	r19,12(sp)
   4100c:	1c803fcc 	andi	r18,r3,255
   41010:	202090fa 	slli	r16,r4,3
   41014:	8c41ffcc 	andi	r17,r17,2047
   41018:	2a8ab03a 	or	r5,r5,r10
   4101c:	4901ffcc 	andi	r4,r9,2047
   41020:	1204b03a 	or	r2,r2,r8
   41024:	300c90fa 	slli	r6,r6,3
   41028:	91c07126 	beq	r18,r7,411f0 <__adddf3+0x22c>
   4102c:	8907c83a 	sub	r3,r17,r4
   41030:	00c0a00e 	bge	zero,r3,412b4 <__adddf3+0x2f0>
   41034:	2000291e 	bne	r4,zero,410dc <__adddf3+0x118>
   41038:	1188b03a 	or	r4,r2,r6
   4103c:	20008b1e 	bne	r4,zero,4126c <__adddf3+0x2a8>
   41040:	808001cc 	andi	r2,r16,7
   41044:	10005a26 	beq	r2,zero,411b0 <__adddf3+0x1ec>
   41048:	80c003cc 	andi	r3,r16,15
   4104c:	00800104 	movi	r2,4
   41050:	18805726 	beq	r3,r2,411b0 <__adddf3+0x1ec>
   41054:	81000104 	addi	r4,r16,4
   41058:	2421803a 	cmpltu	r16,r4,r16
   4105c:	2c0b883a 	add	r5,r5,r16
   41060:	2880202c 	andhi	r2,r5,128
   41064:	9007883a 	mov	r3,r18
   41068:	2021883a 	mov	r16,r4
   4106c:	10005326 	beq	r2,zero,411bc <__adddf3+0x1f8>
   41070:	8c400044 	addi	r17,r17,1
   41074:	0081ffc4 	movi	r2,2047
   41078:	8880ae26 	beq	r17,r2,41334 <__adddf3+0x370>
   4107c:	00bfe034 	movhi	r2,65408
   41080:	10bfffc4 	addi	r2,r2,-1
   41084:	288a703a 	and	r5,r5,r2
   41088:	2804977a 	slli	r2,r5,29
   4108c:	280a927a 	slli	r5,r5,9
   41090:	8020d0fa 	srli	r16,r16,3
   41094:	280ad33a 	srli	r5,r5,12
   41098:	1404b03a 	or	r2,r2,r16
   4109c:	8c41ffcc 	andi	r17,r17,2047
   410a0:	8822953a 	slli	r17,r17,20
   410a4:	18c03fcc 	andi	r3,r3,255
   410a8:	180897fa 	slli	r4,r3,31
   410ac:	00c00434 	movhi	r3,16
   410b0:	18ffffc4 	addi	r3,r3,-1
   410b4:	28c6703a 	and	r3,r5,r3
   410b8:	1c46b03a 	or	r3,r3,r17
   410bc:	1906b03a 	or	r3,r3,r4
   410c0:	dfc00417 	ldw	ra,16(sp)
   410c4:	dcc00317 	ldw	r19,12(sp)
   410c8:	dc800217 	ldw	r18,8(sp)
   410cc:	dc400117 	ldw	r17,4(sp)
   410d0:	dc000017 	ldw	r16,0(sp)
   410d4:	dec00504 	addi	sp,sp,20
   410d8:	f800283a 	ret
   410dc:	0101ffc4 	movi	r4,2047
   410e0:	893fd726 	beq	r17,r4,41040 <__adddf3+0x7c>
   410e4:	10802034 	orhi	r2,r2,128
   410e8:	01000e04 	movi	r4,56
   410ec:	20c09416 	blt	r4,r3,41340 <__adddf3+0x37c>
   410f0:	010007c4 	movi	r4,31
   410f4:	20c0b716 	blt	r4,r3,413d4 <__adddf3+0x410>
   410f8:	01000804 	movi	r4,32
   410fc:	20c9c83a 	sub	r4,r4,r3
   41100:	30ced83a 	srl	r7,r6,r3
   41104:	1110983a 	sll	r8,r2,r4
   41108:	3108983a 	sll	r4,r6,r4
   4110c:	10c6d83a 	srl	r3,r2,r3
   41110:	41c4b03a 	or	r2,r8,r7
   41114:	2008c03a 	cmpne	r4,r4,zero
   41118:	110cb03a 	or	r6,r2,r4
   4111c:	818dc83a 	sub	r6,r16,r6
   41120:	81a1803a 	cmpltu	r16,r16,r6
   41124:	28cbc83a 	sub	r5,r5,r3
   41128:	2c0bc83a 	sub	r5,r5,r16
   4112c:	3021883a 	mov	r16,r6
   41130:	2880202c 	andhi	r2,r5,128
   41134:	103fc226 	beq	r2,zero,41040 <__adddf3+0x7c>
   41138:	04c02034 	movhi	r19,128
   4113c:	9cffffc4 	addi	r19,r19,-1
   41140:	2ce6703a 	and	r19,r5,r19
   41144:	98006c26 	beq	r19,zero,412f8 <__adddf3+0x334>
   41148:	9809883a 	mov	r4,r19
   4114c:	00430880 	call	43088 <__clzsi2>
   41150:	10fffe04 	addi	r3,r2,-8
   41154:	010007c4 	movi	r4,31
   41158:	20c06d16 	blt	r4,r3,41310 <__adddf3+0x34c>
   4115c:	01000a04 	movi	r4,40
   41160:	2085c83a 	sub	r2,r4,r2
   41164:	8084d83a 	srl	r2,r16,r2
   41168:	98e6983a 	sll	r19,r19,r3
   4116c:	80e0983a 	sll	r16,r16,r3
   41170:	14c4b03a 	or	r2,r2,r19
   41174:	1c406a16 	blt	r3,r17,41320 <__adddf3+0x35c>
   41178:	1c63c83a 	sub	r17,r3,r17
   4117c:	89400044 	addi	r5,r17,1
   41180:	00c007c4 	movi	r3,31
   41184:	19408616 	blt	r3,r5,413a0 <__adddf3+0x3dc>
   41188:	1c47c83a 	sub	r3,r3,r17
   4118c:	8148d83a 	srl	r4,r16,r5
   41190:	80e0983a 	sll	r16,r16,r3
   41194:	10c6983a 	sll	r3,r2,r3
   41198:	114ad83a 	srl	r5,r2,r5
   4119c:	8004c03a 	cmpne	r2,r16,zero
   411a0:	20e0b03a 	or	r16,r4,r3
   411a4:	80a0b03a 	or	r16,r16,r2
   411a8:	0023883a 	mov	r17,zero
   411ac:	003fa406 	br	41040 <__adddf3+0x7c>
   411b0:	2880202c 	andhi	r2,r5,128
   411b4:	9007883a 	mov	r3,r18
   411b8:	103fad1e 	bne	r2,zero,41070 <__adddf3+0xac>
   411bc:	2804977a 	slli	r2,r5,29
   411c0:	8020d0fa 	srli	r16,r16,3
   411c4:	0101ffc4 	movi	r4,2047
   411c8:	280ad0fa 	srli	r5,r5,3
   411cc:	1404b03a 	or	r2,r2,r16
   411d0:	8900031e 	bne	r17,r4,411e0 <__adddf3+0x21c>
   411d4:	1148b03a 	or	r4,r2,r5
   411d8:	20005626 	beq	r4,zero,41334 <__adddf3+0x370>
   411dc:	29400234 	orhi	r5,r5,8
   411e0:	01000434 	movhi	r4,16
   411e4:	213fffc4 	addi	r4,r4,-1
   411e8:	290a703a 	and	r5,r5,r4
   411ec:	003fab06 	br	4109c <__adddf3+0xd8>
   411f0:	890fc83a 	sub	r7,r17,r4
   411f4:	01c0560e 	bge	zero,r7,41350 <__adddf3+0x38c>
   411f8:	20002426 	beq	r4,zero,4128c <__adddf3+0x2c8>
   411fc:	0101ffc4 	movi	r4,2047
   41200:	893f8f26 	beq	r17,r4,41040 <__adddf3+0x7c>
   41204:	10802034 	orhi	r2,r2,128
   41208:	01000e04 	movi	r4,56
   4120c:	21c09d0e 	bge	r4,r7,41484 <__adddf3+0x4c0>
   41210:	118cb03a 	or	r6,r2,r6
   41214:	300cc03a 	cmpne	r6,r6,zero
   41218:	000f883a 	mov	r7,zero
   4121c:	340d883a 	add	r6,r6,r16
   41220:	3421803a 	cmpltu	r16,r6,r16
   41224:	394b883a 	add	r5,r7,r5
   41228:	2c0b883a 	add	r5,r5,r16
   4122c:	3021883a 	mov	r16,r6
   41230:	2880202c 	andhi	r2,r5,128
   41234:	103f8226 	beq	r2,zero,41040 <__adddf3+0x7c>
   41238:	8c400044 	addi	r17,r17,1
   4123c:	0081ffc4 	movi	r2,2047
   41240:	8880cb26 	beq	r17,r2,41570 <__adddf3+0x5ac>
   41244:	00bfe034 	movhi	r2,65408
   41248:	10bfffc4 	addi	r2,r2,-1
   4124c:	288a703a 	and	r5,r5,r2
   41250:	8006d07a 	srli	r3,r16,1
   41254:	280497fa 	slli	r2,r5,31
   41258:	8400004c 	andi	r16,r16,1
   4125c:	80e0b03a 	or	r16,r16,r3
   41260:	80a0b03a 	or	r16,r16,r2
   41264:	280ad07a 	srli	r5,r5,1
   41268:	003f7506 	br	41040 <__adddf3+0x7c>
   4126c:	18ffffc4 	addi	r3,r3,-1
   41270:	1800481e 	bne	r3,zero,41394 <__adddf3+0x3d0>
   41274:	818dc83a 	sub	r6,r16,r6
   41278:	81a1803a 	cmpltu	r16,r16,r6
   4127c:	288bc83a 	sub	r5,r5,r2
   41280:	2c0bc83a 	sub	r5,r5,r16
   41284:	3021883a 	mov	r16,r6
   41288:	003fa906 	br	41130 <__adddf3+0x16c>
   4128c:	1188b03a 	or	r4,r2,r6
   41290:	203f6b26 	beq	r4,zero,41040 <__adddf3+0x7c>
   41294:	39ffffc4 	addi	r7,r7,-1
   41298:	3800931e 	bne	r7,zero,414e8 <__adddf3+0x524>
   4129c:	340d883a 	add	r6,r6,r16
   412a0:	3421803a 	cmpltu	r16,r6,r16
   412a4:	114b883a 	add	r5,r2,r5
   412a8:	2c0b883a 	add	r5,r5,r16
   412ac:	3021883a 	mov	r16,r6
   412b0:	003fdf06 	br	41230 <__adddf3+0x26c>
   412b4:	1800531e 	bne	r3,zero,41404 <__adddf3+0x440>
   412b8:	88c00044 	addi	r3,r17,1
   412bc:	18c1ffcc 	andi	r3,r3,2047
   412c0:	01000044 	movi	r4,1
   412c4:	20c0a00e 	bge	r4,r3,41548 <__adddf3+0x584>
   412c8:	8187c83a 	sub	r3,r16,r6
   412cc:	80c9803a 	cmpltu	r4,r16,r3
   412d0:	28a7c83a 	sub	r19,r5,r2
   412d4:	9927c83a 	sub	r19,r19,r4
   412d8:	9900202c 	andhi	r4,r19,128
   412dc:	20006226 	beq	r4,zero,41468 <__adddf3+0x4a4>
   412e0:	3421c83a 	sub	r16,r6,r16
   412e4:	1145c83a 	sub	r2,r2,r5
   412e8:	340d803a 	cmpltu	r6,r6,r16
   412ec:	11a7c83a 	sub	r19,r2,r6
   412f0:	3825883a 	mov	r18,r7
   412f4:	983f941e 	bne	r19,zero,41148 <__adddf3+0x184>
   412f8:	8009883a 	mov	r4,r16
   412fc:	00430880 	call	43088 <__clzsi2>
   41300:	10800804 	addi	r2,r2,32
   41304:	10fffe04 	addi	r3,r2,-8
   41308:	010007c4 	movi	r4,31
   4130c:	20ff930e 	bge	r4,r3,4115c <__adddf3+0x198>
   41310:	10bff604 	addi	r2,r2,-40
   41314:	8084983a 	sll	r2,r16,r2
   41318:	0021883a 	mov	r16,zero
   4131c:	1c7f960e 	bge	r3,r17,41178 <__adddf3+0x1b4>
   41320:	017fe034 	movhi	r5,65408
   41324:	297fffc4 	addi	r5,r5,-1
   41328:	88e3c83a 	sub	r17,r17,r3
   4132c:	114a703a 	and	r5,r2,r5
   41330:	003f4306 	br	41040 <__adddf3+0x7c>
   41334:	000b883a 	mov	r5,zero
   41338:	0005883a 	mov	r2,zero
   4133c:	003f5706 	br	4109c <__adddf3+0xd8>
   41340:	118cb03a 	or	r6,r2,r6
   41344:	300cc03a 	cmpne	r6,r6,zero
   41348:	0007883a 	mov	r3,zero
   4134c:	003f7306 	br	4111c <__adddf3+0x158>
   41350:	3800961e 	bne	r7,zero,415ac <__adddf3+0x5e8>
   41354:	89000044 	addi	r4,r17,1
   41358:	2201ffcc 	andi	r8,r4,2047
   4135c:	01c00044 	movi	r7,1
   41360:	3a00680e 	bge	r7,r8,41504 <__adddf3+0x540>
   41364:	01c1ffc4 	movi	r7,2047
   41368:	21c0a726 	beq	r4,r7,41608 <__adddf3+0x644>
   4136c:	340d883a 	add	r6,r6,r16
   41370:	3421803a 	cmpltu	r16,r6,r16
   41374:	114b883a 	add	r5,r2,r5
   41378:	2c0b883a 	add	r5,r5,r16
   4137c:	282097fa 	slli	r16,r5,31
   41380:	300cd07a 	srli	r6,r6,1
   41384:	280ad07a 	srli	r5,r5,1
   41388:	2023883a 	mov	r17,r4
   4138c:	81a0b03a 	or	r16,r16,r6
   41390:	003f2b06 	br	41040 <__adddf3+0x7c>
   41394:	0101ffc4 	movi	r4,2047
   41398:	893f531e 	bne	r17,r4,410e8 <__adddf3+0x124>
   4139c:	003f2806 	br	41040 <__adddf3+0x7c>
   413a0:	893ff844 	addi	r4,r17,-31
   413a4:	00c00804 	movi	r3,32
   413a8:	1108d83a 	srl	r4,r2,r4
   413ac:	28c05126 	beq	r5,r3,414f4 <__adddf3+0x530>
   413b0:	00c00fc4 	movi	r3,63
   413b4:	1c63c83a 	sub	r17,r3,r17
   413b8:	1444983a 	sll	r2,r2,r17
   413bc:	1420b03a 	or	r16,r2,r16
   413c0:	8020c03a 	cmpne	r16,r16,zero
   413c4:	8120b03a 	or	r16,r16,r4
   413c8:	000b883a 	mov	r5,zero
   413cc:	0023883a 	mov	r17,zero
   413d0:	003f1b06 	br	41040 <__adddf3+0x7c>
   413d4:	193ff804 	addi	r4,r3,-32
   413d8:	01c00804 	movi	r7,32
   413dc:	1108d83a 	srl	r4,r2,r4
   413e0:	19c04626 	beq	r3,r7,414fc <__adddf3+0x538>
   413e4:	01c01004 	movi	r7,64
   413e8:	38c7c83a 	sub	r3,r7,r3
   413ec:	10c4983a 	sll	r2,r2,r3
   413f0:	118cb03a 	or	r6,r2,r6
   413f4:	300cc03a 	cmpne	r6,r6,zero
   413f8:	310cb03a 	or	r6,r6,r4
   413fc:	0007883a 	mov	r3,zero
   41400:	003f4606 	br	4111c <__adddf3+0x158>
   41404:	88002b26 	beq	r17,zero,414b4 <__adddf3+0x4f0>
   41408:	0201ffc4 	movi	r8,2047
   4140c:	22002f26 	beq	r4,r8,414cc <__adddf3+0x508>
   41410:	00c7c83a 	sub	r3,zero,r3
   41414:	29402034 	orhi	r5,r5,128
   41418:	02000e04 	movi	r8,56
   4141c:	40c07616 	blt	r8,r3,415f8 <__adddf3+0x634>
   41420:	020007c4 	movi	r8,31
   41424:	40c0d216 	blt	r8,r3,41770 <__adddf3+0x7ac>
   41428:	02000804 	movi	r8,32
   4142c:	40d1c83a 	sub	r8,r8,r3
   41430:	2a14983a 	sll	r10,r5,r8
   41434:	80d2d83a 	srl	r9,r16,r3
   41438:	8210983a 	sll	r8,r16,r8
   4143c:	28cad83a 	srl	r5,r5,r3
   41440:	5252b03a 	or	r9,r10,r9
   41444:	4006c03a 	cmpne	r3,r8,zero
   41448:	48e0b03a 	or	r16,r9,r3
   4144c:	3421c83a 	sub	r16,r6,r16
   41450:	114bc83a 	sub	r5,r2,r5
   41454:	340d803a 	cmpltu	r6,r6,r16
   41458:	298bc83a 	sub	r5,r5,r6
   4145c:	2023883a 	mov	r17,r4
   41460:	3825883a 	mov	r18,r7
   41464:	003f3206 	br	41130 <__adddf3+0x16c>
   41468:	98c4b03a 	or	r2,r19,r3
   4146c:	10001c1e 	bne	r2,zero,414e0 <__adddf3+0x51c>
   41470:	0007883a 	mov	r3,zero
   41474:	000b883a 	mov	r5,zero
   41478:	0021883a 	mov	r16,zero
   4147c:	0023883a 	mov	r17,zero
   41480:	003f4e06 	br	411bc <__adddf3+0x1f8>
   41484:	010007c4 	movi	r4,31
   41488:	21c03c16 	blt	r4,r7,4157c <__adddf3+0x5b8>
   4148c:	01000804 	movi	r4,32
   41490:	21c9c83a 	sub	r4,r4,r7
   41494:	31d0d83a 	srl	r8,r6,r7
   41498:	1112983a 	sll	r9,r2,r4
   4149c:	3108983a 	sll	r4,r6,r4
   414a0:	11ced83a 	srl	r7,r2,r7
   414a4:	4a04b03a 	or	r2,r9,r8
   414a8:	2008c03a 	cmpne	r4,r4,zero
   414ac:	110cb03a 	or	r6,r2,r4
   414b0:	003f5a06 	br	4121c <__adddf3+0x258>
   414b4:	2c10b03a 	or	r8,r5,r16
   414b8:	40000426 	beq	r8,zero,414cc <__adddf3+0x508>
   414bc:	00c6303a 	nor	r3,zero,r3
   414c0:	183fe226 	beq	r3,zero,4144c <__adddf3+0x488>
   414c4:	0201ffc4 	movi	r8,2047
   414c8:	223fd31e 	bne	r4,r8,41418 <__adddf3+0x454>
   414cc:	100b883a 	mov	r5,r2
   414d0:	3021883a 	mov	r16,r6
   414d4:	2023883a 	mov	r17,r4
   414d8:	3825883a 	mov	r18,r7
   414dc:	003ed806 	br	41040 <__adddf3+0x7c>
   414e0:	1821883a 	mov	r16,r3
   414e4:	003f1706 	br	41144 <__adddf3+0x180>
   414e8:	0101ffc4 	movi	r4,2047
   414ec:	893f461e 	bne	r17,r4,41208 <__adddf3+0x244>
   414f0:	003ed306 	br	41040 <__adddf3+0x7c>
   414f4:	0005883a 	mov	r2,zero
   414f8:	003fb006 	br	413bc <__adddf3+0x3f8>
   414fc:	0005883a 	mov	r2,zero
   41500:	003fbb06 	br	413f0 <__adddf3+0x42c>
   41504:	2c06b03a 	or	r3,r5,r16
   41508:	8800841e 	bne	r17,zero,4171c <__adddf3+0x758>
   4150c:	1800b226 	beq	r3,zero,417d8 <__adddf3+0x814>
   41510:	1186b03a 	or	r3,r2,r6
   41514:	183eca26 	beq	r3,zero,41040 <__adddf3+0x7c>
   41518:	340d883a 	add	r6,r6,r16
   4151c:	114b883a 	add	r5,r2,r5
   41520:	3421803a 	cmpltu	r16,r6,r16
   41524:	2c0b883a 	add	r5,r5,r16
   41528:	2880202c 	andhi	r2,r5,128
   4152c:	1000c026 	beq	r2,zero,41830 <__adddf3+0x86c>
   41530:	00bfe034 	movhi	r2,65408
   41534:	10bfffc4 	addi	r2,r2,-1
   41538:	288a703a 	and	r5,r5,r2
   4153c:	3021883a 	mov	r16,r6
   41540:	3823883a 	mov	r17,r7
   41544:	003ebe06 	br	41040 <__adddf3+0x7c>
   41548:	2c06b03a 	or	r3,r5,r16
   4154c:	8800221e 	bne	r17,zero,415d8 <__adddf3+0x614>
   41550:	1800481e 	bne	r3,zero,41674 <__adddf3+0x6b0>
   41554:	1186b03a 	or	r3,r2,r6
   41558:	18000426 	beq	r3,zero,4156c <__adddf3+0x5a8>
   4155c:	100b883a 	mov	r5,r2
   41560:	3021883a 	mov	r16,r6
   41564:	3825883a 	mov	r18,r7
   41568:	003eb506 	br	41040 <__adddf3+0x7c>
   4156c:	0007883a 	mov	r3,zero
   41570:	000b883a 	mov	r5,zero
   41574:	0021883a 	mov	r16,zero
   41578:	003f1006 	br	411bc <__adddf3+0x1f8>
   4157c:	393ff804 	addi	r4,r7,-32
   41580:	02000804 	movi	r8,32
   41584:	1108d83a 	srl	r4,r2,r4
   41588:	3a007726 	beq	r7,r8,41768 <__adddf3+0x7a4>
   4158c:	02001004 	movi	r8,64
   41590:	41cfc83a 	sub	r7,r8,r7
   41594:	11c4983a 	sll	r2,r2,r7
   41598:	118cb03a 	or	r6,r2,r6
   4159c:	300cc03a 	cmpne	r6,r6,zero
   415a0:	310cb03a 	or	r6,r6,r4
   415a4:	000f883a 	mov	r7,zero
   415a8:	003f1c06 	br	4121c <__adddf3+0x258>
   415ac:	88001a1e 	bne	r17,zero,41618 <__adddf3+0x654>
   415b0:	2c10b03a 	or	r8,r5,r16
   415b4:	40005526 	beq	r8,zero,4170c <__adddf3+0x748>
   415b8:	01ce303a 	nor	r7,zero,r7
   415bc:	3800511e 	bne	r7,zero,41704 <__adddf3+0x740>
   415c0:	81a1883a 	add	r16,r16,r6
   415c4:	114b883a 	add	r5,r2,r5
   415c8:	818d803a 	cmpltu	r6,r16,r6
   415cc:	298b883a 	add	r5,r5,r6
   415d0:	2023883a 	mov	r17,r4
   415d4:	003f1606 	br	41230 <__adddf3+0x26c>
   415d8:	1800341e 	bne	r3,zero,416ac <__adddf3+0x6e8>
   415dc:	1186b03a 	or	r3,r2,r6
   415e0:	18006f26 	beq	r3,zero,417a0 <__adddf3+0x7dc>
   415e4:	100b883a 	mov	r5,r2
   415e8:	3021883a 	mov	r16,r6
   415ec:	3825883a 	mov	r18,r7
   415f0:	0441ffc4 	movi	r17,2047
   415f4:	003e9206 	br	41040 <__adddf3+0x7c>
   415f8:	2c20b03a 	or	r16,r5,r16
   415fc:	8020c03a 	cmpne	r16,r16,zero
   41600:	000b883a 	mov	r5,zero
   41604:	003f9106 	br	4144c <__adddf3+0x488>
   41608:	2023883a 	mov	r17,r4
   4160c:	000b883a 	mov	r5,zero
   41610:	0021883a 	mov	r16,zero
   41614:	003ee906 	br	411bc <__adddf3+0x1f8>
   41618:	0201ffc4 	movi	r8,2047
   4161c:	22003b26 	beq	r4,r8,4170c <__adddf3+0x748>
   41620:	01cfc83a 	sub	r7,zero,r7
   41624:	29402034 	orhi	r5,r5,128
   41628:	02000e04 	movi	r8,56
   4162c:	41c06216 	blt	r8,r7,417b8 <__adddf3+0x7f4>
   41630:	020007c4 	movi	r8,31
   41634:	41c07016 	blt	r8,r7,417f8 <__adddf3+0x834>
   41638:	02000804 	movi	r8,32
   4163c:	41d1c83a 	sub	r8,r8,r7
   41640:	2a14983a 	sll	r10,r5,r8
   41644:	81d2d83a 	srl	r9,r16,r7
   41648:	8210983a 	sll	r8,r16,r8
   4164c:	29cad83a 	srl	r5,r5,r7
   41650:	5252b03a 	or	r9,r10,r9
   41654:	400ec03a 	cmpne	r7,r8,zero
   41658:	49e0b03a 	or	r16,r9,r7
   4165c:	81a1883a 	add	r16,r16,r6
   41660:	2885883a 	add	r2,r5,r2
   41664:	818d803a 	cmpltu	r6,r16,r6
   41668:	118b883a 	add	r5,r2,r6
   4166c:	2023883a 	mov	r17,r4
   41670:	003eef06 	br	41230 <__adddf3+0x26c>
   41674:	1186b03a 	or	r3,r2,r6
   41678:	183e7126 	beq	r3,zero,41040 <__adddf3+0x7c>
   4167c:	8187c83a 	sub	r3,r16,r6
   41680:	80d1803a 	cmpltu	r8,r16,r3
   41684:	2889c83a 	sub	r4,r5,r2
   41688:	2209c83a 	sub	r4,r4,r8
   4168c:	2200202c 	andhi	r8,r4,128
   41690:	40005426 	beq	r8,zero,417e4 <__adddf3+0x820>
   41694:	3421c83a 	sub	r16,r6,r16
   41698:	114bc83a 	sub	r5,r2,r5
   4169c:	340d803a 	cmpltu	r6,r6,r16
   416a0:	298bc83a 	sub	r5,r5,r6
   416a4:	3825883a 	mov	r18,r7
   416a8:	003e6506 	br	41040 <__adddf3+0x7c>
   416ac:	1186b03a 	or	r3,r2,r6
   416b0:	18002b26 	beq	r3,zero,41760 <__adddf3+0x79c>
   416b4:	2806d0fa 	srli	r3,r5,3
   416b8:	8020d0fa 	srli	r16,r16,3
   416bc:	280a977a 	slli	r5,r5,29
   416c0:	1900022c 	andhi	r4,r3,8
   416c4:	2c20b03a 	or	r16,r5,r16
   416c8:	20000826 	beq	r4,zero,416ec <__adddf3+0x728>
   416cc:	1008d0fa 	srli	r4,r2,3
   416d0:	2140022c 	andhi	r5,r4,8
   416d4:	2800051e 	bne	r5,zero,416ec <__adddf3+0x728>
   416d8:	300cd0fa 	srli	r6,r6,3
   416dc:	1004977a 	slli	r2,r2,29
   416e0:	2007883a 	mov	r3,r4
   416e4:	3825883a 	mov	r18,r7
   416e8:	11a0b03a 	or	r16,r2,r6
   416ec:	800ad77a 	srli	r5,r16,29
   416f0:	180690fa 	slli	r3,r3,3
   416f4:	802090fa 	slli	r16,r16,3
   416f8:	0441ffc4 	movi	r17,2047
   416fc:	28cab03a 	or	r5,r5,r3
   41700:	003e4f06 	br	41040 <__adddf3+0x7c>
   41704:	0201ffc4 	movi	r8,2047
   41708:	223fc71e 	bne	r4,r8,41628 <__adddf3+0x664>
   4170c:	100b883a 	mov	r5,r2
   41710:	3021883a 	mov	r16,r6
   41714:	2023883a 	mov	r17,r4
   41718:	003e4906 	br	41040 <__adddf3+0x7c>
   4171c:	18002a26 	beq	r3,zero,417c8 <__adddf3+0x804>
   41720:	1186b03a 	or	r3,r2,r6
   41724:	18000e26 	beq	r3,zero,41760 <__adddf3+0x79c>
   41728:	2806d0fa 	srli	r3,r5,3
   4172c:	8020d0fa 	srli	r16,r16,3
   41730:	280a977a 	slli	r5,r5,29
   41734:	1900022c 	andhi	r4,r3,8
   41738:	2c20b03a 	or	r16,r5,r16
   4173c:	203feb26 	beq	r4,zero,416ec <__adddf3+0x728>
   41740:	1008d0fa 	srli	r4,r2,3
   41744:	2140022c 	andhi	r5,r4,8
   41748:	283fe81e 	bne	r5,zero,416ec <__adddf3+0x728>
   4174c:	300cd0fa 	srli	r6,r6,3
   41750:	1004977a 	slli	r2,r2,29
   41754:	2007883a 	mov	r3,r4
   41758:	11a0b03a 	or	r16,r2,r6
   4175c:	003fe306 	br	416ec <__adddf3+0x728>
   41760:	0441ffc4 	movi	r17,2047
   41764:	003e3606 	br	41040 <__adddf3+0x7c>
   41768:	0005883a 	mov	r2,zero
   4176c:	003f8a06 	br	41598 <__adddf3+0x5d4>
   41770:	1a3ff804 	addi	r8,r3,-32
   41774:	02400804 	movi	r9,32
   41778:	2a10d83a 	srl	r8,r5,r8
   4177c:	1a402a26 	beq	r3,r9,41828 <__adddf3+0x864>
   41780:	02401004 	movi	r9,64
   41784:	48c7c83a 	sub	r3,r9,r3
   41788:	28ca983a 	sll	r5,r5,r3
   4178c:	2c20b03a 	or	r16,r5,r16
   41790:	8020c03a 	cmpne	r16,r16,zero
   41794:	8220b03a 	or	r16,r16,r8
   41798:	000b883a 	mov	r5,zero
   4179c:	003f2b06 	br	4144c <__adddf3+0x488>
   417a0:	0007883a 	mov	r3,zero
   417a4:	01402034 	movhi	r5,128
   417a8:	297fffc4 	addi	r5,r5,-1
   417ac:	043ffe04 	movi	r16,-8
   417b0:	0441ffc4 	movi	r17,2047
   417b4:	003e8106 	br	411bc <__adddf3+0x1f8>
   417b8:	2c20b03a 	or	r16,r5,r16
   417bc:	8020c03a 	cmpne	r16,r16,zero
   417c0:	000b883a 	mov	r5,zero
   417c4:	003fa506 	br	4165c <__adddf3+0x698>
   417c8:	100b883a 	mov	r5,r2
   417cc:	3021883a 	mov	r16,r6
   417d0:	0441ffc4 	movi	r17,2047
   417d4:	003e1a06 	br	41040 <__adddf3+0x7c>
   417d8:	100b883a 	mov	r5,r2
   417dc:	3021883a 	mov	r16,r6
   417e0:	003e1706 	br	41040 <__adddf3+0x7c>
   417e4:	20c4b03a 	or	r2,r4,r3
   417e8:	103f6026 	beq	r2,zero,4156c <__adddf3+0x5a8>
   417ec:	200b883a 	mov	r5,r4
   417f0:	1821883a 	mov	r16,r3
   417f4:	003e1206 	br	41040 <__adddf3+0x7c>
   417f8:	3a3ff804 	addi	r8,r7,-32
   417fc:	02400804 	movi	r9,32
   41800:	2a10d83a 	srl	r8,r5,r8
   41804:	3a400c26 	beq	r7,r9,41838 <__adddf3+0x874>
   41808:	02401004 	movi	r9,64
   4180c:	49cfc83a 	sub	r7,r9,r7
   41810:	29ca983a 	sll	r5,r5,r7
   41814:	2c20b03a 	or	r16,r5,r16
   41818:	8020c03a 	cmpne	r16,r16,zero
   4181c:	8220b03a 	or	r16,r16,r8
   41820:	000b883a 	mov	r5,zero
   41824:	003f8d06 	br	4165c <__adddf3+0x698>
   41828:	000b883a 	mov	r5,zero
   4182c:	003fd706 	br	4178c <__adddf3+0x7c8>
   41830:	3021883a 	mov	r16,r6
   41834:	003e0206 	br	41040 <__adddf3+0x7c>
   41838:	000b883a 	mov	r5,zero
   4183c:	003ff506 	br	41814 <__adddf3+0x850>

00041840 <__divdf3>:
   41840:	defff204 	addi	sp,sp,-56
   41844:	dcc00715 	stw	r19,28(sp)
   41848:	2826d53a 	srli	r19,r5,20
   4184c:	dd400915 	stw	r21,36(sp)
   41850:	282ad7fa 	srli	r21,r5,31
   41854:	ddc00b15 	stw	r23,44(sp)
   41858:	dd800a15 	stw	r22,40(sp)
   4185c:	dc800615 	stw	r18,24(sp)
   41860:	dfc00d15 	stw	ra,52(sp)
   41864:	04800434 	movhi	r18,16
   41868:	94bfffc4 	addi	r18,r18,-1
   4186c:	df000c15 	stw	fp,48(sp)
   41870:	dd000815 	stw	r20,32(sp)
   41874:	dc400515 	stw	r17,20(sp)
   41878:	dc000415 	stw	r16,16(sp)
   4187c:	9cc1ffcc 	andi	r19,r19,2047
   41880:	202d883a 	mov	r22,r4
   41884:	2ca4703a 	and	r18,r5,r18
   41888:	adc03fcc 	andi	r23,r21,255
   4188c:	98006a26 	beq	r19,zero,41a38 <__divdf3+0x1f8>
   41890:	0081ffc4 	movi	r2,2047
   41894:	2021883a 	mov	r16,r4
   41898:	98803726 	beq	r19,r2,41978 <__divdf3+0x138>
   4189c:	90800434 	orhi	r2,r18,16
   418a0:	100490fa 	slli	r2,r2,3
   418a4:	2024d77a 	srli	r18,r4,29
   418a8:	202090fa 	slli	r16,r4,3
   418ac:	9cff0044 	addi	r19,r19,-1023
   418b0:	14a4b03a 	or	r18,r2,r18
   418b4:	0029883a 	mov	r20,zero
   418b8:	0039883a 	mov	fp,zero
   418bc:	3804d53a 	srli	r2,r7,20
   418c0:	382cd7fa 	srli	r22,r7,31
   418c4:	04400434 	movhi	r17,16
   418c8:	8c7fffc4 	addi	r17,r17,-1
   418cc:	1081ffcc 	andi	r2,r2,2047
   418d0:	3011883a 	mov	r8,r6
   418d4:	3c62703a 	and	r17,r7,r17
   418d8:	b2403fcc 	andi	r9,r22,255
   418dc:	10007326 	beq	r2,zero,41aac <__divdf3+0x26c>
   418e0:	0101ffc4 	movi	r4,2047
   418e4:	11006b26 	beq	r2,r4,41a94 <__divdf3+0x254>
   418e8:	89000434 	orhi	r4,r17,16
   418ec:	200890fa 	slli	r4,r4,3
   418f0:	3022d77a 	srli	r17,r6,29
   418f4:	301090fa 	slli	r8,r6,3
   418f8:	10bf0044 	addi	r2,r2,-1023
   418fc:	2462b03a 	or	r17,r4,r17
   41900:	000d883a 	mov	r6,zero
   41904:	ad8af03a 	xor	r5,r21,r22
   41908:	3508b03a 	or	r4,r6,r20
   4190c:	00c003c4 	movi	r3,15
   41910:	280f883a 	mov	r7,r5
   41914:	2d003fcc 	andi	r20,r5,255
   41918:	19009236 	bltu	r3,r4,41b64 <__divdf3+0x324>
   4191c:	2109883a 	add	r4,r4,r4
   41920:	00c00134 	movhi	r3,4
   41924:	18c64e04 	addi	r3,r3,6456
   41928:	2109883a 	add	r4,r4,r4
   4192c:	20c9883a 	add	r4,r4,r3
   41930:	20c00017 	ldw	r3,0(r4)
   41934:	1800683a 	jmp	r3
   41938:	00041b64 	muli	zero,zero,4205
   4193c:	000419d4 	movui	zero,4199
   41940:	00041b54 	movui	zero,4205
   41944:	000419a4 	muli	zero,zero,4198
   41948:	00041b54 	movui	zero,4205
   4194c:	00041b3c 	xorhi	zero,zero,4204
   41950:	00041b54 	movui	zero,4205
   41954:	000419a4 	muli	zero,zero,4198
   41958:	000419d4 	movui	zero,4199
   4195c:	000419d4 	movui	zero,4199
   41960:	00041b3c 	xorhi	zero,zero,4204
   41964:	000419a4 	muli	zero,zero,4198
   41968:	00041994 	movui	zero,4198
   4196c:	00041994 	movui	zero,4198
   41970:	00041994 	movui	zero,4198
   41974:	00041e50 	cmplti	zero,zero,4217
   41978:	9104b03a 	or	r2,r18,r4
   4197c:	10006c1e 	bne	r2,zero,41b30 <__divdf3+0x2f0>
   41980:	05000204 	movi	r20,8
   41984:	0025883a 	mov	r18,zero
   41988:	0021883a 	mov	r16,zero
   4198c:	07000084 	movi	fp,2
   41990:	003fca06 	br	418bc <__divdf3+0x7c>
   41994:	9023883a 	mov	r17,r18
   41998:	8011883a 	mov	r8,r16
   4199c:	b813883a 	mov	r9,r23
   419a0:	e00d883a 	mov	r6,fp
   419a4:	00800084 	movi	r2,2
   419a8:	30800926 	beq	r6,r2,419d0 <__divdf3+0x190>
   419ac:	008000c4 	movi	r2,3
   419b0:	3081d026 	beq	r6,r2,420f4 <__divdf3+0x8b4>
   419b4:	00800044 	movi	r2,1
   419b8:	3081881e 	bne	r6,r2,41fdc <__divdf3+0x79c>
   419bc:	480f883a 	mov	r7,r9
   419c0:	0005883a 	mov	r2,zero
   419c4:	0025883a 	mov	r18,zero
   419c8:	0021883a 	mov	r16,zero
   419cc:	00000506 	br	419e4 <__divdf3+0x1a4>
   419d0:	4829883a 	mov	r20,r9
   419d4:	a1c0004c 	andi	r7,r20,1
   419d8:	0081ffc4 	movi	r2,2047
   419dc:	0025883a 	mov	r18,zero
   419e0:	0021883a 	mov	r16,zero
   419e4:	1004953a 	slli	r2,r2,20
   419e8:	39c03fcc 	andi	r7,r7,255
   419ec:	380e97fa 	slli	r7,r7,31
   419f0:	00c00434 	movhi	r3,16
   419f4:	18ffffc4 	addi	r3,r3,-1
   419f8:	90e4703a 	and	r18,r18,r3
   419fc:	9086b03a 	or	r3,r18,r2
   41a00:	19c6b03a 	or	r3,r3,r7
   41a04:	8005883a 	mov	r2,r16
   41a08:	dfc00d17 	ldw	ra,52(sp)
   41a0c:	df000c17 	ldw	fp,48(sp)
   41a10:	ddc00b17 	ldw	r23,44(sp)
   41a14:	dd800a17 	ldw	r22,40(sp)
   41a18:	dd400917 	ldw	r21,36(sp)
   41a1c:	dd000817 	ldw	r20,32(sp)
   41a20:	dcc00717 	ldw	r19,28(sp)
   41a24:	dc800617 	ldw	r18,24(sp)
   41a28:	dc400517 	ldw	r17,20(sp)
   41a2c:	dc000417 	ldw	r16,16(sp)
   41a30:	dec00e04 	addi	sp,sp,56
   41a34:	f800283a 	ret
   41a38:	9104b03a 	or	r2,r18,r4
   41a3c:	10003726 	beq	r2,zero,41b1c <__divdf3+0x2dc>
   41a40:	90012626 	beq	r18,zero,41edc <__divdf3+0x69c>
   41a44:	9009883a 	mov	r4,r18
   41a48:	d9800215 	stw	r6,8(sp)
   41a4c:	d9c00115 	stw	r7,4(sp)
   41a50:	00430880 	call	43088 <__clzsi2>
   41a54:	d9800217 	ldw	r6,8(sp)
   41a58:	d9c00117 	ldw	r7,4(sp)
   41a5c:	00c009c4 	movi	r3,39
   41a60:	18811a16 	blt	r3,r2,41ecc <__divdf3+0x68c>
   41a64:	01400a04 	movi	r5,40
   41a68:	143ffe04 	addi	r16,r2,-8
   41a6c:	288bc83a 	sub	r5,r5,r2
   41a70:	9424983a 	sll	r18,r18,r16
   41a74:	b14ad83a 	srl	r5,r22,r5
   41a78:	b420983a 	sll	r16,r22,r16
   41a7c:	2ca4b03a 	or	r18,r5,r18
   41a80:	04ff0344 	movi	r19,-1011
   41a84:	98a7c83a 	sub	r19,r19,r2
   41a88:	0029883a 	mov	r20,zero
   41a8c:	0039883a 	mov	fp,zero
   41a90:	003f8a06 	br	418bc <__divdf3+0x7c>
   41a94:	8988b03a 	or	r4,r17,r6
   41a98:	20001e1e 	bne	r4,zero,41b14 <__divdf3+0x2d4>
   41a9c:	0023883a 	mov	r17,zero
   41aa0:	0011883a 	mov	r8,zero
   41aa4:	01800084 	movi	r6,2
   41aa8:	003f9606 	br	41904 <__divdf3+0xc4>
   41aac:	8988b03a 	or	r4,r17,r6
   41ab0:	20001426 	beq	r4,zero,41b04 <__divdf3+0x2c4>
   41ab4:	8800fd26 	beq	r17,zero,41eac <__divdf3+0x66c>
   41ab8:	8809883a 	mov	r4,r17
   41abc:	d9800215 	stw	r6,8(sp)
   41ac0:	da400115 	stw	r9,4(sp)
   41ac4:	00430880 	call	43088 <__clzsi2>
   41ac8:	d9800217 	ldw	r6,8(sp)
   41acc:	da400117 	ldw	r9,4(sp)
   41ad0:	010009c4 	movi	r4,39
   41ad4:	2080f116 	blt	r4,r2,41e9c <__divdf3+0x65c>
   41ad8:	01000a04 	movi	r4,40
   41adc:	123ffe04 	addi	r8,r2,-8
   41ae0:	2089c83a 	sub	r4,r4,r2
   41ae4:	8a22983a 	sll	r17,r17,r8
   41ae8:	3108d83a 	srl	r4,r6,r4
   41aec:	3210983a 	sll	r8,r6,r8
   41af0:	2462b03a 	or	r17,r4,r17
   41af4:	013f0344 	movi	r4,-1011
   41af8:	2085c83a 	sub	r2,r4,r2
   41afc:	000d883a 	mov	r6,zero
   41b00:	003f8006 	br	41904 <__divdf3+0xc4>
   41b04:	0023883a 	mov	r17,zero
   41b08:	0011883a 	mov	r8,zero
   41b0c:	01800044 	movi	r6,1
   41b10:	003f7c06 	br	41904 <__divdf3+0xc4>
   41b14:	018000c4 	movi	r6,3
   41b18:	003f7a06 	br	41904 <__divdf3+0xc4>
   41b1c:	05000104 	movi	r20,4
   41b20:	0025883a 	mov	r18,zero
   41b24:	0021883a 	mov	r16,zero
   41b28:	07000044 	movi	fp,1
   41b2c:	003f6306 	br	418bc <__divdf3+0x7c>
   41b30:	05000304 	movi	r20,12
   41b34:	070000c4 	movi	fp,3
   41b38:	003f6006 	br	418bc <__divdf3+0x7c>
   41b3c:	000f883a 	mov	r7,zero
   41b40:	04800434 	movhi	r18,16
   41b44:	94bfffc4 	addi	r18,r18,-1
   41b48:	043fffc4 	movi	r16,-1
   41b4c:	0081ffc4 	movi	r2,2047
   41b50:	003fa406 	br	419e4 <__divdf3+0x1a4>
   41b54:	0005883a 	mov	r2,zero
   41b58:	0025883a 	mov	r18,zero
   41b5c:	0021883a 	mov	r16,zero
   41b60:	003fa006 	br	419e4 <__divdf3+0x1a4>
   41b64:	9885c83a 	sub	r2,r19,r2
   41b68:	d8800015 	stw	r2,0(sp)
   41b6c:	8c80ef36 	bltu	r17,r18,41f2c <__divdf3+0x6ec>
   41b70:	9440ed26 	beq	r18,r17,41f28 <__divdf3+0x6e8>
   41b74:	d8c00017 	ldw	r3,0(sp)
   41b78:	002d883a 	mov	r22,zero
   41b7c:	18ffffc4 	addi	r3,r3,-1
   41b80:	d8c00015 	stw	r3,0(sp)
   41b84:	9007883a 	mov	r3,r18
   41b88:	4026d63a 	srli	r19,r8,24
   41b8c:	8822923a 	slli	r17,r17,8
   41b90:	1809883a 	mov	r4,r3
   41b94:	402e923a 	slli	r23,r8,8
   41b98:	9c66b03a 	or	r19,r19,r17
   41b9c:	982ad43a 	srli	r21,r19,16
   41ba0:	d8c00315 	stw	r3,12(sp)
   41ba4:	9f3fffcc 	andi	fp,r19,65535
   41ba8:	a80b883a 	mov	r5,r21
   41bac:	0040fb40 	call	40fb4 <__udivsi3>
   41bb0:	d8c00317 	ldw	r3,12(sp)
   41bb4:	a80b883a 	mov	r5,r21
   41bb8:	1025883a 	mov	r18,r2
   41bbc:	1809883a 	mov	r4,r3
   41bc0:	0040fbc0 	call	40fbc <__umodsi3>
   41bc4:	1004943a 	slli	r2,r2,16
   41bc8:	8006d43a 	srli	r3,r16,16
   41bcc:	9709383a 	mul	r4,r18,fp
   41bd0:	10c6b03a 	or	r3,r2,r3
   41bd4:	1900062e 	bgeu	r3,r4,41bf0 <__divdf3+0x3b0>
   41bd8:	1cc7883a 	add	r3,r3,r19
   41bdc:	90bfffc4 	addi	r2,r18,-1
   41be0:	1cc0e436 	bltu	r3,r19,41f74 <__divdf3+0x734>
   41be4:	1900e32e 	bgeu	r3,r4,41f74 <__divdf3+0x734>
   41be8:	94bfff84 	addi	r18,r18,-2
   41bec:	1cc7883a 	add	r3,r3,r19
   41bf0:	1907c83a 	sub	r3,r3,r4
   41bf4:	1809883a 	mov	r4,r3
   41bf8:	a80b883a 	mov	r5,r21
   41bfc:	d8c00315 	stw	r3,12(sp)
   41c00:	0040fb40 	call	40fb4 <__udivsi3>
   41c04:	d8c00317 	ldw	r3,12(sp)
   41c08:	a80b883a 	mov	r5,r21
   41c0c:	1023883a 	mov	r17,r2
   41c10:	1809883a 	mov	r4,r3
   41c14:	0040fbc0 	call	40fbc <__umodsi3>
   41c18:	1004943a 	slli	r2,r2,16
   41c1c:	8f0b383a 	mul	r5,r17,fp
   41c20:	843fffcc 	andi	r16,r16,65535
   41c24:	1420b03a 	or	r16,r2,r16
   41c28:	8140062e 	bgeu	r16,r5,41c44 <__divdf3+0x404>
   41c2c:	84e1883a 	add	r16,r16,r19
   41c30:	88bfffc4 	addi	r2,r17,-1
   41c34:	84c0cd36 	bltu	r16,r19,41f6c <__divdf3+0x72c>
   41c38:	8140cc2e 	bgeu	r16,r5,41f6c <__divdf3+0x72c>
   41c3c:	8c7fff84 	addi	r17,r17,-2
   41c40:	84e1883a 	add	r16,r16,r19
   41c44:	9004943a 	slli	r2,r18,16
   41c48:	b8ffffcc 	andi	r3,r23,65535
   41c4c:	b824d43a 	srli	r18,r23,16
   41c50:	88a2b03a 	or	r17,r17,r2
   41c54:	8808d43a 	srli	r4,r17,16
   41c58:	88bfffcc 	andi	r2,r17,65535
   41c5c:	10cd383a 	mul	r6,r2,r3
   41c60:	20cf383a 	mul	r7,r4,r3
   41c64:	1485383a 	mul	r2,r2,r18
   41c68:	3010d43a 	srli	r8,r6,16
   41c6c:	814bc83a 	sub	r5,r16,r5
   41c70:	3885883a 	add	r2,r7,r2
   41c74:	1205883a 	add	r2,r2,r8
   41c78:	2489383a 	mul	r4,r4,r18
   41c7c:	11c0022e 	bgeu	r2,r7,41c88 <__divdf3+0x448>
   41c80:	01c00074 	movhi	r7,1
   41c84:	21c9883a 	add	r4,r4,r7
   41c88:	100ed43a 	srli	r7,r2,16
   41c8c:	1020943a 	slli	r16,r2,16
   41c90:	31bfffcc 	andi	r6,r6,65535
   41c94:	21c9883a 	add	r4,r4,r7
   41c98:	81a1883a 	add	r16,r16,r6
   41c9c:	29009736 	bltu	r5,r4,41efc <__divdf3+0x6bc>
   41ca0:	29009526 	beq	r5,r4,41ef8 <__divdf3+0x6b8>
   41ca4:	2909c83a 	sub	r4,r5,r4
   41ca8:	b421c83a 	sub	r16,r22,r16
   41cac:	b42d803a 	cmpltu	r22,r22,r16
   41cb0:	25adc83a 	sub	r22,r4,r22
   41cb4:	b4c0c326 	beq	r22,r19,41fc4 <__divdf3+0x784>
   41cb8:	b009883a 	mov	r4,r22
   41cbc:	a80b883a 	mov	r5,r21
   41cc0:	d8c00315 	stw	r3,12(sp)
   41cc4:	0040fb40 	call	40fb4 <__udivsi3>
   41cc8:	b009883a 	mov	r4,r22
   41ccc:	a80b883a 	mov	r5,r21
   41cd0:	d8800115 	stw	r2,4(sp)
   41cd4:	0040fbc0 	call	40fbc <__umodsi3>
   41cd8:	da000117 	ldw	r8,4(sp)
   41cdc:	1004943a 	slli	r2,r2,16
   41ce0:	800ad43a 	srli	r5,r16,16
   41ce4:	4709383a 	mul	r4,r8,fp
   41ce8:	d8c00317 	ldw	r3,12(sp)
   41cec:	114ab03a 	or	r5,r2,r5
   41cf0:	2900062e 	bgeu	r5,r4,41d0c <__divdf3+0x4cc>
   41cf4:	2ccb883a 	add	r5,r5,r19
   41cf8:	40bfffc4 	addi	r2,r8,-1
   41cfc:	2cc0b536 	bltu	r5,r19,41fd4 <__divdf3+0x794>
   41d00:	2900b42e 	bgeu	r5,r4,41fd4 <__divdf3+0x794>
   41d04:	423fff84 	addi	r8,r8,-2
   41d08:	2ccb883a 	add	r5,r5,r19
   41d0c:	290dc83a 	sub	r6,r5,r4
   41d10:	3009883a 	mov	r4,r6
   41d14:	a80b883a 	mov	r5,r21
   41d18:	d8c00315 	stw	r3,12(sp)
   41d1c:	da000115 	stw	r8,4(sp)
   41d20:	d9800215 	stw	r6,8(sp)
   41d24:	0040fb40 	call	40fb4 <__udivsi3>
   41d28:	d9800217 	ldw	r6,8(sp)
   41d2c:	a80b883a 	mov	r5,r21
   41d30:	102d883a 	mov	r22,r2
   41d34:	3009883a 	mov	r4,r6
   41d38:	0040fbc0 	call	40fbc <__umodsi3>
   41d3c:	1004943a 	slli	r2,r2,16
   41d40:	b739383a 	mul	fp,r22,fp
   41d44:	843fffcc 	andi	r16,r16,65535
   41d48:	1408b03a 	or	r4,r2,r16
   41d4c:	d8c00317 	ldw	r3,12(sp)
   41d50:	da000117 	ldw	r8,4(sp)
   41d54:	2700062e 	bgeu	r4,fp,41d70 <__divdf3+0x530>
   41d58:	24c9883a 	add	r4,r4,r19
   41d5c:	b0bfffc4 	addi	r2,r22,-1
   41d60:	24c09a36 	bltu	r4,r19,41fcc <__divdf3+0x78c>
   41d64:	2700992e 	bgeu	r4,fp,41fcc <__divdf3+0x78c>
   41d68:	b5bfff84 	addi	r22,r22,-2
   41d6c:	24c9883a 	add	r4,r4,r19
   41d70:	4010943a 	slli	r8,r8,16
   41d74:	2739c83a 	sub	fp,r4,fp
   41d78:	b210b03a 	or	r8,r22,r8
   41d7c:	400ad43a 	srli	r5,r8,16
   41d80:	40bfffcc 	andi	r2,r8,65535
   41d84:	10c9383a 	mul	r4,r2,r3
   41d88:	1485383a 	mul	r2,r2,r18
   41d8c:	28c7383a 	mul	r3,r5,r3
   41d90:	200cd43a 	srli	r6,r4,16
   41d94:	2ca5383a 	mul	r18,r5,r18
   41d98:	1885883a 	add	r2,r3,r2
   41d9c:	1185883a 	add	r2,r2,r6
   41da0:	10c0022e 	bgeu	r2,r3,41dac <__divdf3+0x56c>
   41da4:	00c00074 	movhi	r3,1
   41da8:	90e5883a 	add	r18,r18,r3
   41dac:	1006d43a 	srli	r3,r2,16
   41db0:	1004943a 	slli	r2,r2,16
   41db4:	213fffcc 	andi	r4,r4,65535
   41db8:	90e5883a 	add	r18,r18,r3
   41dbc:	1109883a 	add	r4,r2,r4
   41dc0:	e480602e 	bgeu	fp,r18,41f44 <__divdf3+0x704>
   41dc4:	e4f9883a 	add	fp,fp,r19
   41dc8:	40bfffc4 	addi	r2,r8,-1
   41dcc:	e4c06b2e 	bgeu	fp,r19,41f7c <__divdf3+0x73c>
   41dd0:	1011883a 	mov	r8,r2
   41dd4:	e4805e26 	beq	fp,r18,41f50 <__divdf3+0x710>
   41dd8:	42000054 	ori	r8,r8,1
   41ddc:	d8c00017 	ldw	r3,0(sp)
   41de0:	1880ffc4 	addi	r2,r3,1023
   41de4:	00806d0e 	bge	zero,r2,41f9c <__divdf3+0x75c>
   41de8:	40c001cc 	andi	r3,r8,7
   41dec:	18000726 	beq	r3,zero,41e0c <__divdf3+0x5cc>
   41df0:	410003cc 	andi	r4,r8,15
   41df4:	00c00104 	movi	r3,4
   41df8:	20c00426 	beq	r4,r3,41e0c <__divdf3+0x5cc>
   41dfc:	40c7883a 	add	r3,r8,r3
   41e00:	1a11803a 	cmpltu	r8,r3,r8
   41e04:	8a23883a 	add	r17,r17,r8
   41e08:	1811883a 	mov	r8,r3
   41e0c:	88c0402c 	andhi	r3,r17,256
   41e10:	18000526 	beq	r3,zero,41e28 <__divdf3+0x5e8>
   41e14:	d8c00017 	ldw	r3,0(sp)
   41e18:	00bfc034 	movhi	r2,65280
   41e1c:	10bfffc4 	addi	r2,r2,-1
   41e20:	88a2703a 	and	r17,r17,r2
   41e24:	18810004 	addi	r2,r3,1024
   41e28:	00c1ff84 	movi	r3,2046
   41e2c:	18bee916 	blt	r3,r2,419d4 <__divdf3+0x194>
   41e30:	8820977a 	slli	r16,r17,29
   41e34:	4010d0fa 	srli	r8,r8,3
   41e38:	8822927a 	slli	r17,r17,9
   41e3c:	1081ffcc 	andi	r2,r2,2047
   41e40:	8220b03a 	or	r16,r16,r8
   41e44:	8824d33a 	srli	r18,r17,12
   41e48:	a1c0004c 	andi	r7,r20,1
   41e4c:	003ee506 	br	419e4 <__divdf3+0x1a4>
   41e50:	9080022c 	andhi	r2,r18,8
   41e54:	10000a26 	beq	r2,zero,41e80 <__divdf3+0x640>
   41e58:	8880022c 	andhi	r2,r17,8
   41e5c:	1000081e 	bne	r2,zero,41e80 <__divdf3+0x640>
   41e60:	00800434 	movhi	r2,16
   41e64:	10bfffc4 	addi	r2,r2,-1
   41e68:	8c800234 	orhi	r18,r17,8
   41e6c:	90a4703a 	and	r18,r18,r2
   41e70:	b00f883a 	mov	r7,r22
   41e74:	4021883a 	mov	r16,r8
   41e78:	0081ffc4 	movi	r2,2047
   41e7c:	003ed906 	br	419e4 <__divdf3+0x1a4>
   41e80:	00800434 	movhi	r2,16
   41e84:	10bfffc4 	addi	r2,r2,-1
   41e88:	94800234 	orhi	r18,r18,8
   41e8c:	90a4703a 	and	r18,r18,r2
   41e90:	a80f883a 	mov	r7,r21
   41e94:	0081ffc4 	movi	r2,2047
   41e98:	003ed206 	br	419e4 <__divdf3+0x1a4>
   41e9c:	147ff604 	addi	r17,r2,-40
   41ea0:	3462983a 	sll	r17,r6,r17
   41ea4:	0011883a 	mov	r8,zero
   41ea8:	003f1206 	br	41af4 <__divdf3+0x2b4>
   41eac:	3009883a 	mov	r4,r6
   41eb0:	d9800215 	stw	r6,8(sp)
   41eb4:	da400115 	stw	r9,4(sp)
   41eb8:	00430880 	call	43088 <__clzsi2>
   41ebc:	10800804 	addi	r2,r2,32
   41ec0:	da400117 	ldw	r9,4(sp)
   41ec4:	d9800217 	ldw	r6,8(sp)
   41ec8:	003f0106 	br	41ad0 <__divdf3+0x290>
   41ecc:	14bff604 	addi	r18,r2,-40
   41ed0:	b4a4983a 	sll	r18,r22,r18
   41ed4:	0021883a 	mov	r16,zero
   41ed8:	003ee906 	br	41a80 <__divdf3+0x240>
   41edc:	d9800215 	stw	r6,8(sp)
   41ee0:	d9c00115 	stw	r7,4(sp)
   41ee4:	00430880 	call	43088 <__clzsi2>
   41ee8:	10800804 	addi	r2,r2,32
   41eec:	d9c00117 	ldw	r7,4(sp)
   41ef0:	d9800217 	ldw	r6,8(sp)
   41ef4:	003ed906 	br	41a5c <__divdf3+0x21c>
   41ef8:	b400262e 	bgeu	r22,r16,41f94 <__divdf3+0x754>
   41efc:	b5ed883a 	add	r22,r22,r23
   41f00:	b5c5803a 	cmpltu	r2,r22,r23
   41f04:	14c5883a 	add	r2,r2,r19
   41f08:	114b883a 	add	r5,r2,r5
   41f0c:	88bfffc4 	addi	r2,r17,-1
   41f10:	9940112e 	bgeu	r19,r5,41f58 <__divdf3+0x718>
   41f14:	29004e36 	bltu	r5,r4,42050 <__divdf3+0x810>
   41f18:	21401c26 	beq	r4,r5,41f8c <__divdf3+0x74c>
   41f1c:	2909c83a 	sub	r4,r5,r4
   41f20:	1023883a 	mov	r17,r2
   41f24:	003f6006 	br	41ca8 <__divdf3+0x468>
   41f28:	443f122e 	bgeu	r8,r16,41b74 <__divdf3+0x334>
   41f2c:	8008d07a 	srli	r4,r16,1
   41f30:	900497fa 	slli	r2,r18,31
   41f34:	802c97fa 	slli	r22,r16,31
   41f38:	9006d07a 	srli	r3,r18,1
   41f3c:	20a0b03a 	or	r16,r4,r2
   41f40:	003f1106 	br	41b88 <__divdf3+0x348>
   41f44:	e4bfa41e 	bne	fp,r18,41dd8 <__divdf3+0x598>
   41f48:	203f9e1e 	bne	r4,zero,41dc4 <__divdf3+0x584>
   41f4c:	002f883a 	mov	r23,zero
   41f50:	b93fa11e 	bne	r23,r4,41dd8 <__divdf3+0x598>
   41f54:	003fa106 	br	41ddc <__divdf3+0x59c>
   41f58:	2cfff01e 	bne	r5,r19,41f1c <__divdf3+0x6dc>
   41f5c:	b5ffed2e 	bgeu	r22,r23,41f14 <__divdf3+0x6d4>
   41f60:	9909c83a 	sub	r4,r19,r4
   41f64:	1023883a 	mov	r17,r2
   41f68:	003f4f06 	br	41ca8 <__divdf3+0x468>
   41f6c:	1023883a 	mov	r17,r2
   41f70:	003f3406 	br	41c44 <__divdf3+0x404>
   41f74:	1025883a 	mov	r18,r2
   41f78:	003f1d06 	br	41bf0 <__divdf3+0x3b0>
   41f7c:	e4803a36 	bltu	fp,r18,42068 <__divdf3+0x828>
   41f80:	97005626 	beq	r18,fp,420dc <__divdf3+0x89c>
   41f84:	1011883a 	mov	r8,r2
   41f88:	003f9306 	br	41dd8 <__divdf3+0x598>
   41f8c:	b4003036 	bltu	r22,r16,42050 <__divdf3+0x810>
   41f90:	1023883a 	mov	r17,r2
   41f94:	0009883a 	mov	r4,zero
   41f98:	003f4306 	br	41ca8 <__divdf3+0x468>
   41f9c:	d8c00017 	ldw	r3,0(sp)
   41fa0:	00bf0084 	movi	r2,-1022
   41fa4:	10c5c83a 	sub	r2,r2,r3
   41fa8:	00c00e04 	movi	r3,56
   41fac:	18800d0e 	bge	r3,r2,41fe4 <__divdf3+0x7a4>
   41fb0:	a1c0004c 	andi	r7,r20,1
   41fb4:	0005883a 	mov	r2,zero
   41fb8:	0025883a 	mov	r18,zero
   41fbc:	0021883a 	mov	r16,zero
   41fc0:	003e8806 	br	419e4 <__divdf3+0x1a4>
   41fc4:	023fffc4 	movi	r8,-1
   41fc8:	003f8406 	br	41ddc <__divdf3+0x59c>
   41fcc:	102d883a 	mov	r22,r2
   41fd0:	003f6706 	br	41d70 <__divdf3+0x530>
   41fd4:	1011883a 	mov	r8,r2
   41fd8:	003f4c06 	br	41d0c <__divdf3+0x4cc>
   41fdc:	4829883a 	mov	r20,r9
   41fe0:	003f7e06 	br	41ddc <__divdf3+0x59c>
   41fe4:	00c007c4 	movi	r3,31
   41fe8:	18802616 	blt	r3,r2,42084 <__divdf3+0x844>
   41fec:	d9000017 	ldw	r4,0(sp)
   41ff0:	408ad83a 	srl	r5,r8,r2
   41ff4:	8884d83a 	srl	r2,r17,r2
   41ff8:	20c10784 	addi	r3,r4,1054
   41ffc:	88c8983a 	sll	r4,r17,r3
   42000:	40c6983a 	sll	r3,r8,r3
   42004:	2908b03a 	or	r4,r5,r4
   42008:	1806c03a 	cmpne	r3,r3,zero
   4200c:	20c6b03a 	or	r3,r4,r3
   42010:	190001cc 	andi	r4,r3,7
   42014:	20000726 	beq	r4,zero,42034 <__divdf3+0x7f4>
   42018:	194003cc 	andi	r5,r3,15
   4201c:	01000104 	movi	r4,4
   42020:	29000426 	beq	r5,r4,42034 <__divdf3+0x7f4>
   42024:	1909883a 	add	r4,r3,r4
   42028:	20c7803a 	cmpltu	r3,r4,r3
   4202c:	10c5883a 	add	r2,r2,r3
   42030:	2007883a 	mov	r3,r4
   42034:	1100202c 	andhi	r4,r2,128
   42038:	20002026 	beq	r4,zero,420bc <__divdf3+0x87c>
   4203c:	a1c0004c 	andi	r7,r20,1
   42040:	00800044 	movi	r2,1
   42044:	0025883a 	mov	r18,zero
   42048:	0021883a 	mov	r16,zero
   4204c:	003e6506 	br	419e4 <__divdf3+0x1a4>
   42050:	b5ed883a 	add	r22,r22,r23
   42054:	b5c5803a 	cmpltu	r2,r22,r23
   42058:	14c5883a 	add	r2,r2,r19
   4205c:	114b883a 	add	r5,r2,r5
   42060:	8c7fff84 	addi	r17,r17,-2
   42064:	003f0f06 	br	41ca4 <__divdf3+0x464>
   42068:	bdc7883a 	add	r3,r23,r23
   4206c:	1def803a 	cmpltu	r23,r3,r23
   42070:	bce7883a 	add	r19,r23,r19
   42074:	40bfff84 	addi	r2,r8,-2
   42078:	e4f9883a 	add	fp,fp,r19
   4207c:	182f883a 	mov	r23,r3
   42080:	003f5306 	br	41dd0 <__divdf3+0x590>
   42084:	d9000017 	ldw	r4,0(sp)
   42088:	00fef884 	movi	r3,-1054
   4208c:	1907c83a 	sub	r3,r3,r4
   42090:	01000804 	movi	r4,32
   42094:	88c6d83a 	srl	r3,r17,r3
   42098:	11001426 	beq	r2,r4,420ec <__divdf3+0x8ac>
   4209c:	d9000017 	ldw	r4,0(sp)
   420a0:	20810f84 	addi	r2,r4,1086
   420a4:	8884983a 	sll	r2,r17,r2
   420a8:	1204b03a 	or	r2,r2,r8
   420ac:	1004c03a 	cmpne	r2,r2,zero
   420b0:	10c6b03a 	or	r3,r2,r3
   420b4:	0005883a 	mov	r2,zero
   420b8:	003fd506 	br	42010 <__divdf3+0x7d0>
   420bc:	1020977a 	slli	r16,r2,29
   420c0:	1806d0fa 	srli	r3,r3,3
   420c4:	1004927a 	slli	r2,r2,9
   420c8:	a1c0004c 	andi	r7,r20,1
   420cc:	80e0b03a 	or	r16,r16,r3
   420d0:	1024d33a 	srli	r18,r2,12
   420d4:	0005883a 	mov	r2,zero
   420d8:	003e4206 	br	419e4 <__divdf3+0x1a4>
   420dc:	b93fe236 	bltu	r23,r4,42068 <__divdf3+0x828>
   420e0:	1011883a 	mov	r8,r2
   420e4:	b93f3c1e 	bne	r23,r4,41dd8 <__divdf3+0x598>
   420e8:	003f3c06 	br	41ddc <__divdf3+0x59c>
   420ec:	0005883a 	mov	r2,zero
   420f0:	003fed06 	br	420a8 <__divdf3+0x868>
   420f4:	00800434 	movhi	r2,16
   420f8:	10bfffc4 	addi	r2,r2,-1
   420fc:	8c800234 	orhi	r18,r17,8
   42100:	90a4703a 	and	r18,r18,r2
   42104:	480f883a 	mov	r7,r9
   42108:	4021883a 	mov	r16,r8
   4210c:	0081ffc4 	movi	r2,2047
   42110:	003e3406 	br	419e4 <__divdf3+0x1a4>

00042114 <__muldf3>:
   42114:	defff204 	addi	sp,sp,-56
   42118:	dd000815 	stw	r20,32(sp)
   4211c:	2828d53a 	srli	r20,r5,20
   42120:	dc800615 	stw	r18,24(sp)
   42124:	2824d7fa 	srli	r18,r5,31
   42128:	ddc00b15 	stw	r23,44(sp)
   4212c:	dd400915 	stw	r21,36(sp)
   42130:	dcc00715 	stw	r19,28(sp)
   42134:	dc400515 	stw	r17,20(sp)
   42138:	dfc00d15 	stw	ra,52(sp)
   4213c:	04400434 	movhi	r17,16
   42140:	8c7fffc4 	addi	r17,r17,-1
   42144:	df000c15 	stw	fp,48(sp)
   42148:	dd800a15 	stw	r22,40(sp)
   4214c:	dc000415 	stw	r16,16(sp)
   42150:	a501ffcc 	andi	r20,r20,2047
   42154:	2027883a 	mov	r19,r4
   42158:	2c62703a 	and	r17,r5,r17
   4215c:	902f883a 	mov	r23,r18
   42160:	95403fcc 	andi	r21,r18,255
   42164:	a0005d26 	beq	r20,zero,422dc <__muldf3+0x1c8>
   42168:	0081ffc4 	movi	r2,2047
   4216c:	2021883a 	mov	r16,r4
   42170:	a0803326 	beq	r20,r2,42240 <__muldf3+0x12c>
   42174:	88800434 	orhi	r2,r17,16
   42178:	100490fa 	slli	r2,r2,3
   4217c:	2022d77a 	srli	r17,r4,29
   42180:	202090fa 	slli	r16,r4,3
   42184:	a53f0044 	addi	r20,r20,-1023
   42188:	1462b03a 	or	r17,r2,r17
   4218c:	0015883a 	mov	r10,zero
   42190:	0039883a 	mov	fp,zero
   42194:	3804d53a 	srli	r2,r7,20
   42198:	382cd7fa 	srli	r22,r7,31
   4219c:	04c00434 	movhi	r19,16
   421a0:	9cffffc4 	addi	r19,r19,-1
   421a4:	1081ffcc 	andi	r2,r2,2047
   421a8:	300b883a 	mov	r5,r6
   421ac:	3ce6703a 	and	r19,r7,r19
   421b0:	b2403fcc 	andi	r9,r22,255
   421b4:	10006626 	beq	r2,zero,42350 <__muldf3+0x23c>
   421b8:	00c1ffc4 	movi	r3,2047
   421bc:	10c05e26 	beq	r2,r3,42338 <__muldf3+0x224>
   421c0:	98c00434 	orhi	r3,r19,16
   421c4:	180690fa 	slli	r3,r3,3
   421c8:	3026d77a 	srli	r19,r6,29
   421cc:	300a90fa 	slli	r5,r6,3
   421d0:	10bf0044 	addi	r2,r2,-1023
   421d4:	1ce6b03a 	or	r19,r3,r19
   421d8:	0007883a 	mov	r3,zero
   421dc:	1a88b03a 	or	r4,r3,r10
   421e0:	2109883a 	add	r4,r4,r4
   421e4:	2109883a 	add	r4,r4,r4
   421e8:	01800134 	movhi	r6,4
   421ec:	31888004 	addi	r6,r6,8704
   421f0:	2189883a 	add	r4,r4,r6
   421f4:	21000017 	ldw	r4,0(r4)
   421f8:	95a4f03a 	xor	r18,r18,r22
   421fc:	2000683a 	jmp	r4
   42200:	00042438 	rdprs	zero,zero,4240
   42204:	00042428 	cmpgeui	zero,zero,4240
   42208:	00042428 	cmpgeui	zero,zero,4240
   4220c:	00042414 	movui	zero,4240
   42210:	00042260 	cmpeqi	zero,zero,4233
   42214:	00042260 	cmpeqi	zero,zero,4233
   42218:	000423fc 	xorhi	zero,zero,4239
   4221c:	00042414 	movui	zero,4240
   42220:	00042260 	cmpeqi	zero,zero,4233
   42224:	000423fc 	xorhi	zero,zero,4239
   42228:	00042260 	cmpeqi	zero,zero,4233
   4222c:	00042414 	movui	zero,4240
   42230:	0004225c 	xori	zero,zero,4233
   42234:	0004225c 	xori	zero,zero,4233
   42238:	0004225c 	xori	zero,zero,4233
   4223c:	00042658 	cmpnei	zero,zero,4249
   42240:	8904b03a 	or	r2,r17,r4
   42244:	10006a1e 	bne	r2,zero,423f0 <__muldf3+0x2dc>
   42248:	02800204 	movi	r10,8
   4224c:	0023883a 	mov	r17,zero
   42250:	0021883a 	mov	r16,zero
   42254:	07000084 	movi	fp,2
   42258:	003fce06 	br	42194 <__muldf3+0x80>
   4225c:	a825883a 	mov	r18,r21
   42260:	00800084 	movi	r2,2
   42264:	e0805226 	beq	fp,r2,423b0 <__muldf3+0x29c>
   42268:	008000c4 	movi	r2,3
   4226c:	e0815d26 	beq	fp,r2,427e4 <__muldf3+0x6d0>
   42270:	00800044 	movi	r2,1
   42274:	e080db1e 	bne	fp,r2,425e4 <__muldf3+0x4d0>
   42278:	902f883a 	mov	r23,r18
   4227c:	0005883a 	mov	r2,zero
   42280:	0023883a 	mov	r17,zero
   42284:	0021883a 	mov	r16,zero
   42288:	1004953a 	slli	r2,r2,20
   4228c:	bdc03fcc 	andi	r23,r23,255
   42290:	b82e97fa 	slli	r23,r23,31
   42294:	00c00434 	movhi	r3,16
   42298:	18ffffc4 	addi	r3,r3,-1
   4229c:	88e2703a 	and	r17,r17,r3
   422a0:	8886b03a 	or	r3,r17,r2
   422a4:	1dc6b03a 	or	r3,r3,r23
   422a8:	8005883a 	mov	r2,r16
   422ac:	dfc00d17 	ldw	ra,52(sp)
   422b0:	df000c17 	ldw	fp,48(sp)
   422b4:	ddc00b17 	ldw	r23,44(sp)
   422b8:	dd800a17 	ldw	r22,40(sp)
   422bc:	dd400917 	ldw	r21,36(sp)
   422c0:	dd000817 	ldw	r20,32(sp)
   422c4:	dcc00717 	ldw	r19,28(sp)
   422c8:	dc800617 	ldw	r18,24(sp)
   422cc:	dc400517 	ldw	r17,20(sp)
   422d0:	dc000417 	ldw	r16,16(sp)
   422d4:	dec00e04 	addi	sp,sp,56
   422d8:	f800283a 	ret
   422dc:	8904b03a 	or	r2,r17,r4
   422e0:	10003e26 	beq	r2,zero,423dc <__muldf3+0x2c8>
   422e4:	8800f226 	beq	r17,zero,426b0 <__muldf3+0x59c>
   422e8:	8809883a 	mov	r4,r17
   422ec:	d9800315 	stw	r6,12(sp)
   422f0:	d9c00115 	stw	r7,4(sp)
   422f4:	00430880 	call	43088 <__clzsi2>
   422f8:	d9800317 	ldw	r6,12(sp)
   422fc:	d9c00117 	ldw	r7,4(sp)
   42300:	00c009c4 	movi	r3,39
   42304:	1880e616 	blt	r3,r2,426a0 <__muldf3+0x58c>
   42308:	00c00a04 	movi	r3,40
   4230c:	143ffe04 	addi	r16,r2,-8
   42310:	1887c83a 	sub	r3,r3,r2
   42314:	8c22983a 	sll	r17,r17,r16
   42318:	98c6d83a 	srl	r3,r19,r3
   4231c:	9c20983a 	sll	r16,r19,r16
   42320:	1c62b03a 	or	r17,r3,r17
   42324:	053f0344 	movi	r20,-1011
   42328:	a0a9c83a 	sub	r20,r20,r2
   4232c:	0015883a 	mov	r10,zero
   42330:	0039883a 	mov	fp,zero
   42334:	003f9706 	br	42194 <__muldf3+0x80>
   42338:	9986b03a 	or	r3,r19,r6
   4233c:	1800251e 	bne	r3,zero,423d4 <__muldf3+0x2c0>
   42340:	0027883a 	mov	r19,zero
   42344:	000b883a 	mov	r5,zero
   42348:	00c00084 	movi	r3,2
   4234c:	003fa306 	br	421dc <__muldf3+0xc8>
   42350:	9986b03a 	or	r3,r19,r6
   42354:	18001b26 	beq	r3,zero,423c4 <__muldf3+0x2b0>
   42358:	9800e026 	beq	r19,zero,426dc <__muldf3+0x5c8>
   4235c:	9809883a 	mov	r4,r19
   42360:	d9800315 	stw	r6,12(sp)
   42364:	da400115 	stw	r9,4(sp)
   42368:	da800215 	stw	r10,8(sp)
   4236c:	00430880 	call	43088 <__clzsi2>
   42370:	d9800317 	ldw	r6,12(sp)
   42374:	da400117 	ldw	r9,4(sp)
   42378:	da800217 	ldw	r10,8(sp)
   4237c:	00c009c4 	movi	r3,39
   42380:	1880d216 	blt	r3,r2,426cc <__muldf3+0x5b8>
   42384:	01c00a04 	movi	r7,40
   42388:	117ffe04 	addi	r5,r2,-8
   4238c:	388fc83a 	sub	r7,r7,r2
   42390:	9966983a 	sll	r19,r19,r5
   42394:	31ced83a 	srl	r7,r6,r7
   42398:	314a983a 	sll	r5,r6,r5
   4239c:	3ce6b03a 	or	r19,r7,r19
   423a0:	00ff0344 	movi	r3,-1011
   423a4:	1885c83a 	sub	r2,r3,r2
   423a8:	0007883a 	mov	r3,zero
   423ac:	003f8b06 	br	421dc <__muldf3+0xc8>
   423b0:	902f883a 	mov	r23,r18
   423b4:	0081ffc4 	movi	r2,2047
   423b8:	0023883a 	mov	r17,zero
   423bc:	0021883a 	mov	r16,zero
   423c0:	003fb106 	br	42288 <__muldf3+0x174>
   423c4:	0027883a 	mov	r19,zero
   423c8:	000b883a 	mov	r5,zero
   423cc:	00c00044 	movi	r3,1
   423d0:	003f8206 	br	421dc <__muldf3+0xc8>
   423d4:	00c000c4 	movi	r3,3
   423d8:	003f8006 	br	421dc <__muldf3+0xc8>
   423dc:	02800104 	movi	r10,4
   423e0:	0023883a 	mov	r17,zero
   423e4:	0021883a 	mov	r16,zero
   423e8:	07000044 	movi	fp,1
   423ec:	003f6906 	br	42194 <__muldf3+0x80>
   423f0:	02800304 	movi	r10,12
   423f4:	070000c4 	movi	fp,3
   423f8:	003f6606 	br	42194 <__muldf3+0x80>
   423fc:	002f883a 	mov	r23,zero
   42400:	04400434 	movhi	r17,16
   42404:	8c7fffc4 	addi	r17,r17,-1
   42408:	043fffc4 	movi	r16,-1
   4240c:	0081ffc4 	movi	r2,2047
   42410:	003f9d06 	br	42288 <__muldf3+0x174>
   42414:	9823883a 	mov	r17,r19
   42418:	2821883a 	mov	r16,r5
   4241c:	4825883a 	mov	r18,r9
   42420:	1839883a 	mov	fp,r3
   42424:	003f8e06 	br	42260 <__muldf3+0x14c>
   42428:	9823883a 	mov	r17,r19
   4242c:	2821883a 	mov	r16,r5
   42430:	1839883a 	mov	fp,r3
   42434:	003f8a06 	br	42260 <__muldf3+0x14c>
   42438:	800cd43a 	srli	r6,r16,16
   4243c:	2808d43a 	srli	r4,r5,16
   42440:	843fffcc 	andi	r16,r16,65535
   42444:	297fffcc 	andi	r5,r5,65535
   42448:	2c15383a 	mul	r10,r5,r16
   4244c:	2411383a 	mul	r8,r4,r16
   42450:	2987383a 	mul	r3,r5,r6
   42454:	500ed43a 	srli	r7,r10,16
   42458:	a085883a 	add	r2,r20,r2
   4245c:	d8800015 	stw	r2,0(sp)
   42460:	1a05883a 	add	r2,r3,r8
   42464:	11c5883a 	add	r2,r2,r7
   42468:	2197383a 	mul	r11,r4,r6
   4246c:	10c0022e 	bgeu	r2,r3,42478 <__muldf3+0x364>
   42470:	00c00074 	movhi	r3,1
   42474:	58d7883a 	add	r11,r11,r3
   42478:	9806d43a 	srli	r3,r19,16
   4247c:	9cffffcc 	andi	r19,r19,65535
   42480:	9c13383a 	mul	r9,r19,r16
   42484:	9991383a 	mul	r8,r19,r6
   42488:	1c21383a 	mul	r16,r3,r16
   4248c:	481ad43a 	srli	r13,r9,16
   42490:	1018943a 	slli	r12,r2,16
   42494:	440f883a 	add	r7,r8,r16
   42498:	52bfffcc 	andi	r10,r10,65535
   4249c:	3b4f883a 	add	r7,r7,r13
   424a0:	1020d43a 	srli	r16,r2,16
   424a4:	6299883a 	add	r12,r12,r10
   424a8:	198d383a 	mul	r6,r3,r6
   424ac:	3a00022e 	bgeu	r7,r8,424b8 <__muldf3+0x3a4>
   424b0:	00800074 	movhi	r2,1
   424b4:	308d883a 	add	r6,r6,r2
   424b8:	8804d43a 	srli	r2,r17,16
   424bc:	8c7fffcc 	andi	r17,r17,65535
   424c0:	2c55383a 	mul	r10,r5,r17
   424c4:	2451383a 	mul	r8,r4,r17
   424c8:	288b383a 	mul	r5,r5,r2
   424cc:	501cd43a 	srli	r14,r10,16
   424d0:	381ad43a 	srli	r13,r7,16
   424d4:	380e943a 	slli	r7,r7,16
   424d8:	2a11883a 	add	r8,r5,r8
   424dc:	4a7fffcc 	andi	r9,r9,65535
   424e0:	4391883a 	add	r8,r8,r14
   424e4:	334d883a 	add	r6,r6,r13
   424e8:	3a4f883a 	add	r7,r7,r9
   424ec:	2089383a 	mul	r4,r4,r2
   424f0:	4140022e 	bgeu	r8,r5,424fc <__muldf3+0x3e8>
   424f4:	01400074 	movhi	r5,1
   424f8:	2149883a 	add	r4,r4,r5
   424fc:	9c53383a 	mul	r9,r19,r17
   42500:	1c63383a 	mul	r17,r3,r17
   42504:	98a7383a 	mul	r19,r19,r2
   42508:	481cd43a 	srli	r14,r9,16
   4250c:	401ad43a 	srli	r13,r8,16
   42510:	4010943a 	slli	r8,r8,16
   42514:	9c4b883a 	add	r5,r19,r17
   42518:	52bfffcc 	andi	r10,r10,65535
   4251c:	2b8b883a 	add	r5,r5,r14
   42520:	2349883a 	add	r4,r4,r13
   42524:	4291883a 	add	r8,r8,r10
   42528:	1887383a 	mul	r3,r3,r2
   4252c:	2cc0022e 	bgeu	r5,r19,42538 <__muldf3+0x424>
   42530:	00800074 	movhi	r2,1
   42534:	1887883a 	add	r3,r3,r2
   42538:	2814943a 	slli	r10,r5,16
   4253c:	3c21883a 	add	r16,r7,r16
   42540:	4a7fffcc 	andi	r9,r9,65535
   42544:	82e1883a 	add	r16,r16,r11
   42548:	5255883a 	add	r10,r10,r9
   4254c:	81cf803a 	cmpltu	r7,r16,r7
   42550:	5195883a 	add	r10,r10,r6
   42554:	8221883a 	add	r16,r16,r8
   42558:	51d7883a 	add	r11,r10,r7
   4255c:	8211803a 	cmpltu	r8,r16,r8
   42560:	2804d43a 	srli	r2,r5,16
   42564:	22d3883a 	add	r9,r4,r11
   42568:	4a0b883a 	add	r5,r9,r8
   4256c:	518d803a 	cmpltu	r6,r10,r6
   42570:	59e3803a 	cmpltu	r17,r11,r7
   42574:	89a2b03a 	or	r17,r17,r6
   42578:	2a11803a 	cmpltu	r8,r5,r8
   4257c:	4909803a 	cmpltu	r4,r9,r4
   42580:	88a3883a 	add	r17,r17,r2
   42584:	4108b03a 	or	r4,r8,r4
   42588:	8923883a 	add	r17,r17,r4
   4258c:	800c927a 	slli	r6,r16,9
   42590:	88c7883a 	add	r3,r17,r3
   42594:	2808d5fa 	srli	r4,r5,23
   42598:	1822927a 	slli	r17,r3,9
   4259c:	8020d5fa 	srli	r16,r16,23
   425a0:	3318b03a 	or	r12,r6,r12
   425a4:	280a927a 	slli	r5,r5,9
   425a8:	8922b03a 	or	r17,r17,r4
   425ac:	6018c03a 	cmpne	r12,r12,zero
   425b0:	6420b03a 	or	r16,r12,r16
   425b4:	8880402c 	andhi	r2,r17,256
   425b8:	8160b03a 	or	r16,r16,r5
   425bc:	10000926 	beq	r2,zero,425e4 <__muldf3+0x4d0>
   425c0:	8006d07a 	srli	r3,r16,1
   425c4:	8400004c 	andi	r16,r16,1
   425c8:	880497fa 	slli	r2,r17,31
   425cc:	80e0b03a 	or	r16,r16,r3
   425d0:	d8c00017 	ldw	r3,0(sp)
   425d4:	8822d07a 	srli	r17,r17,1
   425d8:	80a0b03a 	or	r16,r16,r2
   425dc:	18c00044 	addi	r3,r3,1
   425e0:	d8c00015 	stw	r3,0(sp)
   425e4:	d8c00017 	ldw	r3,0(sp)
   425e8:	1880ffc4 	addi	r2,r3,1023
   425ec:	0080450e 	bge	zero,r2,42704 <__muldf3+0x5f0>
   425f0:	80c001cc 	andi	r3,r16,7
   425f4:	18000726 	beq	r3,zero,42614 <__muldf3+0x500>
   425f8:	810003cc 	andi	r4,r16,15
   425fc:	00c00104 	movi	r3,4
   42600:	20c00426 	beq	r4,r3,42614 <__muldf3+0x500>
   42604:	80c7883a 	add	r3,r16,r3
   42608:	1c21803a 	cmpltu	r16,r3,r16
   4260c:	8c23883a 	add	r17,r17,r16
   42610:	1821883a 	mov	r16,r3
   42614:	88c0402c 	andhi	r3,r17,256
   42618:	18000526 	beq	r3,zero,42630 <__muldf3+0x51c>
   4261c:	d8c00017 	ldw	r3,0(sp)
   42620:	00bfc034 	movhi	r2,65280
   42624:	10bfffc4 	addi	r2,r2,-1
   42628:	88a2703a 	and	r17,r17,r2
   4262c:	18810004 	addi	r2,r3,1024
   42630:	00c1ff84 	movi	r3,2046
   42634:	18bf5e16 	blt	r3,r2,423b0 <__muldf3+0x29c>
   42638:	8806977a 	slli	r3,r17,29
   4263c:	8020d0fa 	srli	r16,r16,3
   42640:	8822927a 	slli	r17,r17,9
   42644:	1081ffcc 	andi	r2,r2,2047
   42648:	1c20b03a 	or	r16,r3,r16
   4264c:	8822d33a 	srli	r17,r17,12
   42650:	902f883a 	mov	r23,r18
   42654:	003f0c06 	br	42288 <__muldf3+0x174>
   42658:	8880022c 	andhi	r2,r17,8
   4265c:	10000a26 	beq	r2,zero,42688 <__muldf3+0x574>
   42660:	9880022c 	andhi	r2,r19,8
   42664:	1000081e 	bne	r2,zero,42688 <__muldf3+0x574>
   42668:	00800434 	movhi	r2,16
   4266c:	10bfffc4 	addi	r2,r2,-1
   42670:	9c400234 	orhi	r17,r19,8
   42674:	88a2703a 	and	r17,r17,r2
   42678:	b02f883a 	mov	r23,r22
   4267c:	2821883a 	mov	r16,r5
   42680:	0081ffc4 	movi	r2,2047
   42684:	003f0006 	br	42288 <__muldf3+0x174>
   42688:	00800434 	movhi	r2,16
   4268c:	10bfffc4 	addi	r2,r2,-1
   42690:	8c400234 	orhi	r17,r17,8
   42694:	88a2703a 	and	r17,r17,r2
   42698:	0081ffc4 	movi	r2,2047
   4269c:	003efa06 	br	42288 <__muldf3+0x174>
   426a0:	147ff604 	addi	r17,r2,-40
   426a4:	9c62983a 	sll	r17,r19,r17
   426a8:	0021883a 	mov	r16,zero
   426ac:	003f1d06 	br	42324 <__muldf3+0x210>
   426b0:	d9800315 	stw	r6,12(sp)
   426b4:	d9c00115 	stw	r7,4(sp)
   426b8:	00430880 	call	43088 <__clzsi2>
   426bc:	10800804 	addi	r2,r2,32
   426c0:	d9c00117 	ldw	r7,4(sp)
   426c4:	d9800317 	ldw	r6,12(sp)
   426c8:	003f0d06 	br	42300 <__muldf3+0x1ec>
   426cc:	14fff604 	addi	r19,r2,-40
   426d0:	34e6983a 	sll	r19,r6,r19
   426d4:	000b883a 	mov	r5,zero
   426d8:	003f3106 	br	423a0 <__muldf3+0x28c>
   426dc:	3009883a 	mov	r4,r6
   426e0:	d9800315 	stw	r6,12(sp)
   426e4:	da400115 	stw	r9,4(sp)
   426e8:	da800215 	stw	r10,8(sp)
   426ec:	00430880 	call	43088 <__clzsi2>
   426f0:	10800804 	addi	r2,r2,32
   426f4:	da800217 	ldw	r10,8(sp)
   426f8:	da400117 	ldw	r9,4(sp)
   426fc:	d9800317 	ldw	r6,12(sp)
   42700:	003f1e06 	br	4237c <__muldf3+0x268>
   42704:	d8c00017 	ldw	r3,0(sp)
   42708:	00bf0084 	movi	r2,-1022
   4270c:	10c5c83a 	sub	r2,r2,r3
   42710:	00c00e04 	movi	r3,56
   42714:	18bed816 	blt	r3,r2,42278 <__muldf3+0x164>
   42718:	00c007c4 	movi	r3,31
   4271c:	18801916 	blt	r3,r2,42784 <__muldf3+0x670>
   42720:	d8c00017 	ldw	r3,0(sp)
   42724:	808ad83a 	srl	r5,r16,r2
   42728:	8884d83a 	srl	r2,r17,r2
   4272c:	1d410784 	addi	r21,r3,1054
   42730:	8d48983a 	sll	r4,r17,r21
   42734:	8546983a 	sll	r3,r16,r21
   42738:	2908b03a 	or	r4,r5,r4
   4273c:	1806c03a 	cmpne	r3,r3,zero
   42740:	20c6b03a 	or	r3,r4,r3
   42744:	190001cc 	andi	r4,r3,7
   42748:	20000726 	beq	r4,zero,42768 <__muldf3+0x654>
   4274c:	194003cc 	andi	r5,r3,15
   42750:	01000104 	movi	r4,4
   42754:	29000426 	beq	r5,r4,42768 <__muldf3+0x654>
   42758:	1909883a 	add	r4,r3,r4
   4275c:	20c7803a 	cmpltu	r3,r4,r3
   42760:	10c5883a 	add	r2,r2,r3
   42764:	2007883a 	mov	r3,r4
   42768:	1100202c 	andhi	r4,r2,128
   4276c:	20001326 	beq	r4,zero,427bc <__muldf3+0x6a8>
   42770:	902f883a 	mov	r23,r18
   42774:	00800044 	movi	r2,1
   42778:	0023883a 	mov	r17,zero
   4277c:	0021883a 	mov	r16,zero
   42780:	003ec106 	br	42288 <__muldf3+0x174>
   42784:	d9000017 	ldw	r4,0(sp)
   42788:	00fef884 	movi	r3,-1054
   4278c:	1907c83a 	sub	r3,r3,r4
   42790:	01000804 	movi	r4,32
   42794:	88c6d83a 	srl	r3,r17,r3
   42798:	11001026 	beq	r2,r4,427dc <__muldf3+0x6c8>
   4279c:	d9000017 	ldw	r4,0(sp)
   427a0:	20810f84 	addi	r2,r4,1086
   427a4:	8884983a 	sll	r2,r17,r2
   427a8:	1404b03a 	or	r2,r2,r16
   427ac:	1004c03a 	cmpne	r2,r2,zero
   427b0:	10c6b03a 	or	r3,r2,r3
   427b4:	0005883a 	mov	r2,zero
   427b8:	003fe206 	br	42744 <__muldf3+0x630>
   427bc:	1020977a 	slli	r16,r2,29
   427c0:	1806d0fa 	srli	r3,r3,3
   427c4:	1004927a 	slli	r2,r2,9
   427c8:	902f883a 	mov	r23,r18
   427cc:	80e0b03a 	or	r16,r16,r3
   427d0:	1022d33a 	srli	r17,r2,12
   427d4:	0005883a 	mov	r2,zero
   427d8:	003eab06 	br	42288 <__muldf3+0x174>
   427dc:	0005883a 	mov	r2,zero
   427e0:	003ff106 	br	427a8 <__muldf3+0x694>
   427e4:	00800434 	movhi	r2,16
   427e8:	10bfffc4 	addi	r2,r2,-1
   427ec:	8c400234 	orhi	r17,r17,8
   427f0:	88a2703a 	and	r17,r17,r2
   427f4:	902f883a 	mov	r23,r18
   427f8:	0081ffc4 	movi	r2,2047
   427fc:	003ea206 	br	42288 <__muldf3+0x174>

00042800 <__subdf3>:
   42800:	02000434 	movhi	r8,16
   42804:	423fffc4 	addi	r8,r8,-1
   42808:	defffb04 	addi	sp,sp,-20
   4280c:	2a06703a 	and	r3,r5,r8
   42810:	3a10703a 	and	r8,r7,r8
   42814:	3804d53a 	srli	r2,r7,20
   42818:	dc800215 	stw	r18,8(sp)
   4281c:	dc400115 	stw	r17,4(sp)
   42820:	2824d7fa 	srli	r18,r5,31
   42824:	2822d53a 	srli	r17,r5,20
   42828:	401090fa 	slli	r8,r8,3
   4282c:	180a90fa 	slli	r5,r3,3
   42830:	3006d77a 	srli	r3,r6,29
   42834:	2014d77a 	srli	r10,r4,29
   42838:	dc000015 	stw	r16,0(sp)
   4283c:	40d0b03a 	or	r8,r8,r3
   42840:	dfc00415 	stw	ra,16(sp)
   42844:	dcc00315 	stw	r19,12(sp)
   42848:	1081ffcc 	andi	r2,r2,2047
   4284c:	00c1ffc4 	movi	r3,2047
   42850:	9013883a 	mov	r9,r18
   42854:	8c41ffcc 	andi	r17,r17,2047
   42858:	94803fcc 	andi	r18,r18,255
   4285c:	2a8ab03a 	or	r5,r5,r10
   42860:	202090fa 	slli	r16,r4,3
   42864:	380ed7fa 	srli	r7,r7,31
   42868:	300c90fa 	slli	r6,r6,3
   4286c:	10c02e26 	beq	r2,r3,42928 <__subdf3+0x128>
   42870:	39c0005c 	xori	r7,r7,1
   42874:	8887c83a 	sub	r3,r17,r2
   42878:	91c03026 	beq	r18,r7,4293c <__subdf3+0x13c>
   4287c:	00c0a40e 	bge	zero,r3,42b10 <__subdf3+0x310>
   42880:	10004c1e 	bne	r2,zero,429b4 <__subdf3+0x1b4>
   42884:	4184b03a 	or	r2,r8,r6
   42888:	10008f1e 	bne	r2,zero,42ac8 <__subdf3+0x2c8>
   4288c:	808001cc 	andi	r2,r16,7
   42890:	10007d26 	beq	r2,zero,42a88 <__subdf3+0x288>
   42894:	80c003cc 	andi	r3,r16,15
   42898:	00800104 	movi	r2,4
   4289c:	18807a26 	beq	r3,r2,42a88 <__subdf3+0x288>
   428a0:	80c00104 	addi	r3,r16,4
   428a4:	1c21803a 	cmpltu	r16,r3,r16
   428a8:	2c0b883a 	add	r5,r5,r16
   428ac:	2880202c 	andhi	r2,r5,128
   428b0:	9240004c 	andi	r9,r18,1
   428b4:	1821883a 	mov	r16,r3
   428b8:	10007626 	beq	r2,zero,42a94 <__subdf3+0x294>
   428bc:	8c400044 	addi	r17,r17,1
   428c0:	0081ffc4 	movi	r2,2047
   428c4:	8880b226 	beq	r17,r2,42b90 <__subdf3+0x390>
   428c8:	00bfe034 	movhi	r2,65408
   428cc:	10bfffc4 	addi	r2,r2,-1
   428d0:	288a703a 	and	r5,r5,r2
   428d4:	2804977a 	slli	r2,r5,29
   428d8:	280a927a 	slli	r5,r5,9
   428dc:	8020d0fa 	srli	r16,r16,3
   428e0:	280ad33a 	srli	r5,r5,12
   428e4:	1404b03a 	or	r2,r2,r16
   428e8:	8c41ffcc 	andi	r17,r17,2047
   428ec:	8822953a 	slli	r17,r17,20
   428f0:	4a403fcc 	andi	r9,r9,255
   428f4:	481297fa 	slli	r9,r9,31
   428f8:	00c00434 	movhi	r3,16
   428fc:	18ffffc4 	addi	r3,r3,-1
   42900:	28c6703a 	and	r3,r5,r3
   42904:	1c46b03a 	or	r3,r3,r17
   42908:	1a46b03a 	or	r3,r3,r9
   4290c:	dfc00417 	ldw	ra,16(sp)
   42910:	dcc00317 	ldw	r19,12(sp)
   42914:	dc800217 	ldw	r18,8(sp)
   42918:	dc400117 	ldw	r17,4(sp)
   4291c:	dc000017 	ldw	r16,0(sp)
   42920:	dec00504 	addi	sp,sp,20
   42924:	f800283a 	ret
   42928:	4186b03a 	or	r3,r8,r6
   4292c:	183fd026 	beq	r3,zero,42870 <__subdf3+0x70>
   42930:	39c03fcc 	andi	r7,r7,255
   42934:	8887c83a 	sub	r3,r17,r2
   42938:	91ffd01e 	bne	r18,r7,4287c <__subdf3+0x7c>
   4293c:	00c09b0e 	bge	zero,r3,42bac <__subdf3+0x3ac>
   42940:	10006926 	beq	r2,zero,42ae8 <__subdf3+0x2e8>
   42944:	0081ffc4 	movi	r2,2047
   42948:	88bfd026 	beq	r17,r2,4288c <__subdf3+0x8c>
   4294c:	42002034 	orhi	r8,r8,128
   42950:	00800e04 	movi	r2,56
   42954:	10c0e20e 	bge	r2,r3,42ce0 <__subdf3+0x4e0>
   42958:	418cb03a 	or	r6,r8,r6
   4295c:	300cc03a 	cmpne	r6,r6,zero
   42960:	0007883a 	mov	r3,zero
   42964:	340d883a 	add	r6,r6,r16
   42968:	3421803a 	cmpltu	r16,r6,r16
   4296c:	194b883a 	add	r5,r3,r5
   42970:	2c0b883a 	add	r5,r5,r16
   42974:	3021883a 	mov	r16,r6
   42978:	2880202c 	andhi	r2,r5,128
   4297c:	103fc326 	beq	r2,zero,4288c <__subdf3+0x8c>
   42980:	8c400044 	addi	r17,r17,1
   42984:	0081ffc4 	movi	r2,2047
   42988:	88811026 	beq	r17,r2,42dcc <__subdf3+0x5cc>
   4298c:	00bfe034 	movhi	r2,65408
   42990:	10bfffc4 	addi	r2,r2,-1
   42994:	288a703a 	and	r5,r5,r2
   42998:	8006d07a 	srli	r3,r16,1
   4299c:	280497fa 	slli	r2,r5,31
   429a0:	8400004c 	andi	r16,r16,1
   429a4:	80e0b03a 	or	r16,r16,r3
   429a8:	80a0b03a 	or	r16,r16,r2
   429ac:	280ad07a 	srli	r5,r5,1
   429b0:	003fb606 	br	4288c <__subdf3+0x8c>
   429b4:	0081ffc4 	movi	r2,2047
   429b8:	88bfb426 	beq	r17,r2,4288c <__subdf3+0x8c>
   429bc:	42002034 	orhi	r8,r8,128
   429c0:	00800e04 	movi	r2,56
   429c4:	10c07516 	blt	r2,r3,42b9c <__subdf3+0x39c>
   429c8:	008007c4 	movi	r2,31
   429cc:	10c09816 	blt	r2,r3,42c30 <__subdf3+0x430>
   429d0:	00800804 	movi	r2,32
   429d4:	10c5c83a 	sub	r2,r2,r3
   429d8:	30c8d83a 	srl	r4,r6,r3
   429dc:	408e983a 	sll	r7,r8,r2
   429e0:	3084983a 	sll	r2,r6,r2
   429e4:	40c6d83a 	srl	r3,r8,r3
   429e8:	3908b03a 	or	r4,r7,r4
   429ec:	1004c03a 	cmpne	r2,r2,zero
   429f0:	208cb03a 	or	r6,r4,r2
   429f4:	818dc83a 	sub	r6,r16,r6
   429f8:	81a1803a 	cmpltu	r16,r16,r6
   429fc:	28cbc83a 	sub	r5,r5,r3
   42a00:	2c0bc83a 	sub	r5,r5,r16
   42a04:	3021883a 	mov	r16,r6
   42a08:	2880202c 	andhi	r2,r5,128
   42a0c:	103f9f26 	beq	r2,zero,4288c <__subdf3+0x8c>
   42a10:	04c02034 	movhi	r19,128
   42a14:	9cffffc4 	addi	r19,r19,-1
   42a18:	2ce6703a 	and	r19,r5,r19
   42a1c:	98004d26 	beq	r19,zero,42b54 <__subdf3+0x354>
   42a20:	9809883a 	mov	r4,r19
   42a24:	00430880 	call	43088 <__clzsi2>
   42a28:	10fffe04 	addi	r3,r2,-8
   42a2c:	010007c4 	movi	r4,31
   42a30:	20c04e16 	blt	r4,r3,42b6c <__subdf3+0x36c>
   42a34:	01000a04 	movi	r4,40
   42a38:	2085c83a 	sub	r2,r4,r2
   42a3c:	8084d83a 	srl	r2,r16,r2
   42a40:	98e6983a 	sll	r19,r19,r3
   42a44:	80e0983a 	sll	r16,r16,r3
   42a48:	14c4b03a 	or	r2,r2,r19
   42a4c:	1c404b16 	blt	r3,r17,42b7c <__subdf3+0x37c>
   42a50:	1c63c83a 	sub	r17,r3,r17
   42a54:	89400044 	addi	r5,r17,1
   42a58:	00c007c4 	movi	r3,31
   42a5c:	19406716 	blt	r3,r5,42bfc <__subdf3+0x3fc>
   42a60:	1c47c83a 	sub	r3,r3,r17
   42a64:	8148d83a 	srl	r4,r16,r5
   42a68:	80e0983a 	sll	r16,r16,r3
   42a6c:	10c6983a 	sll	r3,r2,r3
   42a70:	114ad83a 	srl	r5,r2,r5
   42a74:	8004c03a 	cmpne	r2,r16,zero
   42a78:	20e0b03a 	or	r16,r4,r3
   42a7c:	80a0b03a 	or	r16,r16,r2
   42a80:	0023883a 	mov	r17,zero
   42a84:	003f8106 	br	4288c <__subdf3+0x8c>
   42a88:	2880202c 	andhi	r2,r5,128
   42a8c:	9240004c 	andi	r9,r18,1
   42a90:	103f8a1e 	bne	r2,zero,428bc <__subdf3+0xbc>
   42a94:	2804977a 	slli	r2,r5,29
   42a98:	8020d0fa 	srli	r16,r16,3
   42a9c:	00c1ffc4 	movi	r3,2047
   42aa0:	280ad0fa 	srli	r5,r5,3
   42aa4:	1404b03a 	or	r2,r2,r16
   42aa8:	88c0031e 	bne	r17,r3,42ab8 <__subdf3+0x2b8>
   42aac:	1146b03a 	or	r3,r2,r5
   42ab0:	18003726 	beq	r3,zero,42b90 <__subdf3+0x390>
   42ab4:	29400234 	orhi	r5,r5,8
   42ab8:	00c00434 	movhi	r3,16
   42abc:	18ffffc4 	addi	r3,r3,-1
   42ac0:	28ca703a 	and	r5,r5,r3
   42ac4:	003f8806 	br	428e8 <__subdf3+0xe8>
   42ac8:	18ffffc4 	addi	r3,r3,-1
   42acc:	1800481e 	bne	r3,zero,42bf0 <__subdf3+0x3f0>
   42ad0:	818dc83a 	sub	r6,r16,r6
   42ad4:	81a1803a 	cmpltu	r16,r16,r6
   42ad8:	2a0bc83a 	sub	r5,r5,r8
   42adc:	2c0bc83a 	sub	r5,r5,r16
   42ae0:	3021883a 	mov	r16,r6
   42ae4:	003fc806 	br	42a08 <__subdf3+0x208>
   42ae8:	4184b03a 	or	r2,r8,r6
   42aec:	103f6726 	beq	r2,zero,4288c <__subdf3+0x8c>
   42af0:	18ffffc4 	addi	r3,r3,-1
   42af4:	1800931e 	bne	r3,zero,42d44 <__subdf3+0x544>
   42af8:	340d883a 	add	r6,r6,r16
   42afc:	3421803a 	cmpltu	r16,r6,r16
   42b00:	414b883a 	add	r5,r8,r5
   42b04:	2c0b883a 	add	r5,r5,r16
   42b08:	3021883a 	mov	r16,r6
   42b0c:	003f9a06 	br	42978 <__subdf3+0x178>
   42b10:	1800531e 	bne	r3,zero,42c60 <__subdf3+0x460>
   42b14:	88800044 	addi	r2,r17,1
   42b18:	1081ffcc 	andi	r2,r2,2047
   42b1c:	00c00044 	movi	r3,1
   42b20:	1880a00e 	bge	r3,r2,42da4 <__subdf3+0x5a4>
   42b24:	8185c83a 	sub	r2,r16,r6
   42b28:	8087803a 	cmpltu	r3,r16,r2
   42b2c:	2a27c83a 	sub	r19,r5,r8
   42b30:	98e7c83a 	sub	r19,r19,r3
   42b34:	98c0202c 	andhi	r3,r19,128
   42b38:	18006226 	beq	r3,zero,42cc4 <__subdf3+0x4c4>
   42b3c:	3421c83a 	sub	r16,r6,r16
   42b40:	414bc83a 	sub	r5,r8,r5
   42b44:	340d803a 	cmpltu	r6,r6,r16
   42b48:	29a7c83a 	sub	r19,r5,r6
   42b4c:	3825883a 	mov	r18,r7
   42b50:	983fb31e 	bne	r19,zero,42a20 <__subdf3+0x220>
   42b54:	8009883a 	mov	r4,r16
   42b58:	00430880 	call	43088 <__clzsi2>
   42b5c:	10800804 	addi	r2,r2,32
   42b60:	10fffe04 	addi	r3,r2,-8
   42b64:	010007c4 	movi	r4,31
   42b68:	20ffb20e 	bge	r4,r3,42a34 <__subdf3+0x234>
   42b6c:	10bff604 	addi	r2,r2,-40
   42b70:	8084983a 	sll	r2,r16,r2
   42b74:	0021883a 	mov	r16,zero
   42b78:	1c7fb50e 	bge	r3,r17,42a50 <__subdf3+0x250>
   42b7c:	017fe034 	movhi	r5,65408
   42b80:	297fffc4 	addi	r5,r5,-1
   42b84:	88e3c83a 	sub	r17,r17,r3
   42b88:	114a703a 	and	r5,r2,r5
   42b8c:	003f3f06 	br	4288c <__subdf3+0x8c>
   42b90:	000b883a 	mov	r5,zero
   42b94:	0005883a 	mov	r2,zero
   42b98:	003f5306 	br	428e8 <__subdf3+0xe8>
   42b9c:	418cb03a 	or	r6,r8,r6
   42ba0:	300cc03a 	cmpne	r6,r6,zero
   42ba4:	0007883a 	mov	r3,zero
   42ba8:	003f9206 	br	429f4 <__subdf3+0x1f4>
   42bac:	1800961e 	bne	r3,zero,42e08 <__subdf3+0x608>
   42bb0:	88800044 	addi	r2,r17,1
   42bb4:	1101ffcc 	andi	r4,r2,2047
   42bb8:	00c00044 	movi	r3,1
   42bbc:	1900680e 	bge	r3,r4,42d60 <__subdf3+0x560>
   42bc0:	00c1ffc4 	movi	r3,2047
   42bc4:	10c0b626 	beq	r2,r3,42ea0 <__subdf3+0x6a0>
   42bc8:	340d883a 	add	r6,r6,r16
   42bcc:	3421803a 	cmpltu	r16,r6,r16
   42bd0:	414b883a 	add	r5,r8,r5
   42bd4:	2c0b883a 	add	r5,r5,r16
   42bd8:	282097fa 	slli	r16,r5,31
   42bdc:	300cd07a 	srli	r6,r6,1
   42be0:	280ad07a 	srli	r5,r5,1
   42be4:	1023883a 	mov	r17,r2
   42be8:	81a0b03a 	or	r16,r16,r6
   42bec:	003f2706 	br	4288c <__subdf3+0x8c>
   42bf0:	0081ffc4 	movi	r2,2047
   42bf4:	88bf721e 	bne	r17,r2,429c0 <__subdf3+0x1c0>
   42bf8:	003f2406 	br	4288c <__subdf3+0x8c>
   42bfc:	893ff844 	addi	r4,r17,-31
   42c00:	00c00804 	movi	r3,32
   42c04:	1108d83a 	srl	r4,r2,r4
   42c08:	28c05126 	beq	r5,r3,42d50 <__subdf3+0x550>
   42c0c:	00c00fc4 	movi	r3,63
   42c10:	1c63c83a 	sub	r17,r3,r17
   42c14:	1444983a 	sll	r2,r2,r17
   42c18:	1420b03a 	or	r16,r2,r16
   42c1c:	8020c03a 	cmpne	r16,r16,zero
   42c20:	8120b03a 	or	r16,r16,r4
   42c24:	000b883a 	mov	r5,zero
   42c28:	0023883a 	mov	r17,zero
   42c2c:	003f1706 	br	4288c <__subdf3+0x8c>
   42c30:	18bff804 	addi	r2,r3,-32
   42c34:	01000804 	movi	r4,32
   42c38:	4084d83a 	srl	r2,r8,r2
   42c3c:	19004626 	beq	r3,r4,42d58 <__subdf3+0x558>
   42c40:	01001004 	movi	r4,64
   42c44:	20c7c83a 	sub	r3,r4,r3
   42c48:	40d0983a 	sll	r8,r8,r3
   42c4c:	418cb03a 	or	r6,r8,r6
   42c50:	300cc03a 	cmpne	r6,r6,zero
   42c54:	308cb03a 	or	r6,r6,r2
   42c58:	0007883a 	mov	r3,zero
   42c5c:	003f6506 	br	429f4 <__subdf3+0x1f4>
   42c60:	88002b26 	beq	r17,zero,42d10 <__subdf3+0x510>
   42c64:	0101ffc4 	movi	r4,2047
   42c68:	11002f26 	beq	r2,r4,42d28 <__subdf3+0x528>
   42c6c:	00c7c83a 	sub	r3,zero,r3
   42c70:	29402034 	orhi	r5,r5,128
   42c74:	01000e04 	movi	r4,56
   42c78:	20c08516 	blt	r4,r3,42e90 <__subdf3+0x690>
   42c7c:	010007c4 	movi	r4,31
   42c80:	20c0cd16 	blt	r4,r3,42fb8 <__subdf3+0x7b8>
   42c84:	01000804 	movi	r4,32
   42c88:	20c9c83a 	sub	r4,r4,r3
   42c8c:	2914983a 	sll	r10,r5,r4
   42c90:	80d2d83a 	srl	r9,r16,r3
   42c94:	8108983a 	sll	r4,r16,r4
   42c98:	28cad83a 	srl	r5,r5,r3
   42c9c:	5252b03a 	or	r9,r10,r9
   42ca0:	2006c03a 	cmpne	r3,r4,zero
   42ca4:	48e0b03a 	or	r16,r9,r3
   42ca8:	3421c83a 	sub	r16,r6,r16
   42cac:	414bc83a 	sub	r5,r8,r5
   42cb0:	340d803a 	cmpltu	r6,r6,r16
   42cb4:	298bc83a 	sub	r5,r5,r6
   42cb8:	1023883a 	mov	r17,r2
   42cbc:	3825883a 	mov	r18,r7
   42cc0:	003f5106 	br	42a08 <__subdf3+0x208>
   42cc4:	9886b03a 	or	r3,r19,r2
   42cc8:	18001c1e 	bne	r3,zero,42d3c <__subdf3+0x53c>
   42ccc:	0013883a 	mov	r9,zero
   42cd0:	000b883a 	mov	r5,zero
   42cd4:	0021883a 	mov	r16,zero
   42cd8:	0023883a 	mov	r17,zero
   42cdc:	003f6d06 	br	42a94 <__subdf3+0x294>
   42ce0:	008007c4 	movi	r2,31
   42ce4:	10c03c16 	blt	r2,r3,42dd8 <__subdf3+0x5d8>
   42ce8:	00800804 	movi	r2,32
   42cec:	10c5c83a 	sub	r2,r2,r3
   42cf0:	30c8d83a 	srl	r4,r6,r3
   42cf4:	408e983a 	sll	r7,r8,r2
   42cf8:	3084983a 	sll	r2,r6,r2
   42cfc:	40c6d83a 	srl	r3,r8,r3
   42d00:	3908b03a 	or	r4,r7,r4
   42d04:	1004c03a 	cmpne	r2,r2,zero
   42d08:	208cb03a 	or	r6,r4,r2
   42d0c:	003f1506 	br	42964 <__subdf3+0x164>
   42d10:	2c08b03a 	or	r4,r5,r16
   42d14:	20000426 	beq	r4,zero,42d28 <__subdf3+0x528>
   42d18:	00c6303a 	nor	r3,zero,r3
   42d1c:	183fe226 	beq	r3,zero,42ca8 <__subdf3+0x4a8>
   42d20:	0101ffc4 	movi	r4,2047
   42d24:	113fd31e 	bne	r2,r4,42c74 <__subdf3+0x474>
   42d28:	400b883a 	mov	r5,r8
   42d2c:	3021883a 	mov	r16,r6
   42d30:	1023883a 	mov	r17,r2
   42d34:	3825883a 	mov	r18,r7
   42d38:	003ed406 	br	4288c <__subdf3+0x8c>
   42d3c:	1021883a 	mov	r16,r2
   42d40:	003f3606 	br	42a1c <__subdf3+0x21c>
   42d44:	0081ffc4 	movi	r2,2047
   42d48:	88bf011e 	bne	r17,r2,42950 <__subdf3+0x150>
   42d4c:	003ecf06 	br	4288c <__subdf3+0x8c>
   42d50:	0005883a 	mov	r2,zero
   42d54:	003fb006 	br	42c18 <__subdf3+0x418>
   42d58:	0011883a 	mov	r8,zero
   42d5c:	003fbb06 	br	42c4c <__subdf3+0x44c>
   42d60:	2c04b03a 	or	r2,r5,r16
   42d64:	88007f1e 	bne	r17,zero,42f64 <__subdf3+0x764>
   42d68:	1000a926 	beq	r2,zero,43010 <__subdf3+0x810>
   42d6c:	4184b03a 	or	r2,r8,r6
   42d70:	103ec626 	beq	r2,zero,4288c <__subdf3+0x8c>
   42d74:	340d883a 	add	r6,r6,r16
   42d78:	414b883a 	add	r5,r8,r5
   42d7c:	3421803a 	cmpltu	r16,r6,r16
   42d80:	2c0b883a 	add	r5,r5,r16
   42d84:	2880202c 	andhi	r2,r5,128
   42d88:	1000bb26 	beq	r2,zero,43078 <__subdf3+0x878>
   42d8c:	00bfe034 	movhi	r2,65408
   42d90:	10bfffc4 	addi	r2,r2,-1
   42d94:	288a703a 	and	r5,r5,r2
   42d98:	3021883a 	mov	r16,r6
   42d9c:	1823883a 	mov	r17,r3
   42da0:	003eba06 	br	4288c <__subdf3+0x8c>
   42da4:	2c04b03a 	or	r2,r5,r16
   42da8:	8800311e 	bne	r17,zero,42e70 <__subdf3+0x670>
   42dac:	1000451e 	bne	r2,zero,42ec4 <__subdf3+0x6c4>
   42db0:	4184b03a 	or	r2,r8,r6
   42db4:	10000426 	beq	r2,zero,42dc8 <__subdf3+0x5c8>
   42db8:	400b883a 	mov	r5,r8
   42dbc:	3021883a 	mov	r16,r6
   42dc0:	3825883a 	mov	r18,r7
   42dc4:	003eb106 	br	4288c <__subdf3+0x8c>
   42dc8:	0013883a 	mov	r9,zero
   42dcc:	000b883a 	mov	r5,zero
   42dd0:	0021883a 	mov	r16,zero
   42dd4:	003f2f06 	br	42a94 <__subdf3+0x294>
   42dd8:	18bff804 	addi	r2,r3,-32
   42ddc:	01000804 	movi	r4,32
   42de0:	4084d83a 	srl	r2,r8,r2
   42de4:	19007226 	beq	r3,r4,42fb0 <__subdf3+0x7b0>
   42de8:	01001004 	movi	r4,64
   42dec:	20c7c83a 	sub	r3,r4,r3
   42df0:	40d0983a 	sll	r8,r8,r3
   42df4:	418cb03a 	or	r6,r8,r6
   42df8:	300cc03a 	cmpne	r6,r6,zero
   42dfc:	308cb03a 	or	r6,r6,r2
   42e00:	0007883a 	mov	r3,zero
   42e04:	003ed706 	br	42964 <__subdf3+0x164>
   42e08:	8800291e 	bne	r17,zero,42eb0 <__subdf3+0x6b0>
   42e0c:	2c08b03a 	or	r4,r5,r16
   42e10:	20005026 	beq	r4,zero,42f54 <__subdf3+0x754>
   42e14:	00c6303a 	nor	r3,zero,r3
   42e18:	18000f26 	beq	r3,zero,42e58 <__subdf3+0x658>
   42e1c:	0101ffc4 	movi	r4,2047
   42e20:	11004c26 	beq	r2,r4,42f54 <__subdf3+0x754>
   42e24:	01000e04 	movi	r4,56
   42e28:	20c07516 	blt	r4,r3,43000 <__subdf3+0x800>
   42e2c:	010007c4 	movi	r4,31
   42e30:	20c08316 	blt	r4,r3,43040 <__subdf3+0x840>
   42e34:	01000804 	movi	r4,32
   42e38:	20c9c83a 	sub	r4,r4,r3
   42e3c:	2914983a 	sll	r10,r5,r4
   42e40:	80ced83a 	srl	r7,r16,r3
   42e44:	8108983a 	sll	r4,r16,r4
   42e48:	28cad83a 	srl	r5,r5,r3
   42e4c:	51ceb03a 	or	r7,r10,r7
   42e50:	2006c03a 	cmpne	r3,r4,zero
   42e54:	38e0b03a 	or	r16,r7,r3
   42e58:	81a1883a 	add	r16,r16,r6
   42e5c:	2a0b883a 	add	r5,r5,r8
   42e60:	818d803a 	cmpltu	r6,r16,r6
   42e64:	298b883a 	add	r5,r5,r6
   42e68:	1023883a 	mov	r17,r2
   42e6c:	003ec206 	br	42978 <__subdf3+0x178>
   42e70:	1000221e 	bne	r2,zero,42efc <__subdf3+0x6fc>
   42e74:	4184b03a 	or	r2,r8,r6
   42e78:	10005b26 	beq	r2,zero,42fe8 <__subdf3+0x7e8>
   42e7c:	400b883a 	mov	r5,r8
   42e80:	3021883a 	mov	r16,r6
   42e84:	3825883a 	mov	r18,r7
   42e88:	0441ffc4 	movi	r17,2047
   42e8c:	003e7f06 	br	4288c <__subdf3+0x8c>
   42e90:	2c20b03a 	or	r16,r5,r16
   42e94:	8020c03a 	cmpne	r16,r16,zero
   42e98:	000b883a 	mov	r5,zero
   42e9c:	003f8206 	br	42ca8 <__subdf3+0x4a8>
   42ea0:	1023883a 	mov	r17,r2
   42ea4:	000b883a 	mov	r5,zero
   42ea8:	0021883a 	mov	r16,zero
   42eac:	003ef906 	br	42a94 <__subdf3+0x294>
   42eb0:	0101ffc4 	movi	r4,2047
   42eb4:	11002726 	beq	r2,r4,42f54 <__subdf3+0x754>
   42eb8:	00c7c83a 	sub	r3,zero,r3
   42ebc:	29402034 	orhi	r5,r5,128
   42ec0:	003fd806 	br	42e24 <__subdf3+0x624>
   42ec4:	4184b03a 	or	r2,r8,r6
   42ec8:	103e7026 	beq	r2,zero,4288c <__subdf3+0x8c>
   42ecc:	8185c83a 	sub	r2,r16,r6
   42ed0:	8089803a 	cmpltu	r4,r16,r2
   42ed4:	2a07c83a 	sub	r3,r5,r8
   42ed8:	1907c83a 	sub	r3,r3,r4
   42edc:	1900202c 	andhi	r4,r3,128
   42ee0:	20005226 	beq	r4,zero,4302c <__subdf3+0x82c>
   42ee4:	3421c83a 	sub	r16,r6,r16
   42ee8:	414bc83a 	sub	r5,r8,r5
   42eec:	340d803a 	cmpltu	r6,r6,r16
   42ef0:	298bc83a 	sub	r5,r5,r6
   42ef4:	3825883a 	mov	r18,r7
   42ef8:	003e6406 	br	4288c <__subdf3+0x8c>
   42efc:	4184b03a 	or	r2,r8,r6
   42f00:	10002926 	beq	r2,zero,42fa8 <__subdf3+0x7a8>
   42f04:	2804d0fa 	srli	r2,r5,3
   42f08:	8020d0fa 	srli	r16,r16,3
   42f0c:	280a977a 	slli	r5,r5,29
   42f10:	10c0022c 	andhi	r3,r2,8
   42f14:	2c20b03a 	or	r16,r5,r16
   42f18:	18000826 	beq	r3,zero,42f3c <__subdf3+0x73c>
   42f1c:	4006d0fa 	srli	r3,r8,3
   42f20:	1900022c 	andhi	r4,r3,8
   42f24:	2000051e 	bne	r4,zero,42f3c <__subdf3+0x73c>
   42f28:	300cd0fa 	srli	r6,r6,3
   42f2c:	4010977a 	slli	r8,r8,29
   42f30:	1805883a 	mov	r2,r3
   42f34:	3825883a 	mov	r18,r7
   42f38:	41a0b03a 	or	r16,r8,r6
   42f3c:	800ad77a 	srli	r5,r16,29
   42f40:	100490fa 	slli	r2,r2,3
   42f44:	802090fa 	slli	r16,r16,3
   42f48:	0441ffc4 	movi	r17,2047
   42f4c:	288ab03a 	or	r5,r5,r2
   42f50:	003e4e06 	br	4288c <__subdf3+0x8c>
   42f54:	400b883a 	mov	r5,r8
   42f58:	3021883a 	mov	r16,r6
   42f5c:	1023883a 	mov	r17,r2
   42f60:	003e4a06 	br	4288c <__subdf3+0x8c>
   42f64:	10002d26 	beq	r2,zero,4301c <__subdf3+0x81c>
   42f68:	4184b03a 	or	r2,r8,r6
   42f6c:	10000e26 	beq	r2,zero,42fa8 <__subdf3+0x7a8>
   42f70:	2804d0fa 	srli	r2,r5,3
   42f74:	8020d0fa 	srli	r16,r16,3
   42f78:	280a977a 	slli	r5,r5,29
   42f7c:	10c0022c 	andhi	r3,r2,8
   42f80:	2c20b03a 	or	r16,r5,r16
   42f84:	183fed26 	beq	r3,zero,42f3c <__subdf3+0x73c>
   42f88:	4006d0fa 	srli	r3,r8,3
   42f8c:	1900022c 	andhi	r4,r3,8
   42f90:	203fea1e 	bne	r4,zero,42f3c <__subdf3+0x73c>
   42f94:	300cd0fa 	srli	r6,r6,3
   42f98:	4010977a 	slli	r8,r8,29
   42f9c:	1805883a 	mov	r2,r3
   42fa0:	41a0b03a 	or	r16,r8,r6
   42fa4:	003fe506 	br	42f3c <__subdf3+0x73c>
   42fa8:	0441ffc4 	movi	r17,2047
   42fac:	003e3706 	br	4288c <__subdf3+0x8c>
   42fb0:	0011883a 	mov	r8,zero
   42fb4:	003f8f06 	br	42df4 <__subdf3+0x5f4>
   42fb8:	193ff804 	addi	r4,r3,-32
   42fbc:	02400804 	movi	r9,32
   42fc0:	2908d83a 	srl	r4,r5,r4
   42fc4:	1a402a26 	beq	r3,r9,43070 <__subdf3+0x870>
   42fc8:	02401004 	movi	r9,64
   42fcc:	48c7c83a 	sub	r3,r9,r3
   42fd0:	28ca983a 	sll	r5,r5,r3
   42fd4:	2c20b03a 	or	r16,r5,r16
   42fd8:	8020c03a 	cmpne	r16,r16,zero
   42fdc:	8120b03a 	or	r16,r16,r4
   42fe0:	000b883a 	mov	r5,zero
   42fe4:	003f3006 	br	42ca8 <__subdf3+0x4a8>
   42fe8:	0013883a 	mov	r9,zero
   42fec:	01402034 	movhi	r5,128
   42ff0:	297fffc4 	addi	r5,r5,-1
   42ff4:	043ffe04 	movi	r16,-8
   42ff8:	0441ffc4 	movi	r17,2047
   42ffc:	003ea506 	br	42a94 <__subdf3+0x294>
   43000:	2c20b03a 	or	r16,r5,r16
   43004:	8020c03a 	cmpne	r16,r16,zero
   43008:	000b883a 	mov	r5,zero
   4300c:	003f9206 	br	42e58 <__subdf3+0x658>
   43010:	400b883a 	mov	r5,r8
   43014:	3021883a 	mov	r16,r6
   43018:	003e1c06 	br	4288c <__subdf3+0x8c>
   4301c:	400b883a 	mov	r5,r8
   43020:	3021883a 	mov	r16,r6
   43024:	0441ffc4 	movi	r17,2047
   43028:	003e1806 	br	4288c <__subdf3+0x8c>
   4302c:	1888b03a 	or	r4,r3,r2
   43030:	203f6526 	beq	r4,zero,42dc8 <__subdf3+0x5c8>
   43034:	180b883a 	mov	r5,r3
   43038:	1021883a 	mov	r16,r2
   4303c:	003e1306 	br	4288c <__subdf3+0x8c>
   43040:	193ff804 	addi	r4,r3,-32
   43044:	01c00804 	movi	r7,32
   43048:	2908d83a 	srl	r4,r5,r4
   4304c:	19c00c26 	beq	r3,r7,43080 <__subdf3+0x880>
   43050:	01c01004 	movi	r7,64
   43054:	38c7c83a 	sub	r3,r7,r3
   43058:	28ca983a 	sll	r5,r5,r3
   4305c:	2c20b03a 	or	r16,r5,r16
   43060:	8020c03a 	cmpne	r16,r16,zero
   43064:	8120b03a 	or	r16,r16,r4
   43068:	000b883a 	mov	r5,zero
   4306c:	003f7a06 	br	42e58 <__subdf3+0x658>
   43070:	000b883a 	mov	r5,zero
   43074:	003fd706 	br	42fd4 <__subdf3+0x7d4>
   43078:	3021883a 	mov	r16,r6
   4307c:	003e0306 	br	4288c <__subdf3+0x8c>
   43080:	000b883a 	mov	r5,zero
   43084:	003ff506 	br	4305c <__subdf3+0x85c>

00043088 <__clzsi2>:
   43088:	00bfffd4 	movui	r2,65535
   4308c:	11000b36 	bltu	r2,r4,430bc <__clzsi2+0x34>
   43090:	00803fc4 	movi	r2,255
   43094:	11001e2e 	bgeu	r2,r4,43110 <__clzsi2+0x88>
   43098:	00c00204 	movi	r3,8
   4309c:	20c8d83a 	srl	r4,r4,r3
   430a0:	00c00174 	movhi	r3,5
   430a4:	18ff5604 	addi	r3,r3,-680
   430a8:	00800604 	movi	r2,24
   430ac:	1909883a 	add	r4,r3,r4
   430b0:	20c00003 	ldbu	r3,0(r4)
   430b4:	10c5c83a 	sub	r2,r2,r3
   430b8:	f800283a 	ret
   430bc:	00804034 	movhi	r2,256
   430c0:	10bfffc4 	addi	r2,r2,-1
   430c4:	11000936 	bltu	r2,r4,430ec <__clzsi2+0x64>
   430c8:	00800404 	movi	r2,16
   430cc:	1007883a 	mov	r3,r2
   430d0:	20c8d83a 	srl	r4,r4,r3
   430d4:	00c00174 	movhi	r3,5
   430d8:	18ff5604 	addi	r3,r3,-680
   430dc:	1909883a 	add	r4,r3,r4
   430e0:	20c00003 	ldbu	r3,0(r4)
   430e4:	10c5c83a 	sub	r2,r2,r3
   430e8:	f800283a 	ret
   430ec:	00c00604 	movi	r3,24
   430f0:	20c8d83a 	srl	r4,r4,r3
   430f4:	00c00174 	movhi	r3,5
   430f8:	18ff5604 	addi	r3,r3,-680
   430fc:	00800204 	movi	r2,8
   43100:	1909883a 	add	r4,r3,r4
   43104:	20c00003 	ldbu	r3,0(r4)
   43108:	10c5c83a 	sub	r2,r2,r3
   4310c:	f800283a 	ret
   43110:	0007883a 	mov	r3,zero
   43114:	20c8d83a 	srl	r4,r4,r3
   43118:	00c00174 	movhi	r3,5
   4311c:	18ff5604 	addi	r3,r3,-680
   43120:	00800804 	movi	r2,32
   43124:	1909883a 	add	r4,r3,r4
   43128:	20c00003 	ldbu	r3,0(r4)
   4312c:	10c5c83a 	sub	r2,r2,r3
   43130:	f800283a 	ret

00043134 <memcpy>:
   43134:	00c003c4 	movi	r3,15
   43138:	2005883a 	mov	r2,r4
   4313c:	1980372e 	bgeu	r3,r6,4321c <memcpy+0xe8>
   43140:	2146b03a 	or	r3,r4,r5
   43144:	18c000cc 	andi	r3,r3,3
   43148:	1800371e 	bne	r3,zero,43228 <memcpy+0xf4>
   4314c:	327ffc04 	addi	r9,r6,-16
   43150:	4812d13a 	srli	r9,r9,4
   43154:	2007883a 	mov	r3,r4
   43158:	280f883a 	mov	r7,r5
   4315c:	4808913a 	slli	r4,r9,4
   43160:	1109883a 	add	r4,r2,r4
   43164:	21000404 	addi	r4,r4,16
   43168:	3a000017 	ldw	r8,0(r7)
   4316c:	18c00404 	addi	r3,r3,16
   43170:	39c00404 	addi	r7,r7,16
   43174:	1a3ffc15 	stw	r8,-16(r3)
   43178:	3a3ffd17 	ldw	r8,-12(r7)
   4317c:	1a3ffd15 	stw	r8,-12(r3)
   43180:	3a3ffe17 	ldw	r8,-8(r7)
   43184:	1a3ffe15 	stw	r8,-8(r3)
   43188:	3a3fff17 	ldw	r8,-4(r7)
   4318c:	1a3fff15 	stw	r8,-4(r3)
   43190:	193ff51e 	bne	r3,r4,43168 <memcpy+0x34>
   43194:	49000044 	addi	r4,r9,1
   43198:	2008913a 	slli	r4,r4,4
   4319c:	328003cc 	andi	r10,r6,15
   431a0:	1107883a 	add	r3,r2,r4
   431a4:	290b883a 	add	r5,r5,r4
   431a8:	010000c4 	movi	r4,3
   431ac:	2280212e 	bgeu	r4,r10,43234 <memcpy+0x100>
   431b0:	52bfff04 	addi	r10,r10,-4
   431b4:	5014d0ba 	srli	r10,r10,2
   431b8:	180f883a 	mov	r7,r3
   431bc:	2811883a 	mov	r8,r5
   431c0:	5289883a 	add	r4,r10,r10
   431c4:	2109883a 	add	r4,r4,r4
   431c8:	21000104 	addi	r4,r4,4
   431cc:	1909883a 	add	r4,r3,r4
   431d0:	42400017 	ldw	r9,0(r8)
   431d4:	39c00104 	addi	r7,r7,4
   431d8:	42000104 	addi	r8,r8,4
   431dc:	3a7fff15 	stw	r9,-4(r7)
   431e0:	393ffb1e 	bne	r7,r4,431d0 <memcpy+0x9c>
   431e4:	51000044 	addi	r4,r10,1
   431e8:	2109883a 	add	r4,r4,r4
   431ec:	2109883a 	add	r4,r4,r4
   431f0:	318000cc 	andi	r6,r6,3
   431f4:	1907883a 	add	r3,r3,r4
   431f8:	290b883a 	add	r5,r5,r4
   431fc:	30000c26 	beq	r6,zero,43230 <memcpy+0xfc>
   43200:	298d883a 	add	r6,r5,r6
   43204:	29c00003 	ldbu	r7,0(r5)
   43208:	18c00044 	addi	r3,r3,1
   4320c:	29400044 	addi	r5,r5,1
   43210:	19ffffc5 	stb	r7,-1(r3)
   43214:	29bffb1e 	bne	r5,r6,43204 <memcpy+0xd0>
   43218:	f800283a 	ret
   4321c:	2007883a 	mov	r3,r4
   43220:	303ff71e 	bne	r6,zero,43200 <memcpy+0xcc>
   43224:	00000206 	br	43230 <memcpy+0xfc>
   43228:	2007883a 	mov	r3,r4
   4322c:	003ff406 	br	43200 <memcpy+0xcc>
   43230:	f800283a 	ret
   43234:	500d883a 	mov	r6,r10
   43238:	303ff11e 	bne	r6,zero,43200 <memcpy+0xcc>
   4323c:	003ffc06 	br	43230 <memcpy+0xfc>

00043240 <_printf_r>:
   43240:	defffd04 	addi	sp,sp,-12
   43244:	dfc00015 	stw	ra,0(sp)
   43248:	d9800115 	stw	r6,4(sp)
   4324c:	d9c00215 	stw	r7,8(sp)
   43250:	280d883a 	mov	r6,r5
   43254:	21400217 	ldw	r5,8(r4)
   43258:	d9c00104 	addi	r7,sp,4
   4325c:	00434240 	call	43424 <___vfprintf_internal_r>
   43260:	dfc00017 	ldw	ra,0(sp)
   43264:	dec00304 	addi	sp,sp,12
   43268:	f800283a 	ret

0004326c <printf>:
   4326c:	defffc04 	addi	sp,sp,-16
   43270:	dfc00015 	stw	ra,0(sp)
   43274:	d9400115 	stw	r5,4(sp)
   43278:	d9800215 	stw	r6,8(sp)
   4327c:	d9c00315 	stw	r7,12(sp)
   43280:	00800174 	movhi	r2,5
   43284:	10870004 	addi	r2,r2,7168
   43288:	10800017 	ldw	r2,0(r2)
   4328c:	200b883a 	mov	r5,r4
   43290:	d9800104 	addi	r6,sp,4
   43294:	11000217 	ldw	r4,8(r2)
   43298:	00454000 	call	45400 <__vfprintf_internal>
   4329c:	dfc00017 	ldw	ra,0(sp)
   432a0:	dec00404 	addi	sp,sp,16
   432a4:	f800283a 	ret

000432a8 <_putchar_r>:
   432a8:	21800217 	ldw	r6,8(r4)
   432ac:	0049ab41 	jmpi	49ab4 <_putc_r>

000432b0 <putchar>:
   432b0:	00800174 	movhi	r2,5
   432b4:	10870004 	addi	r2,r2,7168
   432b8:	10800017 	ldw	r2,0(r2)
   432bc:	200b883a 	mov	r5,r4
   432c0:	11800217 	ldw	r6,8(r2)
   432c4:	1009883a 	mov	r4,r2
   432c8:	0049ab41 	jmpi	49ab4 <_putc_r>

000432cc <_puts_r>:
   432cc:	defff604 	addi	sp,sp,-40
   432d0:	dc400815 	stw	r17,32(sp)
   432d4:	2023883a 	mov	r17,r4
   432d8:	2809883a 	mov	r4,r5
   432dc:	dc000715 	stw	r16,28(sp)
   432e0:	dfc00915 	stw	ra,36(sp)
   432e4:	2821883a 	mov	r16,r5
   432e8:	00433980 	call	43398 <strlen>
   432ec:	00c00174 	movhi	r3,5
   432f0:	18c70004 	addi	r3,r3,7168
   432f4:	18c00017 	ldw	r3,0(r3)
   432f8:	11000044 	addi	r4,r2,1
   432fc:	d8800115 	stw	r2,4(sp)
   43300:	18c00217 	ldw	r3,8(r3)
   43304:	00800174 	movhi	r2,5
   43308:	10bf9604 	addi	r2,r2,-424
   4330c:	d8800215 	stw	r2,8(sp)
   43310:	1940030b 	ldhu	r5,12(r3)
   43314:	00800044 	movi	r2,1
   43318:	d8800315 	stw	r2,12(sp)
   4331c:	00800084 	movi	r2,2
   43320:	d8800515 	stw	r2,20(sp)
   43324:	dc000015 	stw	r16,0(sp)
   43328:	d9000615 	stw	r4,24(sp)
   4332c:	dec00415 	stw	sp,16(sp)
   43330:	2888000c 	andi	r2,r5,8192
   43334:	1000061e 	bne	r2,zero,43350 <_puts_r+0x84>
   43338:	19001917 	ldw	r4,100(r3)
   4333c:	00b7ffc4 	movi	r2,-8193
   43340:	29480014 	ori	r5,r5,8192
   43344:	2084703a 	and	r2,r4,r2
   43348:	1940030d 	sth	r5,12(r3)
   4334c:	18801915 	stw	r2,100(r3)
   43350:	89400217 	ldw	r5,8(r17)
   43354:	8809883a 	mov	r4,r17
   43358:	d9800404 	addi	r6,sp,16
   4335c:	00477ac0 	call	477ac <__sfvwrite_r>
   43360:	1000061e 	bne	r2,zero,4337c <_puts_r+0xb0>
   43364:	00800284 	movi	r2,10
   43368:	dfc00917 	ldw	ra,36(sp)
   4336c:	dc400817 	ldw	r17,32(sp)
   43370:	dc000717 	ldw	r16,28(sp)
   43374:	dec00a04 	addi	sp,sp,40
   43378:	f800283a 	ret
   4337c:	00bfffc4 	movi	r2,-1
   43380:	003ff906 	br	43368 <_puts_r+0x9c>

00043384 <puts>:
   43384:	00800174 	movhi	r2,5
   43388:	10870004 	addi	r2,r2,7168
   4338c:	200b883a 	mov	r5,r4
   43390:	11000017 	ldw	r4,0(r2)
   43394:	00432cc1 	jmpi	432cc <_puts_r>

00043398 <strlen>:
   43398:	208000cc 	andi	r2,r4,3
   4339c:	10001d26 	beq	r2,zero,43414 <strlen+0x7c>
   433a0:	20800007 	ldb	r2,0(r4)
   433a4:	10001d26 	beq	r2,zero,4341c <strlen+0x84>
   433a8:	2005883a 	mov	r2,r4
   433ac:	00000206 	br	433b8 <strlen+0x20>
   433b0:	10c00007 	ldb	r3,0(r2)
   433b4:	18001526 	beq	r3,zero,4340c <strlen+0x74>
   433b8:	10800044 	addi	r2,r2,1
   433bc:	10c000cc 	andi	r3,r2,3
   433c0:	183ffb1e 	bne	r3,zero,433b0 <strlen+0x18>
   433c4:	10c00017 	ldw	r3,0(r2)
   433c8:	01ffbff4 	movhi	r7,65279
   433cc:	39ffbfc4 	addi	r7,r7,-257
   433d0:	01a02074 	movhi	r6,32897
   433d4:	31a02004 	addi	r6,r6,-32640
   433d8:	00000206 	br	433e4 <strlen+0x4c>
   433dc:	10800104 	addi	r2,r2,4
   433e0:	10c00017 	ldw	r3,0(r2)
   433e4:	19cb883a 	add	r5,r3,r7
   433e8:	00c6303a 	nor	r3,zero,r3
   433ec:	28c6703a 	and	r3,r5,r3
   433f0:	1986703a 	and	r3,r3,r6
   433f4:	183ff926 	beq	r3,zero,433dc <strlen+0x44>
   433f8:	10c00007 	ldb	r3,0(r2)
   433fc:	18000326 	beq	r3,zero,4340c <strlen+0x74>
   43400:	10800044 	addi	r2,r2,1
   43404:	10c00007 	ldb	r3,0(r2)
   43408:	183ffd1e 	bne	r3,zero,43400 <strlen+0x68>
   4340c:	1105c83a 	sub	r2,r2,r4
   43410:	f800283a 	ret
   43414:	2005883a 	mov	r2,r4
   43418:	003fea06 	br	433c4 <strlen+0x2c>
   4341c:	0005883a 	mov	r2,zero
   43420:	f800283a 	ret

00043424 <___vfprintf_internal_r>:
   43424:	defeb604 	addi	sp,sp,-1320
   43428:	dfc14915 	stw	ra,1316(sp)
   4342c:	ddc14715 	stw	r23,1308(sp)
   43430:	dc414115 	stw	r17,1284(sp)
   43434:	d9012c15 	stw	r4,1200(sp)
   43438:	282f883a 	mov	r23,r5
   4343c:	3023883a 	mov	r17,r6
   43440:	d9c12f15 	stw	r7,1212(sp)
   43444:	df014815 	stw	fp,1312(sp)
   43448:	dd814615 	stw	r22,1304(sp)
   4344c:	dd414515 	stw	r21,1300(sp)
   43450:	dd014415 	stw	r20,1296(sp)
   43454:	dcc14315 	stw	r19,1292(sp)
   43458:	dc814215 	stw	r18,1288(sp)
   4345c:	dc014015 	stw	r16,1280(sp)
   43460:	0047e580 	call	47e58 <_localeconv_r>
   43464:	10800017 	ldw	r2,0(r2)
   43468:	1009883a 	mov	r4,r2
   4346c:	d8813415 	stw	r2,1232(sp)
   43470:	00433980 	call	43398 <strlen>
   43474:	da812c17 	ldw	r10,1200(sp)
   43478:	d8813815 	stw	r2,1248(sp)
   4347c:	50000226 	beq	r10,zero,43488 <___vfprintf_internal_r+0x64>
   43480:	50800e17 	ldw	r2,56(r10)
   43484:	10022a26 	beq	r2,zero,43d30 <___vfprintf_internal_r+0x90c>
   43488:	b880030b 	ldhu	r2,12(r23)
   4348c:	1108000c 	andi	r4,r2,8192
   43490:	1007883a 	mov	r3,r2
   43494:	2000071e 	bne	r4,zero,434b4 <___vfprintf_internal_r+0x90>
   43498:	b9001917 	ldw	r4,100(r23)
   4349c:	10c80014 	ori	r3,r2,8192
   434a0:	00b7ffc4 	movi	r2,-8193
   434a4:	2088703a 	and	r4,r4,r2
   434a8:	b8c0030d 	sth	r3,12(r23)
   434ac:	1805883a 	mov	r2,r3
   434b0:	b9001915 	stw	r4,100(r23)
   434b4:	1900020c 	andi	r4,r3,8
   434b8:	2001cd26 	beq	r4,zero,43bf0 <___vfprintf_internal_r+0x7cc>
   434bc:	b9000417 	ldw	r4,16(r23)
   434c0:	2001cb26 	beq	r4,zero,43bf0 <___vfprintf_internal_r+0x7cc>
   434c4:	18c0068c 	andi	r3,r3,26
   434c8:	01000284 	movi	r4,10
   434cc:	1901d126 	beq	r3,r4,43c14 <___vfprintf_internal_r+0x7f0>
   434d0:	da810dc4 	addi	r10,sp,1079
   434d4:	d8800404 	addi	r2,sp,16
   434d8:	da812815 	stw	r10,1184(sp)
   434dc:	d8811e15 	stw	r2,1144(sp)
   434e0:	1011883a 	mov	r8,r2
   434e4:	d8812817 	ldw	r2,1184(sp)
   434e8:	da810e04 	addi	r10,sp,1080
   434ec:	da812915 	stw	r10,1188(sp)
   434f0:	5095c83a 	sub	r10,r10,r2
   434f4:	d8012015 	stw	zero,1152(sp)
   434f8:	d8011f15 	stw	zero,1148(sp)
   434fc:	d8013515 	stw	zero,1236(sp)
   43500:	d8013715 	stw	zero,1244(sp)
   43504:	d8013915 	stw	zero,1252(sp)
   43508:	d8013b15 	stw	zero,1260(sp)
   4350c:	d8013a15 	stw	zero,1256(sp)
   43510:	d8013115 	stw	zero,1220(sp)
   43514:	04c00174 	movhi	r19,5
   43518:	9cffa784 	addi	r19,r19,-354
   4351c:	da813d15 	stw	r10,1268(sp)
   43520:	88800007 	ldb	r2,0(r17)
   43524:	10019726 	beq	r2,zero,43b84 <___vfprintf_internal_r+0x760>
   43528:	00c00944 	movi	r3,37
   4352c:	8821883a 	mov	r16,r17
   43530:	10c0021e 	bne	r2,r3,4353c <___vfprintf_internal_r+0x118>
   43534:	00001406 	br	43588 <___vfprintf_internal_r+0x164>
   43538:	10c00326 	beq	r2,r3,43548 <___vfprintf_internal_r+0x124>
   4353c:	84000044 	addi	r16,r16,1
   43540:	80800007 	ldb	r2,0(r16)
   43544:	103ffc1e 	bne	r2,zero,43538 <___vfprintf_internal_r+0x114>
   43548:	8465c83a 	sub	r18,r16,r17
   4354c:	90000e26 	beq	r18,zero,43588 <___vfprintf_internal_r+0x164>
   43550:	d8c12017 	ldw	r3,1152(sp)
   43554:	d8811f17 	ldw	r2,1148(sp)
   43558:	44400015 	stw	r17,0(r8)
   4355c:	1c87883a 	add	r3,r3,r18
   43560:	10800044 	addi	r2,r2,1
   43564:	d8c12015 	stw	r3,1152(sp)
   43568:	44800115 	stw	r18,4(r8)
   4356c:	d8811f15 	stw	r2,1148(sp)
   43570:	00c001c4 	movi	r3,7
   43574:	1881dc16 	blt	r3,r2,43ce8 <___vfprintf_internal_r+0x8c4>
   43578:	42000204 	addi	r8,r8,8
   4357c:	da813117 	ldw	r10,1220(sp)
   43580:	5495883a 	add	r10,r10,r18
   43584:	da813115 	stw	r10,1220(sp)
   43588:	80800007 	ldb	r2,0(r16)
   4358c:	1001dd26 	beq	r2,zero,43d04 <___vfprintf_internal_r+0x8e0>
   43590:	84800047 	ldb	r18,1(r16)
   43594:	84400044 	addi	r17,r16,1
   43598:	d8012785 	stb	zero,1182(sp)
   4359c:	000d883a 	mov	r6,zero
   435a0:	053fffc4 	movi	r20,-1
   435a4:	d8013015 	stw	zero,1216(sp)
   435a8:	d8012a15 	stw	zero,1192(sp)
   435ac:	00c01604 	movi	r3,88
   435b0:	01000244 	movi	r4,9
   435b4:	02400a84 	movi	r9,42
   435b8:	01c01b04 	movi	r7,108
   435bc:	8c400044 	addi	r17,r17,1
   435c0:	90bff804 	addi	r2,r18,-32
   435c4:	1882f936 	bltu	r3,r2,441ac <___vfprintf_internal_r+0xd88>
   435c8:	1085883a 	add	r2,r2,r2
   435cc:	1085883a 	add	r2,r2,r2
   435d0:	01400134 	movhi	r5,4
   435d4:	294d7904 	addi	r5,r5,13796
   435d8:	1145883a 	add	r2,r2,r5
   435dc:	10800017 	ldw	r2,0(r2)
   435e0:	1000683a 	jmp	r2
   435e4:	0004404c 	andi	zero,zero,4353
   435e8:	000441ac 	andhi	zero,zero,4358
   435ec:	000441ac 	andhi	zero,zero,4358
   435f0:	00043ff0 	cmpltui	zero,zero,4351
   435f4:	000441ac 	andhi	zero,zero,4358
   435f8:	000441ac 	andhi	zero,zero,4358
   435fc:	000441ac 	andhi	zero,zero,4358
   43600:	000441ac 	andhi	zero,zero,4358
   43604:	000441ac 	andhi	zero,zero,4358
   43608:	000441ac 	andhi	zero,zero,4358
   4360c:	00044004 	movi	zero,4352
   43610:	0004402c 	andhi	zero,zero,4352
   43614:	000441ac 	andhi	zero,zero,4358
   43618:	00043bdc 	xori	zero,zero,4335
   4361c:	0004416c 	andhi	zero,zero,4357
   43620:	000441ac 	andhi	zero,zero,4358
   43624:	00044038 	rdprs	zero,zero,4352
   43628:	00043d88 	cmpgei	zero,zero,4342
   4362c:	00043d88 	cmpgei	zero,zero,4342
   43630:	00043d88 	cmpgei	zero,zero,4342
   43634:	00043d88 	cmpgei	zero,zero,4342
   43638:	00043d88 	cmpgei	zero,zero,4342
   4363c:	00043d88 	cmpgei	zero,zero,4342
   43640:	00043d88 	cmpgei	zero,zero,4342
   43644:	00043d88 	cmpgei	zero,zero,4342
   43648:	00043d88 	cmpgei	zero,zero,4342
   4364c:	000441ac 	andhi	zero,zero,4358
   43650:	000441ac 	andhi	zero,zero,4358
   43654:	000441ac 	andhi	zero,zero,4358
   43658:	000441ac 	andhi	zero,zero,4358
   4365c:	000441ac 	andhi	zero,zero,4358
   43660:	000441ac 	andhi	zero,zero,4358
   43664:	000441ac 	andhi	zero,zero,4358
   43668:	000441ac 	andhi	zero,zero,4358
   4366c:	000441ac 	andhi	zero,zero,4358
   43670:	000441ac 	andhi	zero,zero,4358
   43674:	00043e20 	cmpeqi	zero,zero,4344
   43678:	00043e68 	cmpgeui	zero,zero,4345
   4367c:	000441ac 	andhi	zero,zero,4358
   43680:	00043e68 	cmpgeui	zero,zero,4345
   43684:	000441ac 	andhi	zero,zero,4358
   43688:	000441ac 	andhi	zero,zero,4358
   4368c:	000441ac 	andhi	zero,zero,4358
   43690:	000441ac 	andhi	zero,zero,4358
   43694:	00044120 	cmpeqi	zero,zero,4356
   43698:	000441ac 	andhi	zero,zero,4358
   4369c:	000441ac 	andhi	zero,zero,4358
   436a0:	00043b8c 	andi	zero,zero,4334
   436a4:	000441ac 	andhi	zero,zero,4358
   436a8:	000441ac 	andhi	zero,zero,4358
   436ac:	000441ac 	andhi	zero,zero,4358
   436b0:	000441ac 	andhi	zero,zero,4358
   436b4:	000441ac 	andhi	zero,zero,4358
   436b8:	00043748 	cmpgei	zero,zero,4317
   436bc:	000441ac 	andhi	zero,zero,4358
   436c0:	000441ac 	andhi	zero,zero,4358
   436c4:	00043f64 	muli	zero,zero,4349
   436c8:	000441ac 	andhi	zero,zero,4358
   436cc:	000441ac 	andhi	zero,zero,4358
   436d0:	000441ac 	andhi	zero,zero,4358
   436d4:	000441ac 	andhi	zero,zero,4358
   436d8:	000441ac 	andhi	zero,zero,4358
   436dc:	000441ac 	andhi	zero,zero,4358
   436e0:	000441ac 	andhi	zero,zero,4358
   436e4:	000441ac 	andhi	zero,zero,4358
   436e8:	000441ac 	andhi	zero,zero,4358
   436ec:	000441ac 	andhi	zero,zero,4358
   436f0:	00044134 	movhi	zero,4356
   436f4:	00043fa4 	muli	zero,zero,4350
   436f8:	00043e68 	cmpgeui	zero,zero,4345
   436fc:	00043e68 	cmpgeui	zero,zero,4345
   43700:	00043e68 	cmpgeui	zero,zero,4345
   43704:	00043fdc 	xori	zero,zero,4351
   43708:	00043fa4 	muli	zero,zero,4350
   4370c:	000441ac 	andhi	zero,zero,4358
   43710:	000441ac 	andhi	zero,zero,4358
   43714:	00044068 	cmpgeui	zero,zero,4353
   43718:	000441ac 	andhi	zero,zero,4358
   4371c:	00044084 	movi	zero,4354
   43720:	00043b98 	cmpnei	zero,zero,4334
   43724:	00043dbc 	xorhi	zero,zero,4342
   43728:	00043e0c 	andi	zero,zero,4344
   4372c:	000441ac 	andhi	zero,zero,4358
   43730:	000440c0 	call	440c <__alt_mem_onchip_memory2-0x3bbf4>
   43734:	000441ac 	andhi	zero,zero,4358
   43738:	00043754 	movui	zero,4317
   4373c:	000441ac 	andhi	zero,zero,4358
   43740:	000441ac 	andhi	zero,zero,4358
   43744:	00043f04 	movi	zero,4348
   43748:	da812a17 	ldw	r10,1192(sp)
   4374c:	52800414 	ori	r10,r10,16
   43750:	da812a15 	stw	r10,1192(sp)
   43754:	da812a17 	ldw	r10,1192(sp)
   43758:	5080080c 	andi	r2,r10,32
   4375c:	1001821e 	bne	r2,zero,43d68 <___vfprintf_internal_r+0x944>
   43760:	da812a17 	ldw	r10,1192(sp)
   43764:	5080040c 	andi	r2,r10,16
   43768:	10054a26 	beq	r2,zero,44c94 <___vfprintf_internal_r+0x1870>
   4376c:	da812f17 	ldw	r10,1212(sp)
   43770:	55400017 	ldw	r21,0(r10)
   43774:	52800104 	addi	r10,r10,4
   43778:	002d883a 	mov	r22,zero
   4377c:	da812f15 	stw	r10,1212(sp)
   43780:	00c00044 	movi	r3,1
   43784:	a805883a 	mov	r2,r21
   43788:	d8012785 	stb	zero,1182(sp)
   4378c:	0039883a 	mov	fp,zero
   43790:	a0000416 	blt	r20,zero,437a4 <___vfprintf_internal_r+0x380>
   43794:	da812a17 	ldw	r10,1192(sp)
   43798:	013fdfc4 	movi	r4,-129
   4379c:	5114703a 	and	r10,r10,r4
   437a0:	da812a15 	stw	r10,1192(sp)
   437a4:	10029a1e 	bne	r2,zero,44210 <___vfprintf_internal_r+0xdec>
   437a8:	a002991e 	bne	r20,zero,44210 <___vfprintf_internal_r+0xdec>
   437ac:	18c03fcc 	andi	r3,r3,255
   437b0:	1803d91e 	bne	r3,zero,44718 <___vfprintf_internal_r+0x12f4>
   437b4:	da812a17 	ldw	r10,1192(sp)
   437b8:	5080004c 	andi	r2,r10,1
   437bc:	1003d626 	beq	r2,zero,44718 <___vfprintf_internal_r+0x12f4>
   437c0:	da813d17 	ldw	r10,1268(sp)
   437c4:	00800c04 	movi	r2,48
   437c8:	d8810dc5 	stb	r2,1079(sp)
   437cc:	da812e15 	stw	r10,1208(sp)
   437d0:	dc010dc4 	addi	r16,sp,1079
   437d4:	d8812e17 	ldw	r2,1208(sp)
   437d8:	1500010e 	bge	r2,r20,437e0 <___vfprintf_internal_r+0x3bc>
   437dc:	a005883a 	mov	r2,r20
   437e0:	d8812b15 	stw	r2,1196(sp)
   437e4:	d8013315 	stw	zero,1228(sp)
   437e8:	e0803fcc 	andi	r2,fp,255
   437ec:	1080201c 	xori	r2,r2,128
   437f0:	10bfe004 	addi	r2,r2,-128
   437f4:	10000326 	beq	r2,zero,43804 <___vfprintf_internal_r+0x3e0>
   437f8:	da812b17 	ldw	r10,1196(sp)
   437fc:	52800044 	addi	r10,r10,1
   43800:	da812b15 	stw	r10,1196(sp)
   43804:	d8c12a17 	ldw	r3,1192(sp)
   43808:	18c0008c 	andi	r3,r3,2
   4380c:	d8c12d15 	stw	r3,1204(sp)
   43810:	18000326 	beq	r3,zero,43820 <___vfprintf_internal_r+0x3fc>
   43814:	da812b17 	ldw	r10,1196(sp)
   43818:	52800084 	addi	r10,r10,2
   4381c:	da812b15 	stw	r10,1196(sp)
   43820:	d8c12a17 	ldw	r3,1192(sp)
   43824:	18c0210c 	andi	r3,r3,132
   43828:	d8c13215 	stw	r3,1224(sp)
   4382c:	1802661e 	bne	r3,zero,441c8 <___vfprintf_internal_r+0xda4>
   43830:	da813017 	ldw	r10,1216(sp)
   43834:	d8c12b17 	ldw	r3,1196(sp)
   43838:	50f9c83a 	sub	fp,r10,r3
   4383c:	0702620e 	bge	zero,fp,441c8 <___vfprintf_internal_r+0xda4>
   43840:	02800174 	movhi	r10,5
   43844:	52bfab84 	addi	r10,r10,-338
   43848:	02400404 	movi	r9,16
   4384c:	da813615 	stw	r10,1240(sp)
   43850:	d8c12017 	ldw	r3,1152(sp)
   43854:	d8811f17 	ldw	r2,1148(sp)
   43858:	4f00220e 	bge	r9,fp,438e4 <___vfprintf_internal_r+0x4c0>
   4385c:	8809883a 	mov	r4,r17
   43860:	dc013c15 	stw	r16,1264(sp)
   43864:	e023883a 	mov	r17,fp
   43868:	482d883a 	mov	r22,r9
   4386c:	054001c4 	movi	r21,7
   43870:	dc012c17 	ldw	r16,1200(sp)
   43874:	2039883a 	mov	fp,r4
   43878:	00000306 	br	43888 <___vfprintf_internal_r+0x464>
   4387c:	8c7ffc04 	addi	r17,r17,-16
   43880:	42000204 	addi	r8,r8,8
   43884:	b440130e 	bge	r22,r17,438d4 <___vfprintf_internal_r+0x4b0>
   43888:	18c00404 	addi	r3,r3,16
   4388c:	10800044 	addi	r2,r2,1
   43890:	01000174 	movhi	r4,5
   43894:	213fab84 	addi	r4,r4,-338
   43898:	41000015 	stw	r4,0(r8)
   4389c:	45800115 	stw	r22,4(r8)
   438a0:	d8c12015 	stw	r3,1152(sp)
   438a4:	d8811f15 	stw	r2,1148(sp)
   438a8:	a8bff40e 	bge	r21,r2,4387c <___vfprintf_internal_r+0x458>
   438ac:	8009883a 	mov	r4,r16
   438b0:	b80b883a 	mov	r5,r23
   438b4:	d9811e04 	addi	r6,sp,1144
   438b8:	004a52c0 	call	4a52c <__sprint_r>
   438bc:	1001171e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   438c0:	8c7ffc04 	addi	r17,r17,-16
   438c4:	d8c12017 	ldw	r3,1152(sp)
   438c8:	d8811f17 	ldw	r2,1148(sp)
   438cc:	da000404 	addi	r8,sp,16
   438d0:	b47fed16 	blt	r22,r17,43888 <___vfprintf_internal_r+0x464>
   438d4:	dc013c17 	ldw	r16,1264(sp)
   438d8:	e009883a 	mov	r4,fp
   438dc:	8839883a 	mov	fp,r17
   438e0:	2023883a 	mov	r17,r4
   438e4:	da813617 	ldw	r10,1240(sp)
   438e8:	e0c7883a 	add	r3,fp,r3
   438ec:	10800044 	addi	r2,r2,1
   438f0:	42800015 	stw	r10,0(r8)
   438f4:	47000115 	stw	fp,4(r8)
   438f8:	d8c12015 	stw	r3,1152(sp)
   438fc:	d8811f15 	stw	r2,1148(sp)
   43900:	010001c4 	movi	r4,7
   43904:	2083bd16 	blt	r4,r2,447fc <___vfprintf_internal_r+0x13d8>
   43908:	d8812787 	ldb	r2,1182(sp)
   4390c:	42000204 	addi	r8,r8,8
   43910:	10000c26 	beq	r2,zero,43944 <___vfprintf_internal_r+0x520>
   43914:	d8811f17 	ldw	r2,1148(sp)
   43918:	d9012784 	addi	r4,sp,1182
   4391c:	18c00044 	addi	r3,r3,1
   43920:	10800044 	addi	r2,r2,1
   43924:	41000015 	stw	r4,0(r8)
   43928:	01000044 	movi	r4,1
   4392c:	41000115 	stw	r4,4(r8)
   43930:	d8c12015 	stw	r3,1152(sp)
   43934:	d8811f15 	stw	r2,1148(sp)
   43938:	010001c4 	movi	r4,7
   4393c:	20834116 	blt	r4,r2,44644 <___vfprintf_internal_r+0x1220>
   43940:	42000204 	addi	r8,r8,8
   43944:	da812d17 	ldw	r10,1204(sp)
   43948:	50000c26 	beq	r10,zero,4397c <___vfprintf_internal_r+0x558>
   4394c:	d8811f17 	ldw	r2,1148(sp)
   43950:	d9012704 	addi	r4,sp,1180
   43954:	18c00084 	addi	r3,r3,2
   43958:	10800044 	addi	r2,r2,1
   4395c:	41000015 	stw	r4,0(r8)
   43960:	01000084 	movi	r4,2
   43964:	41000115 	stw	r4,4(r8)
   43968:	d8c12015 	stw	r3,1152(sp)
   4396c:	d8811f15 	stw	r2,1148(sp)
   43970:	010001c4 	movi	r4,7
   43974:	20833b16 	blt	r4,r2,44664 <___vfprintf_internal_r+0x1240>
   43978:	42000204 	addi	r8,r8,8
   4397c:	da813217 	ldw	r10,1224(sp)
   43980:	00802004 	movi	r2,128
   43984:	50828326 	beq	r10,r2,44394 <___vfprintf_internal_r+0xf70>
   43988:	da812e17 	ldw	r10,1208(sp)
   4398c:	a2a9c83a 	sub	r20,r20,r10
   43990:	05002d0e 	bge	zero,r20,43a48 <___vfprintf_internal_r+0x624>
   43994:	05800404 	movi	r22,16
   43998:	d8811f17 	ldw	r2,1148(sp)
   4399c:	05400174 	movhi	r21,5
   439a0:	ad7fa784 	addi	r21,r21,-354
   439a4:	b5001f0e 	bge	r22,r20,43a24 <___vfprintf_internal_r+0x600>
   439a8:	8809883a 	mov	r4,r17
   439ac:	dc012d15 	stw	r16,1204(sp)
   439b0:	a023883a 	mov	r17,r20
   439b4:	070001c4 	movi	fp,7
   439b8:	dc012c17 	ldw	r16,1200(sp)
   439bc:	2029883a 	mov	r20,r4
   439c0:	00000306 	br	439d0 <___vfprintf_internal_r+0x5ac>
   439c4:	8c7ffc04 	addi	r17,r17,-16
   439c8:	42000204 	addi	r8,r8,8
   439cc:	b440110e 	bge	r22,r17,43a14 <___vfprintf_internal_r+0x5f0>
   439d0:	18c00404 	addi	r3,r3,16
   439d4:	10800044 	addi	r2,r2,1
   439d8:	44c00015 	stw	r19,0(r8)
   439dc:	45800115 	stw	r22,4(r8)
   439e0:	d8c12015 	stw	r3,1152(sp)
   439e4:	d8811f15 	stw	r2,1148(sp)
   439e8:	e0bff60e 	bge	fp,r2,439c4 <___vfprintf_internal_r+0x5a0>
   439ec:	8009883a 	mov	r4,r16
   439f0:	b80b883a 	mov	r5,r23
   439f4:	d9811e04 	addi	r6,sp,1144
   439f8:	004a52c0 	call	4a52c <__sprint_r>
   439fc:	1000c71e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   43a00:	8c7ffc04 	addi	r17,r17,-16
   43a04:	d8c12017 	ldw	r3,1152(sp)
   43a08:	d8811f17 	ldw	r2,1148(sp)
   43a0c:	da000404 	addi	r8,sp,16
   43a10:	b47fef16 	blt	r22,r17,439d0 <___vfprintf_internal_r+0x5ac>
   43a14:	dc012d17 	ldw	r16,1204(sp)
   43a18:	a009883a 	mov	r4,r20
   43a1c:	8829883a 	mov	r20,r17
   43a20:	2023883a 	mov	r17,r4
   43a24:	1d07883a 	add	r3,r3,r20
   43a28:	10800044 	addi	r2,r2,1
   43a2c:	45400015 	stw	r21,0(r8)
   43a30:	45000115 	stw	r20,4(r8)
   43a34:	d8c12015 	stw	r3,1152(sp)
   43a38:	d8811f15 	stw	r2,1148(sp)
   43a3c:	010001c4 	movi	r4,7
   43a40:	2082f816 	blt	r4,r2,44624 <___vfprintf_internal_r+0x1200>
   43a44:	42000204 	addi	r8,r8,8
   43a48:	da812a17 	ldw	r10,1192(sp)
   43a4c:	5080400c 	andi	r2,r10,256
   43a50:	1002061e 	bne	r2,zero,4426c <___vfprintf_internal_r+0xe48>
   43a54:	da812e17 	ldw	r10,1208(sp)
   43a58:	d8811f17 	ldw	r2,1148(sp)
   43a5c:	44000015 	stw	r16,0(r8)
   43a60:	1a87883a 	add	r3,r3,r10
   43a64:	10800044 	addi	r2,r2,1
   43a68:	42800115 	stw	r10,4(r8)
   43a6c:	d8c12015 	stw	r3,1152(sp)
   43a70:	d8811f15 	stw	r2,1148(sp)
   43a74:	010001c4 	movi	r4,7
   43a78:	2081dd16 	blt	r4,r2,441f0 <___vfprintf_internal_r+0xdcc>
   43a7c:	42000204 	addi	r8,r8,8
   43a80:	da812a17 	ldw	r10,1192(sp)
   43a84:	5080010c 	andi	r2,r10,4
   43a88:	10003226 	beq	r2,zero,43b54 <___vfprintf_internal_r+0x730>
   43a8c:	da813017 	ldw	r10,1216(sp)
   43a90:	d8812b17 	ldw	r2,1196(sp)
   43a94:	50a1c83a 	sub	r16,r10,r2
   43a98:	04002e0e 	bge	zero,r16,43b54 <___vfprintf_internal_r+0x730>
   43a9c:	02800174 	movhi	r10,5
   43aa0:	52bfab84 	addi	r10,r10,-338
   43aa4:	04800404 	movi	r18,16
   43aa8:	da813615 	stw	r10,1240(sp)
   43aac:	d8811f17 	ldw	r2,1148(sp)
   43ab0:	9400190e 	bge	r18,r16,43b18 <___vfprintf_internal_r+0x6f4>
   43ab4:	050001c4 	movi	r20,7
   43ab8:	dd412c17 	ldw	r21,1200(sp)
   43abc:	00000306 	br	43acc <___vfprintf_internal_r+0x6a8>
   43ac0:	843ffc04 	addi	r16,r16,-16
   43ac4:	42000204 	addi	r8,r8,8
   43ac8:	9400130e 	bge	r18,r16,43b18 <___vfprintf_internal_r+0x6f4>
   43acc:	18c00404 	addi	r3,r3,16
   43ad0:	10800044 	addi	r2,r2,1
   43ad4:	01000174 	movhi	r4,5
   43ad8:	213fab84 	addi	r4,r4,-338
   43adc:	41000015 	stw	r4,0(r8)
   43ae0:	44800115 	stw	r18,4(r8)
   43ae4:	d8c12015 	stw	r3,1152(sp)
   43ae8:	d8811f15 	stw	r2,1148(sp)
   43aec:	a0bff40e 	bge	r20,r2,43ac0 <___vfprintf_internal_r+0x69c>
   43af0:	a809883a 	mov	r4,r21
   43af4:	b80b883a 	mov	r5,r23
   43af8:	d9811e04 	addi	r6,sp,1144
   43afc:	004a52c0 	call	4a52c <__sprint_r>
   43b00:	1000861e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   43b04:	843ffc04 	addi	r16,r16,-16
   43b08:	d8c12017 	ldw	r3,1152(sp)
   43b0c:	d8811f17 	ldw	r2,1148(sp)
   43b10:	da000404 	addi	r8,sp,16
   43b14:	943fed16 	blt	r18,r16,43acc <___vfprintf_internal_r+0x6a8>
   43b18:	da813617 	ldw	r10,1240(sp)
   43b1c:	1c07883a 	add	r3,r3,r16
   43b20:	10800044 	addi	r2,r2,1
   43b24:	42800015 	stw	r10,0(r8)
   43b28:	44000115 	stw	r16,4(r8)
   43b2c:	d8c12015 	stw	r3,1152(sp)
   43b30:	d8811f15 	stw	r2,1148(sp)
   43b34:	010001c4 	movi	r4,7
   43b38:	2080060e 	bge	r4,r2,43b54 <___vfprintf_internal_r+0x730>
   43b3c:	d9012c17 	ldw	r4,1200(sp)
   43b40:	b80b883a 	mov	r5,r23
   43b44:	d9811e04 	addi	r6,sp,1144
   43b48:	004a52c0 	call	4a52c <__sprint_r>
   43b4c:	1000731e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   43b50:	d8c12017 	ldw	r3,1152(sp)
   43b54:	d8812b17 	ldw	r2,1196(sp)
   43b58:	da813017 	ldw	r10,1216(sp)
   43b5c:	1280010e 	bge	r2,r10,43b64 <___vfprintf_internal_r+0x740>
   43b60:	5005883a 	mov	r2,r10
   43b64:	da813117 	ldw	r10,1220(sp)
   43b68:	5095883a 	add	r10,r10,r2
   43b6c:	da813115 	stw	r10,1220(sp)
   43b70:	18028b1e 	bne	r3,zero,445a0 <___vfprintf_internal_r+0x117c>
   43b74:	88800007 	ldb	r2,0(r17)
   43b78:	d8011f15 	stw	zero,1148(sp)
   43b7c:	da000404 	addi	r8,sp,16
   43b80:	103e691e 	bne	r2,zero,43528 <___vfprintf_internal_r+0x104>
   43b84:	8821883a 	mov	r16,r17
   43b88:	003e7f06 	br	43588 <___vfprintf_internal_r+0x164>
   43b8c:	da812a17 	ldw	r10,1192(sp)
   43b90:	52800414 	ori	r10,r10,16
   43b94:	da812a15 	stw	r10,1192(sp)
   43b98:	da812a17 	ldw	r10,1192(sp)
   43b9c:	5080080c 	andi	r2,r10,32
   43ba0:	10006626 	beq	r2,zero,43d3c <___vfprintf_internal_r+0x918>
   43ba4:	da812f17 	ldw	r10,1212(sp)
   43ba8:	0007883a 	mov	r3,zero
   43bac:	55400017 	ldw	r21,0(r10)
   43bb0:	55800117 	ldw	r22,4(r10)
   43bb4:	52800204 	addi	r10,r10,8
   43bb8:	da812f15 	stw	r10,1212(sp)
   43bbc:	ad84b03a 	or	r2,r21,r22
   43bc0:	d8012785 	stb	zero,1182(sp)
   43bc4:	0039883a 	mov	fp,zero
   43bc8:	003ef106 	br	43790 <___vfprintf_internal_r+0x36c>
   43bcc:	da813017 	ldw	r10,1216(sp)
   43bd0:	d8812f15 	stw	r2,1212(sp)
   43bd4:	0295c83a 	sub	r10,zero,r10
   43bd8:	da813015 	stw	r10,1216(sp)
   43bdc:	da812a17 	ldw	r10,1192(sp)
   43be0:	52800114 	ori	r10,r10,4
   43be4:	da812a15 	stw	r10,1192(sp)
   43be8:	8c800007 	ldb	r18,0(r17)
   43bec:	003e7306 	br	435bc <___vfprintf_internal_r+0x198>
   43bf0:	d9012c17 	ldw	r4,1200(sp)
   43bf4:	b80b883a 	mov	r5,r23
   43bf8:	00454240 	call	45424 <__swsetup_r>
   43bfc:	10002d1e 	bne	r2,zero,43cb4 <___vfprintf_internal_r+0x890>
   43c00:	b880030b 	ldhu	r2,12(r23)
   43c04:	01000284 	movi	r4,10
   43c08:	1007883a 	mov	r3,r2
   43c0c:	18c0068c 	andi	r3,r3,26
   43c10:	193e2f1e 	bne	r3,r4,434d0 <___vfprintf_internal_r+0xac>
   43c14:	b8c0038b 	ldhu	r3,14(r23)
   43c18:	193fffcc 	andi	r4,r3,65535
   43c1c:	2120001c 	xori	r4,r4,32768
   43c20:	21200004 	addi	r4,r4,-32768
   43c24:	203e2a16 	blt	r4,zero,434d0 <___vfprintf_internal_r+0xac>
   43c28:	bac01917 	ldw	r11,100(r23)
   43c2c:	ba800717 	ldw	r10,28(r23)
   43c30:	ba400917 	ldw	r9,36(r23)
   43c34:	d9012c17 	ldw	r4,1200(sp)
   43c38:	d9c12f17 	ldw	r7,1212(sp)
   43c3c:	10bfff4c 	andi	r2,r2,65533
   43c40:	02010004 	movi	r8,1024
   43c44:	d881070d 	sth	r2,1052(sp)
   43c48:	d9410404 	addi	r5,sp,1040
   43c4c:	d8800404 	addi	r2,sp,16
   43c50:	880d883a 	mov	r6,r17
   43c54:	dac11d15 	stw	r11,1140(sp)
   43c58:	d8c1078d 	sth	r3,1054(sp)
   43c5c:	da810b15 	stw	r10,1068(sp)
   43c60:	da410d15 	stw	r9,1076(sp)
   43c64:	d8810415 	stw	r2,1040(sp)
   43c68:	d8810815 	stw	r2,1056(sp)
   43c6c:	da010615 	stw	r8,1048(sp)
   43c70:	da010915 	stw	r8,1060(sp)
   43c74:	d8010a15 	stw	zero,1064(sp)
   43c78:	00434240 	call	43424 <___vfprintf_internal_r>
   43c7c:	1021883a 	mov	r16,r2
   43c80:	10000416 	blt	r2,zero,43c94 <___vfprintf_internal_r+0x870>
   43c84:	d9012c17 	ldw	r4,1200(sp)
   43c88:	d9410404 	addi	r5,sp,1040
   43c8c:	0046d9c0 	call	46d9c <_fflush_r>
   43c90:	1005cc1e 	bne	r2,zero,453c4 <___vfprintf_internal_r+0x1fa0>
   43c94:	d881070b 	ldhu	r2,1052(sp)
   43c98:	1080100c 	andi	r2,r2,64
   43c9c:	10000326 	beq	r2,zero,43cac <___vfprintf_internal_r+0x888>
   43ca0:	b880030b 	ldhu	r2,12(r23)
   43ca4:	10801014 	ori	r2,r2,64
   43ca8:	b880030d 	sth	r2,12(r23)
   43cac:	8005883a 	mov	r2,r16
   43cb0:	00000106 	br	43cb8 <___vfprintf_internal_r+0x894>
   43cb4:	00bfffc4 	movi	r2,-1
   43cb8:	dfc14917 	ldw	ra,1316(sp)
   43cbc:	df014817 	ldw	fp,1312(sp)
   43cc0:	ddc14717 	ldw	r23,1308(sp)
   43cc4:	dd814617 	ldw	r22,1304(sp)
   43cc8:	dd414517 	ldw	r21,1300(sp)
   43ccc:	dd014417 	ldw	r20,1296(sp)
   43cd0:	dcc14317 	ldw	r19,1292(sp)
   43cd4:	dc814217 	ldw	r18,1288(sp)
   43cd8:	dc414117 	ldw	r17,1284(sp)
   43cdc:	dc014017 	ldw	r16,1280(sp)
   43ce0:	dec14a04 	addi	sp,sp,1320
   43ce4:	f800283a 	ret
   43ce8:	d9012c17 	ldw	r4,1200(sp)
   43cec:	b80b883a 	mov	r5,r23
   43cf0:	d9811e04 	addi	r6,sp,1144
   43cf4:	004a52c0 	call	4a52c <__sprint_r>
   43cf8:	1000081e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   43cfc:	da000404 	addi	r8,sp,16
   43d00:	003e1e06 	br	4357c <___vfprintf_internal_r+0x158>
   43d04:	d8812017 	ldw	r2,1152(sp)
   43d08:	10000426 	beq	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   43d0c:	d9012c17 	ldw	r4,1200(sp)
   43d10:	b80b883a 	mov	r5,r23
   43d14:	d9811e04 	addi	r6,sp,1144
   43d18:	004a52c0 	call	4a52c <__sprint_r>
   43d1c:	b880030b 	ldhu	r2,12(r23)
   43d20:	1080100c 	andi	r2,r2,64
   43d24:	103fe31e 	bne	r2,zero,43cb4 <___vfprintf_internal_r+0x890>
   43d28:	d8813117 	ldw	r2,1220(sp)
   43d2c:	003fe206 	br	43cb8 <___vfprintf_internal_r+0x894>
   43d30:	5009883a 	mov	r4,r10
   43d34:	00470a80 	call	470a8 <__sinit>
   43d38:	003dd306 	br	43488 <___vfprintf_internal_r+0x64>
   43d3c:	da812a17 	ldw	r10,1192(sp)
   43d40:	5080040c 	andi	r2,r10,16
   43d44:	1003d926 	beq	r2,zero,44cac <___vfprintf_internal_r+0x1888>
   43d48:	da812f17 	ldw	r10,1212(sp)
   43d4c:	55400017 	ldw	r21,0(r10)
   43d50:	52800104 	addi	r10,r10,4
   43d54:	002d883a 	mov	r22,zero
   43d58:	da812f15 	stw	r10,1212(sp)
   43d5c:	0007883a 	mov	r3,zero
   43d60:	a805883a 	mov	r2,r21
   43d64:	003f9606 	br	43bc0 <___vfprintf_internal_r+0x79c>
   43d68:	da812f17 	ldw	r10,1212(sp)
   43d6c:	00c00044 	movi	r3,1
   43d70:	55400017 	ldw	r21,0(r10)
   43d74:	55800117 	ldw	r22,4(r10)
   43d78:	52800204 	addi	r10,r10,8
   43d7c:	da812f15 	stw	r10,1212(sp)
   43d80:	ad84b03a 	or	r2,r21,r22
   43d84:	003f8e06 	br	43bc0 <___vfprintf_internal_r+0x79c>
   43d88:	d8013015 	stw	zero,1216(sp)
   43d8c:	90bff404 	addi	r2,r18,-48
   43d90:	000b883a 	mov	r5,zero
   43d94:	8c800007 	ldb	r18,0(r17)
   43d98:	294002a4 	muli	r5,r5,10
   43d9c:	8c400044 	addi	r17,r17,1
   43da0:	8815883a 	mov	r10,r17
   43da4:	288b883a 	add	r5,r5,r2
   43da8:	90bff404 	addi	r2,r18,-48
   43dac:	20bff92e 	bgeu	r4,r2,43d94 <___vfprintf_internal_r+0x970>
   43db0:	d9413015 	stw	r5,1216(sp)
   43db4:	5023883a 	mov	r17,r10
   43db8:	003e0106 	br	435c0 <___vfprintf_internal_r+0x19c>
   43dbc:	da812f17 	ldw	r10,1212(sp)
   43dc0:	00800c04 	movi	r2,48
   43dc4:	d8812705 	stb	r2,1180(sp)
   43dc8:	55400017 	ldw	r21,0(r10)
   43dcc:	da812a17 	ldw	r10,1192(sp)
   43dd0:	00801e04 	movi	r2,120
   43dd4:	d8812745 	stb	r2,1181(sp)
   43dd8:	52800094 	ori	r10,r10,2
   43ddc:	da812a15 	stw	r10,1192(sp)
   43de0:	da812f17 	ldw	r10,1212(sp)
   43de4:	002d883a 	mov	r22,zero
   43de8:	00c00084 	movi	r3,2
   43dec:	52800104 	addi	r10,r10,4
   43df0:	da812f15 	stw	r10,1212(sp)
   43df4:	02800174 	movhi	r10,5
   43df8:	52bfa004 	addi	r10,r10,-384
   43dfc:	da813b15 	stw	r10,1260(sp)
   43e00:	04801e04 	movi	r18,120
   43e04:	a805883a 	mov	r2,r21
   43e08:	003f6d06 	br	43bc0 <___vfprintf_internal_r+0x79c>
   43e0c:	da812a17 	ldw	r10,1192(sp)
   43e10:	52800814 	ori	r10,r10,32
   43e14:	da812a15 	stw	r10,1192(sp)
   43e18:	8c800007 	ldb	r18,0(r17)
   43e1c:	003de706 	br	435bc <___vfprintf_internal_r+0x198>
   43e20:	da812a17 	ldw	r10,1192(sp)
   43e24:	d9812785 	stb	r6,1182(sp)
   43e28:	52800414 	ori	r10,r10,16
   43e2c:	da812a15 	stw	r10,1192(sp)
   43e30:	da812a17 	ldw	r10,1192(sp)
   43e34:	5080080c 	andi	r2,r10,32
   43e38:	10005e26 	beq	r2,zero,43fb4 <___vfprintf_internal_r+0xb90>
   43e3c:	da812f17 	ldw	r10,1212(sp)
   43e40:	50800117 	ldw	r2,4(r10)
   43e44:	55400017 	ldw	r21,0(r10)
   43e48:	52800204 	addi	r10,r10,8
   43e4c:	da812f15 	stw	r10,1212(sp)
   43e50:	102d883a 	mov	r22,r2
   43e54:	10030516 	blt	r2,zero,44a6c <___vfprintf_internal_r+0x1648>
   43e58:	df012783 	ldbu	fp,1182(sp)
   43e5c:	00c00044 	movi	r3,1
   43e60:	ad84b03a 	or	r2,r21,r22
   43e64:	003e4a06 	br	43790 <___vfprintf_internal_r+0x36c>
   43e68:	da812f17 	ldw	r10,1212(sp)
   43e6c:	d9812785 	stb	r6,1182(sp)
   43e70:	04000044 	movi	r16,1
   43e74:	52800017 	ldw	r10,0(r10)
   43e78:	da813715 	stw	r10,1244(sp)
   43e7c:	da812f17 	ldw	r10,1212(sp)
   43e80:	d9013717 	ldw	r4,1244(sp)
   43e84:	52800117 	ldw	r10,4(r10)
   43e88:	da013f15 	stw	r8,1276(sp)
   43e8c:	da813915 	stw	r10,1252(sp)
   43e90:	da812f17 	ldw	r10,1212(sp)
   43e94:	d9413917 	ldw	r5,1252(sp)
   43e98:	52800204 	addi	r10,r10,8
   43e9c:	da812f15 	stw	r10,1212(sp)
   43ea0:	004a1840 	call	4a184 <__fpclassifyd>
   43ea4:	da013f17 	ldw	r8,1276(sp)
   43ea8:	d9013717 	ldw	r4,1244(sp)
   43eac:	d9413917 	ldw	r5,1252(sp)
   43eb0:	1402f71e 	bne	r2,r16,44a90 <___vfprintf_internal_r+0x166c>
   43eb4:	000d883a 	mov	r6,zero
   43eb8:	000f883a 	mov	r7,zero
   43ebc:	004ce9c0 	call	4ce9c <__ledf2>
   43ec0:	da013f17 	ldw	r8,1276(sp)
   43ec4:	10045a16 	blt	r2,zero,45030 <___vfprintf_internal_r+0x1c0c>
   43ec8:	df012783 	ldbu	fp,1182(sp)
   43ecc:	008011c4 	movi	r2,71
   43ed0:	1483ef0e 	bge	r2,r18,44e90 <___vfprintf_internal_r+0x1a6c>
   43ed4:	04000174 	movhi	r16,5
   43ed8:	843f9804 	addi	r16,r16,-416
   43edc:	da812a17 	ldw	r10,1192(sp)
   43ee0:	00bfdfc4 	movi	r2,-129
   43ee4:	00c000c4 	movi	r3,3
   43ee8:	5094703a 	and	r10,r10,r2
   43eec:	d8c12b15 	stw	r3,1196(sp)
   43ef0:	da812a15 	stw	r10,1192(sp)
   43ef4:	d8c12e15 	stw	r3,1208(sp)
   43ef8:	0029883a 	mov	r20,zero
   43efc:	d8013315 	stw	zero,1228(sp)
   43f00:	003e3906 	br	437e8 <___vfprintf_internal_r+0x3c4>
   43f04:	02800174 	movhi	r10,5
   43f08:	52bfa004 	addi	r10,r10,-384
   43f0c:	da813b15 	stw	r10,1260(sp)
   43f10:	da812a17 	ldw	r10,1192(sp)
   43f14:	d9812785 	stb	r6,1182(sp)
   43f18:	5080080c 	andi	r2,r10,32
   43f1c:	10001826 	beq	r2,zero,43f80 <___vfprintf_internal_r+0xb5c>
   43f20:	da812f17 	ldw	r10,1212(sp)
   43f24:	55400017 	ldw	r21,0(r10)
   43f28:	55800117 	ldw	r22,4(r10)
   43f2c:	52800204 	addi	r10,r10,8
   43f30:	da812f15 	stw	r10,1212(sp)
   43f34:	da812a17 	ldw	r10,1192(sp)
   43f38:	5080004c 	andi	r2,r10,1
   43f3c:	10025826 	beq	r2,zero,448a0 <___vfprintf_internal_r+0x147c>
   43f40:	ad84b03a 	or	r2,r21,r22
   43f44:	10035126 	beq	r2,zero,44c8c <___vfprintf_internal_r+0x1868>
   43f48:	00c00c04 	movi	r3,48
   43f4c:	52800094 	ori	r10,r10,2
   43f50:	d8c12705 	stb	r3,1180(sp)
   43f54:	dc812745 	stb	r18,1181(sp)
   43f58:	da812a15 	stw	r10,1192(sp)
   43f5c:	00c00084 	movi	r3,2
   43f60:	003f1706 	br	43bc0 <___vfprintf_internal_r+0x79c>
   43f64:	02800174 	movhi	r10,5
   43f68:	52bf9b04 	addi	r10,r10,-404
   43f6c:	da813b15 	stw	r10,1260(sp)
   43f70:	da812a17 	ldw	r10,1192(sp)
   43f74:	d9812785 	stb	r6,1182(sp)
   43f78:	5080080c 	andi	r2,r10,32
   43f7c:	103fe81e 	bne	r2,zero,43f20 <___vfprintf_internal_r+0xafc>
   43f80:	da812a17 	ldw	r10,1192(sp)
   43f84:	5080040c 	andi	r2,r10,16
   43f88:	10033726 	beq	r2,zero,44c68 <___vfprintf_internal_r+0x1844>
   43f8c:	da812f17 	ldw	r10,1212(sp)
   43f90:	002d883a 	mov	r22,zero
   43f94:	55400017 	ldw	r21,0(r10)
   43f98:	52800104 	addi	r10,r10,4
   43f9c:	da812f15 	stw	r10,1212(sp)
   43fa0:	003fe406 	br	43f34 <___vfprintf_internal_r+0xb10>
   43fa4:	da812a17 	ldw	r10,1192(sp)
   43fa8:	d9812785 	stb	r6,1182(sp)
   43fac:	5080080c 	andi	r2,r10,32
   43fb0:	103fa21e 	bne	r2,zero,43e3c <___vfprintf_internal_r+0xa18>
   43fb4:	da812a17 	ldw	r10,1192(sp)
   43fb8:	5080040c 	andi	r2,r10,16
   43fbc:	10034126 	beq	r2,zero,44cc4 <___vfprintf_internal_r+0x18a0>
   43fc0:	da812f17 	ldw	r10,1212(sp)
   43fc4:	55400017 	ldw	r21,0(r10)
   43fc8:	52800104 	addi	r10,r10,4
   43fcc:	da812f15 	stw	r10,1212(sp)
   43fd0:	a82dd7fa 	srai	r22,r21,31
   43fd4:	b005883a 	mov	r2,r22
   43fd8:	003f9e06 	br	43e54 <___vfprintf_internal_r+0xa30>
   43fdc:	da812a17 	ldw	r10,1192(sp)
   43fe0:	52801014 	ori	r10,r10,64
   43fe4:	da812a15 	stw	r10,1192(sp)
   43fe8:	8c800007 	ldb	r18,0(r17)
   43fec:	003d7306 	br	435bc <___vfprintf_internal_r+0x198>
   43ff0:	da812a17 	ldw	r10,1192(sp)
   43ff4:	52800054 	ori	r10,r10,1
   43ff8:	da812a15 	stw	r10,1192(sp)
   43ffc:	8c800007 	ldb	r18,0(r17)
   44000:	003d6e06 	br	435bc <___vfprintf_internal_r+0x198>
   44004:	da812f17 	ldw	r10,1212(sp)
   44008:	52800017 	ldw	r10,0(r10)
   4400c:	da813015 	stw	r10,1216(sp)
   44010:	da812f17 	ldw	r10,1212(sp)
   44014:	50800104 	addi	r2,r10,4
   44018:	da813017 	ldw	r10,1216(sp)
   4401c:	503eeb16 	blt	r10,zero,43bcc <___vfprintf_internal_r+0x7a8>
   44020:	d8812f15 	stw	r2,1212(sp)
   44024:	8c800007 	ldb	r18,0(r17)
   44028:	003d6406 	br	435bc <___vfprintf_internal_r+0x198>
   4402c:	01800ac4 	movi	r6,43
   44030:	8c800007 	ldb	r18,0(r17)
   44034:	003d6106 	br	435bc <___vfprintf_internal_r+0x198>
   44038:	da812a17 	ldw	r10,1192(sp)
   4403c:	52802014 	ori	r10,r10,128
   44040:	da812a15 	stw	r10,1192(sp)
   44044:	8c800007 	ldb	r18,0(r17)
   44048:	003d5c06 	br	435bc <___vfprintf_internal_r+0x198>
   4404c:	30803fcc 	andi	r2,r6,255
   44050:	1080201c 	xori	r2,r2,128
   44054:	10bfe004 	addi	r2,r2,-128
   44058:	1003011e 	bne	r2,zero,44c60 <___vfprintf_internal_r+0x183c>
   4405c:	01800804 	movi	r6,32
   44060:	8c800007 	ldb	r18,0(r17)
   44064:	003d5506 	br	435bc <___vfprintf_internal_r+0x198>
   44068:	8c800007 	ldb	r18,0(r17)
   4406c:	8805883a 	mov	r2,r17
   44070:	91c39526 	beq	r18,r7,44ec8 <___vfprintf_internal_r+0x1aa4>
   44074:	da812a17 	ldw	r10,1192(sp)
   44078:	52800414 	ori	r10,r10,16
   4407c:	da812a15 	stw	r10,1192(sp)
   44080:	003d4e06 	br	435bc <___vfprintf_internal_r+0x198>
   44084:	da812a17 	ldw	r10,1192(sp)
   44088:	d9812785 	stb	r6,1182(sp)
   4408c:	5080080c 	andi	r2,r10,32
   44090:	1002df26 	beq	r2,zero,44c10 <___vfprintf_internal_r+0x17ec>
   44094:	da812f17 	ldw	r10,1212(sp)
   44098:	50800017 	ldw	r2,0(r10)
   4409c:	da813117 	ldw	r10,1220(sp)
   440a0:	5007d7fa 	srai	r3,r10,31
   440a4:	da812f17 	ldw	r10,1212(sp)
   440a8:	10c00115 	stw	r3,4(r2)
   440ac:	52800104 	addi	r10,r10,4
   440b0:	da812f15 	stw	r10,1212(sp)
   440b4:	da813117 	ldw	r10,1220(sp)
   440b8:	12800015 	stw	r10,0(r2)
   440bc:	003d1806 	br	43520 <___vfprintf_internal_r+0xfc>
   440c0:	da812f17 	ldw	r10,1212(sp)
   440c4:	d8012785 	stb	zero,1182(sp)
   440c8:	54000017 	ldw	r16,0(r10)
   440cc:	55400104 	addi	r21,r10,4
   440d0:	8003c926 	beq	r16,zero,44ff8 <___vfprintf_internal_r+0x1bd4>
   440d4:	8009883a 	mov	r4,r16
   440d8:	a0039616 	blt	r20,zero,44f34 <___vfprintf_internal_r+0x1b10>
   440dc:	000b883a 	mov	r5,zero
   440e0:	a00d883a 	mov	r6,r20
   440e4:	da013f15 	stw	r8,1276(sp)
   440e8:	00488040 	call	48804 <memchr>
   440ec:	da013f17 	ldw	r8,1276(sp)
   440f0:	10043126 	beq	r2,zero,451b8 <___vfprintf_internal_r+0x1d94>
   440f4:	1405c83a 	sub	r2,r2,r16
   440f8:	d8812e15 	stw	r2,1208(sp)
   440fc:	a0834e16 	blt	r20,r2,44e38 <___vfprintf_internal_r+0x1a14>
   44100:	d8812e17 	ldw	r2,1208(sp)
   44104:	10039016 	blt	r2,zero,44f48 <___vfprintf_internal_r+0x1b24>
   44108:	df012783 	ldbu	fp,1182(sp)
   4410c:	d8812b15 	stw	r2,1196(sp)
   44110:	dd412f15 	stw	r21,1212(sp)
   44114:	0029883a 	mov	r20,zero
   44118:	d8013315 	stw	zero,1228(sp)
   4411c:	003db206 	br	437e8 <___vfprintf_internal_r+0x3c4>
   44120:	da812a17 	ldw	r10,1192(sp)
   44124:	52800214 	ori	r10,r10,8
   44128:	da812a15 	stw	r10,1192(sp)
   4412c:	8c800007 	ldb	r18,0(r17)
   44130:	003d2206 	br	435bc <___vfprintf_internal_r+0x198>
   44134:	da812f17 	ldw	r10,1212(sp)
   44138:	00c00044 	movi	r3,1
   4413c:	d8c12b15 	stw	r3,1196(sp)
   44140:	50800017 	ldw	r2,0(r10)
   44144:	52800104 	addi	r10,r10,4
   44148:	d8012785 	stb	zero,1182(sp)
   4414c:	d8810405 	stb	r2,1040(sp)
   44150:	da812f15 	stw	r10,1212(sp)
   44154:	d8c12e15 	stw	r3,1208(sp)
   44158:	0029883a 	mov	r20,zero
   4415c:	d8013315 	stw	zero,1228(sp)
   44160:	dc010404 	addi	r16,sp,1040
   44164:	0005883a 	mov	r2,zero
   44168:	003da606 	br	43804 <___vfprintf_internal_r+0x3e0>
   4416c:	8c800007 	ldb	r18,0(r17)
   44170:	89400044 	addi	r5,r17,1
   44174:	92448326 	beq	r18,r9,45384 <___vfprintf_internal_r+0x1f60>
   44178:	90bff404 	addi	r2,r18,-48
   4417c:	2823883a 	mov	r17,r5
   44180:	0029883a 	mov	r20,zero
   44184:	20bd0e36 	bltu	r4,r2,435c0 <___vfprintf_internal_r+0x19c>
   44188:	8c800007 	ldb	r18,0(r17)
   4418c:	a50002a4 	muli	r20,r20,10
   44190:	8c400044 	addi	r17,r17,1
   44194:	1529883a 	add	r20,r2,r20
   44198:	90bff404 	addi	r2,r18,-48
   4419c:	20bffa2e 	bgeu	r4,r2,44188 <___vfprintf_internal_r+0xd64>
   441a0:	a03d070e 	bge	r20,zero,435c0 <___vfprintf_internal_r+0x19c>
   441a4:	053fffc4 	movi	r20,-1
   441a8:	003d0506 	br	435c0 <___vfprintf_internal_r+0x19c>
   441ac:	d9812785 	stb	r6,1182(sp)
   441b0:	903ed426 	beq	r18,zero,43d04 <___vfprintf_internal_r+0x8e0>
   441b4:	00c00044 	movi	r3,1
   441b8:	d8c12b15 	stw	r3,1196(sp)
   441bc:	dc810405 	stb	r18,1040(sp)
   441c0:	d8012785 	stb	zero,1182(sp)
   441c4:	003fe306 	br	44154 <___vfprintf_internal_r+0xd30>
   441c8:	d8c12017 	ldw	r3,1152(sp)
   441cc:	003dd006 	br	43910 <___vfprintf_internal_r+0x4ec>
   441d0:	45400015 	stw	r21,0(r8)
   441d4:	44000115 	stw	r16,4(r8)
   441d8:	1c07883a 	add	r3,r3,r16
   441dc:	10800044 	addi	r2,r2,1
   441e0:	d8c12015 	stw	r3,1152(sp)
   441e4:	d8811f15 	stw	r2,1148(sp)
   441e8:	010001c4 	movi	r4,7
   441ec:	20be230e 	bge	r4,r2,43a7c <___vfprintf_internal_r+0x658>
   441f0:	d9012c17 	ldw	r4,1200(sp)
   441f4:	b80b883a 	mov	r5,r23
   441f8:	d9811e04 	addi	r6,sp,1144
   441fc:	004a52c0 	call	4a52c <__sprint_r>
   44200:	103ec61e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44204:	d8c12017 	ldw	r3,1152(sp)
   44208:	da000404 	addi	r8,sp,16
   4420c:	003e1c06 	br	43a80 <___vfprintf_internal_r+0x65c>
   44210:	18803fcc 	andi	r2,r3,255
   44214:	00c00044 	movi	r3,1
   44218:	10c11a26 	beq	r2,r3,44684 <___vfprintf_internal_r+0x1260>
   4421c:	00c00084 	movi	r3,2
   44220:	10c0e51e 	bne	r2,r3,445b8 <___vfprintf_internal_r+0x1194>
   44224:	d9413b17 	ldw	r5,1260(sp)
   44228:	d8c10dc4 	addi	r3,sp,1079
   4422c:	a88003cc 	andi	r2,r21,15
   44230:	b008973a 	slli	r4,r22,28
   44234:	2885883a 	add	r2,r5,r2
   44238:	a82ad13a 	srli	r21,r21,4
   4423c:	10800003 	ldbu	r2,0(r2)
   44240:	b02cd13a 	srli	r22,r22,4
   44244:	256ab03a 	or	r21,r4,r21
   44248:	18800005 	stb	r2,0(r3)
   4424c:	ad84b03a 	or	r2,r21,r22
   44250:	1821883a 	mov	r16,r3
   44254:	18ffffc4 	addi	r3,r3,-1
   44258:	103ff41e 	bne	r2,zero,4422c <___vfprintf_internal_r+0xe08>
   4425c:	da812917 	ldw	r10,1188(sp)
   44260:	5415c83a 	sub	r10,r10,r16
   44264:	da812e15 	stw	r10,1208(sp)
   44268:	003d5a06 	br	437d4 <___vfprintf_internal_r+0x3b0>
   4426c:	00801944 	movi	r2,101
   44270:	14807e0e 	bge	r2,r18,4446c <___vfprintf_internal_r+0x1048>
   44274:	d9013717 	ldw	r4,1244(sp)
   44278:	d9413917 	ldw	r5,1252(sp)
   4427c:	000d883a 	mov	r6,zero
   44280:	000f883a 	mov	r7,zero
   44284:	d8c13e15 	stw	r3,1272(sp)
   44288:	da013f15 	stw	r8,1276(sp)
   4428c:	004cd400 	call	4cd40 <__eqdf2>
   44290:	d8c13e17 	ldw	r3,1272(sp)
   44294:	da013f17 	ldw	r8,1276(sp)
   44298:	1001221e 	bne	r2,zero,44724 <___vfprintf_internal_r+0x1300>
   4429c:	d8811f17 	ldw	r2,1148(sp)
   442a0:	01000174 	movhi	r4,5
   442a4:	213fa704 	addi	r4,r4,-356
   442a8:	18c00044 	addi	r3,r3,1
   442ac:	10800044 	addi	r2,r2,1
   442b0:	41000015 	stw	r4,0(r8)
   442b4:	01000044 	movi	r4,1
   442b8:	41000115 	stw	r4,4(r8)
   442bc:	d8c12015 	stw	r3,1152(sp)
   442c0:	d8811f15 	stw	r2,1148(sp)
   442c4:	010001c4 	movi	r4,7
   442c8:	20829616 	blt	r4,r2,44d24 <___vfprintf_internal_r+0x1900>
   442cc:	42000204 	addi	r8,r8,8
   442d0:	d8812617 	ldw	r2,1176(sp)
   442d4:	da813517 	ldw	r10,1236(sp)
   442d8:	12800316 	blt	r2,r10,442e8 <___vfprintf_internal_r+0xec4>
   442dc:	da812a17 	ldw	r10,1192(sp)
   442e0:	5080004c 	andi	r2,r10,1
   442e4:	103de626 	beq	r2,zero,43a80 <___vfprintf_internal_r+0x65c>
   442e8:	da813817 	ldw	r10,1248(sp)
   442ec:	d8811f17 	ldw	r2,1148(sp)
   442f0:	010001c4 	movi	r4,7
   442f4:	1a87883a 	add	r3,r3,r10
   442f8:	da813417 	ldw	r10,1232(sp)
   442fc:	10800044 	addi	r2,r2,1
   44300:	d8c12015 	stw	r3,1152(sp)
   44304:	42800015 	stw	r10,0(r8)
   44308:	da813817 	ldw	r10,1248(sp)
   4430c:	d8811f15 	stw	r2,1148(sp)
   44310:	42800115 	stw	r10,4(r8)
   44314:	2082f216 	blt	r4,r2,44ee0 <___vfprintf_internal_r+0x1abc>
   44318:	42000204 	addi	r8,r8,8
   4431c:	da813517 	ldw	r10,1236(sp)
   44320:	543fffc4 	addi	r16,r10,-1
   44324:	043dd60e 	bge	zero,r16,43a80 <___vfprintf_internal_r+0x65c>
   44328:	04800404 	movi	r18,16
   4432c:	d8811f17 	ldw	r2,1148(sp)
   44330:	05400174 	movhi	r21,5
   44334:	ad7fa784 	addi	r21,r21,-354
   44338:	943fa50e 	bge	r18,r16,441d0 <___vfprintf_internal_r+0xdac>
   4433c:	050001c4 	movi	r20,7
   44340:	dd812c17 	ldw	r22,1200(sp)
   44344:	00000306 	br	44354 <___vfprintf_internal_r+0xf30>
   44348:	42000204 	addi	r8,r8,8
   4434c:	843ffc04 	addi	r16,r16,-16
   44350:	943f9f0e 	bge	r18,r16,441d0 <___vfprintf_internal_r+0xdac>
   44354:	18c00404 	addi	r3,r3,16
   44358:	10800044 	addi	r2,r2,1
   4435c:	44c00015 	stw	r19,0(r8)
   44360:	44800115 	stw	r18,4(r8)
   44364:	d8c12015 	stw	r3,1152(sp)
   44368:	d8811f15 	stw	r2,1148(sp)
   4436c:	a0bff60e 	bge	r20,r2,44348 <___vfprintf_internal_r+0xf24>
   44370:	b009883a 	mov	r4,r22
   44374:	b80b883a 	mov	r5,r23
   44378:	d9811e04 	addi	r6,sp,1144
   4437c:	004a52c0 	call	4a52c <__sprint_r>
   44380:	103e661e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44384:	d8c12017 	ldw	r3,1152(sp)
   44388:	d8811f17 	ldw	r2,1148(sp)
   4438c:	da000404 	addi	r8,sp,16
   44390:	003fee06 	br	4434c <___vfprintf_internal_r+0xf28>
   44394:	da813017 	ldw	r10,1216(sp)
   44398:	d8812b17 	ldw	r2,1196(sp)
   4439c:	50adc83a 	sub	r22,r10,r2
   443a0:	05bd790e 	bge	zero,r22,43988 <___vfprintf_internal_r+0x564>
   443a4:	07000404 	movi	fp,16
   443a8:	d8811f17 	ldw	r2,1148(sp)
   443ac:	05400174 	movhi	r21,5
   443b0:	ad7fa784 	addi	r21,r21,-354
   443b4:	e580230e 	bge	fp,r22,44444 <___vfprintf_internal_r+0x1020>
   443b8:	a809883a 	mov	r4,r21
   443bc:	dc012d15 	stw	r16,1204(sp)
   443c0:	882b883a 	mov	r21,r17
   443c4:	01c001c4 	movi	r7,7
   443c8:	b023883a 	mov	r17,r22
   443cc:	dc012c17 	ldw	r16,1200(sp)
   443d0:	202d883a 	mov	r22,r4
   443d4:	00000306 	br	443e4 <___vfprintf_internal_r+0xfc0>
   443d8:	8c7ffc04 	addi	r17,r17,-16
   443dc:	42000204 	addi	r8,r8,8
   443e0:	e440130e 	bge	fp,r17,44430 <___vfprintf_internal_r+0x100c>
   443e4:	18c00404 	addi	r3,r3,16
   443e8:	10800044 	addi	r2,r2,1
   443ec:	44c00015 	stw	r19,0(r8)
   443f0:	47000115 	stw	fp,4(r8)
   443f4:	d8c12015 	stw	r3,1152(sp)
   443f8:	d8811f15 	stw	r2,1148(sp)
   443fc:	38bff60e 	bge	r7,r2,443d8 <___vfprintf_internal_r+0xfb4>
   44400:	8009883a 	mov	r4,r16
   44404:	b80b883a 	mov	r5,r23
   44408:	d9811e04 	addi	r6,sp,1144
   4440c:	d9c13e15 	stw	r7,1272(sp)
   44410:	004a52c0 	call	4a52c <__sprint_r>
   44414:	d9c13e17 	ldw	r7,1272(sp)
   44418:	103e401e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   4441c:	8c7ffc04 	addi	r17,r17,-16
   44420:	d8c12017 	ldw	r3,1152(sp)
   44424:	d8811f17 	ldw	r2,1148(sp)
   44428:	da000404 	addi	r8,sp,16
   4442c:	e47fed16 	blt	fp,r17,443e4 <___vfprintf_internal_r+0xfc0>
   44430:	dc012d17 	ldw	r16,1204(sp)
   44434:	b009883a 	mov	r4,r22
   44438:	882d883a 	mov	r22,r17
   4443c:	a823883a 	mov	r17,r21
   44440:	202b883a 	mov	r21,r4
   44444:	1d87883a 	add	r3,r3,r22
   44448:	10800044 	addi	r2,r2,1
   4444c:	45400015 	stw	r21,0(r8)
   44450:	45800115 	stw	r22,4(r8)
   44454:	d8c12015 	stw	r3,1152(sp)
   44458:	d8811f15 	stw	r2,1148(sp)
   4445c:	010001c4 	movi	r4,7
   44460:	20817a16 	blt	r4,r2,44a4c <___vfprintf_internal_r+0x1628>
   44464:	42000204 	addi	r8,r8,8
   44468:	003d4706 	br	43988 <___vfprintf_internal_r+0x564>
   4446c:	da813517 	ldw	r10,1236(sp)
   44470:	00800044 	movi	r2,1
   44474:	1280350e 	bge	r2,r10,4454c <___vfprintf_internal_r+0x1128>
   44478:	dc811f17 	ldw	r18,1148(sp)
   4447c:	00800044 	movi	r2,1
   44480:	18c00044 	addi	r3,r3,1
   44484:	94800044 	addi	r18,r18,1
   44488:	40800115 	stw	r2,4(r8)
   4448c:	44000015 	stw	r16,0(r8)
   44490:	d8c12015 	stw	r3,1152(sp)
   44494:	dc811f15 	stw	r18,1148(sp)
   44498:	008001c4 	movi	r2,7
   4449c:	14814e16 	blt	r2,r18,449d8 <___vfprintf_internal_r+0x15b4>
   444a0:	42000204 	addi	r8,r8,8
   444a4:	da813817 	ldw	r10,1248(sp)
   444a8:	94800044 	addi	r18,r18,1
   444ac:	dc811f15 	stw	r18,1148(sp)
   444b0:	1aad883a 	add	r22,r3,r10
   444b4:	da813417 	ldw	r10,1232(sp)
   444b8:	dd812015 	stw	r22,1152(sp)
   444bc:	008001c4 	movi	r2,7
   444c0:	42800015 	stw	r10,0(r8)
   444c4:	da813817 	ldw	r10,1248(sp)
   444c8:	42800115 	stw	r10,4(r8)
   444cc:	14814b16 	blt	r2,r18,449fc <___vfprintf_internal_r+0x15d8>
   444d0:	45000204 	addi	r20,r8,8
   444d4:	d9013717 	ldw	r4,1244(sp)
   444d8:	d9413917 	ldw	r5,1252(sp)
   444dc:	000d883a 	mov	r6,zero
   444e0:	000f883a 	mov	r7,zero
   444e4:	004cd400 	call	4cd40 <__eqdf2>
   444e8:	da813517 	ldw	r10,1236(sp)
   444ec:	1000cc26 	beq	r2,zero,44820 <___vfprintf_internal_r+0x13fc>
   444f0:	50bfffc4 	addi	r2,r10,-1
   444f4:	b0ad883a 	add	r22,r22,r2
   444f8:	84000044 	addi	r16,r16,1
   444fc:	94800044 	addi	r18,r18,1
   44500:	a0800115 	stw	r2,4(r20)
   44504:	a4000015 	stw	r16,0(r20)
   44508:	dd812015 	stw	r22,1152(sp)
   4450c:	dc811f15 	stw	r18,1148(sp)
   44510:	008001c4 	movi	r2,7
   44514:	14801916 	blt	r2,r18,4457c <___vfprintf_internal_r+0x1158>
   44518:	a5000204 	addi	r20,r20,8
   4451c:	da813a17 	ldw	r10,1256(sp)
   44520:	d88122c4 	addi	r2,sp,1163
   44524:	94800044 	addi	r18,r18,1
   44528:	5587883a 	add	r3,r10,r22
   4452c:	a0800015 	stw	r2,0(r20)
   44530:	a2800115 	stw	r10,4(r20)
   44534:	d8c12015 	stw	r3,1152(sp)
   44538:	dc811f15 	stw	r18,1148(sp)
   4453c:	008001c4 	movi	r2,7
   44540:	14bf2b16 	blt	r2,r18,441f0 <___vfprintf_internal_r+0xdcc>
   44544:	a2000204 	addi	r8,r20,8
   44548:	003d4d06 	br	43a80 <___vfprintf_internal_r+0x65c>
   4454c:	da812a17 	ldw	r10,1192(sp)
   44550:	5088703a 	and	r4,r10,r2
   44554:	203fc81e 	bne	r4,zero,44478 <___vfprintf_internal_r+0x1054>
   44558:	dc811f17 	ldw	r18,1148(sp)
   4455c:	1d800044 	addi	r22,r3,1
   44560:	40800115 	stw	r2,4(r8)
   44564:	94800044 	addi	r18,r18,1
   44568:	44000015 	stw	r16,0(r8)
   4456c:	dd812015 	stw	r22,1152(sp)
   44570:	dc811f15 	stw	r18,1148(sp)
   44574:	008001c4 	movi	r2,7
   44578:	1482480e 	bge	r2,r18,44e9c <___vfprintf_internal_r+0x1a78>
   4457c:	d9012c17 	ldw	r4,1200(sp)
   44580:	b80b883a 	mov	r5,r23
   44584:	d9811e04 	addi	r6,sp,1144
   44588:	004a52c0 	call	4a52c <__sprint_r>
   4458c:	103de31e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44590:	dd812017 	ldw	r22,1152(sp)
   44594:	dc811f17 	ldw	r18,1148(sp)
   44598:	dd000404 	addi	r20,sp,16
   4459c:	003fdf06 	br	4451c <___vfprintf_internal_r+0x10f8>
   445a0:	d9012c17 	ldw	r4,1200(sp)
   445a4:	b80b883a 	mov	r5,r23
   445a8:	d9811e04 	addi	r6,sp,1144
   445ac:	004a52c0 	call	4a52c <__sprint_r>
   445b0:	103d7026 	beq	r2,zero,43b74 <___vfprintf_internal_r+0x750>
   445b4:	003dd906 	br	43d1c <___vfprintf_internal_r+0x8f8>
   445b8:	d8c10dc4 	addi	r3,sp,1079
   445bc:	a808d0fa 	srli	r4,r21,3
   445c0:	b00a977a 	slli	r5,r22,29
   445c4:	b02cd0fa 	srli	r22,r22,3
   445c8:	ad4001cc 	andi	r21,r21,7
   445cc:	a8800c04 	addi	r2,r21,48
   445d0:	292ab03a 	or	r21,r5,r4
   445d4:	18800005 	stb	r2,0(r3)
   445d8:	ad88b03a 	or	r4,r21,r22
   445dc:	1821883a 	mov	r16,r3
   445e0:	18ffffc4 	addi	r3,r3,-1
   445e4:	203ff51e 	bne	r4,zero,445bc <___vfprintf_internal_r+0x1198>
   445e8:	da812a17 	ldw	r10,1192(sp)
   445ec:	800b883a 	mov	r5,r16
   445f0:	5100004c 	andi	r4,r10,1
   445f4:	20000726 	beq	r4,zero,44614 <___vfprintf_internal_r+0x11f0>
   445f8:	10803fcc 	andi	r2,r2,255
   445fc:	1080201c 	xori	r2,r2,128
   44600:	10bfe004 	addi	r2,r2,-128
   44604:	01000c04 	movi	r4,48
   44608:	113f1426 	beq	r2,r4,4425c <___vfprintf_internal_r+0xe38>
   4460c:	1821883a 	mov	r16,r3
   44610:	293fffc5 	stb	r4,-1(r5)
   44614:	d8c12917 	ldw	r3,1188(sp)
   44618:	1c07c83a 	sub	r3,r3,r16
   4461c:	d8c12e15 	stw	r3,1208(sp)
   44620:	003c6c06 	br	437d4 <___vfprintf_internal_r+0x3b0>
   44624:	d9012c17 	ldw	r4,1200(sp)
   44628:	b80b883a 	mov	r5,r23
   4462c:	d9811e04 	addi	r6,sp,1144
   44630:	004a52c0 	call	4a52c <__sprint_r>
   44634:	103db91e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44638:	d8c12017 	ldw	r3,1152(sp)
   4463c:	da000404 	addi	r8,sp,16
   44640:	003d0106 	br	43a48 <___vfprintf_internal_r+0x624>
   44644:	d9012c17 	ldw	r4,1200(sp)
   44648:	b80b883a 	mov	r5,r23
   4464c:	d9811e04 	addi	r6,sp,1144
   44650:	004a52c0 	call	4a52c <__sprint_r>
   44654:	103db11e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44658:	d8c12017 	ldw	r3,1152(sp)
   4465c:	da000404 	addi	r8,sp,16
   44660:	003cb806 	br	43944 <___vfprintf_internal_r+0x520>
   44664:	d9012c17 	ldw	r4,1200(sp)
   44668:	b80b883a 	mov	r5,r23
   4466c:	d9811e04 	addi	r6,sp,1144
   44670:	004a52c0 	call	4a52c <__sprint_r>
   44674:	103da91e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44678:	d8c12017 	ldw	r3,1152(sp)
   4467c:	da000404 	addi	r8,sp,16
   44680:	003cbe06 	br	4397c <___vfprintf_internal_r+0x558>
   44684:	b000021e 	bne	r22,zero,44690 <___vfprintf_internal_r+0x126c>
   44688:	00800244 	movi	r2,9
   4468c:	15401c2e 	bgeu	r2,r21,44700 <___vfprintf_internal_r+0x12dc>
   44690:	dc412b15 	stw	r17,1196(sp)
   44694:	d8810dc4 	addi	r2,sp,1079
   44698:	b023883a 	mov	r17,r22
   4469c:	402d883a 	mov	r22,r8
   446a0:	a809883a 	mov	r4,r21
   446a4:	880b883a 	mov	r5,r17
   446a8:	01800284 	movi	r6,10
   446ac:	000f883a 	mov	r7,zero
   446b0:	1021883a 	mov	r16,r2
   446b4:	004c7a80 	call	4c7a8 <__umoddi3>
   446b8:	10800c04 	addi	r2,r2,48
   446bc:	a809883a 	mov	r4,r21
   446c0:	880b883a 	mov	r5,r17
   446c4:	80800005 	stb	r2,0(r16)
   446c8:	01800284 	movi	r6,10
   446cc:	000f883a 	mov	r7,zero
   446d0:	004c1e40 	call	4c1e4 <__udivdi3>
   446d4:	1823883a 	mov	r17,r3
   446d8:	10c6b03a 	or	r3,r2,r3
   446dc:	102b883a 	mov	r21,r2
   446e0:	80bfffc4 	addi	r2,r16,-1
   446e4:	183fee1e 	bne	r3,zero,446a0 <___vfprintf_internal_r+0x127c>
   446e8:	d8c12917 	ldw	r3,1188(sp)
   446ec:	b011883a 	mov	r8,r22
   446f0:	dc412b17 	ldw	r17,1196(sp)
   446f4:	1c07c83a 	sub	r3,r3,r16
   446f8:	d8c12e15 	stw	r3,1208(sp)
   446fc:	003c3506 	br	437d4 <___vfprintf_internal_r+0x3b0>
   44700:	da813d17 	ldw	r10,1268(sp)
   44704:	ad400c04 	addi	r21,r21,48
   44708:	dd410dc5 	stb	r21,1079(sp)
   4470c:	da812e15 	stw	r10,1208(sp)
   44710:	dc010dc4 	addi	r16,sp,1079
   44714:	003c2f06 	br	437d4 <___vfprintf_internal_r+0x3b0>
   44718:	d8012e15 	stw	zero,1208(sp)
   4471c:	dc010e04 	addi	r16,sp,1080
   44720:	003c2c06 	br	437d4 <___vfprintf_internal_r+0x3b0>
   44724:	d8812617 	ldw	r2,1176(sp)
   44728:	0081860e 	bge	zero,r2,44d44 <___vfprintf_internal_r+0x1920>
   4472c:	da813517 	ldw	r10,1236(sp)
   44730:	82a5883a 	add	r18,r16,r10
   44734:	da813317 	ldw	r10,1228(sp)
   44738:	9429c83a 	sub	r20,r18,r16
   4473c:	5500010e 	bge	r10,r20,44744 <___vfprintf_internal_r+0x1320>
   44740:	5029883a 	mov	r20,r10
   44744:	05000a0e 	bge	zero,r20,44770 <___vfprintf_internal_r+0x134c>
   44748:	d8811f17 	ldw	r2,1148(sp)
   4474c:	1d07883a 	add	r3,r3,r20
   44750:	44000015 	stw	r16,0(r8)
   44754:	10800044 	addi	r2,r2,1
   44758:	45000115 	stw	r20,4(r8)
   4475c:	d8c12015 	stw	r3,1152(sp)
   44760:	d8811f15 	stw	r2,1148(sp)
   44764:	010001c4 	movi	r4,7
   44768:	2081fb16 	blt	r4,r2,44f58 <___vfprintf_internal_r+0x1b34>
   4476c:	42000204 	addi	r8,r8,8
   44770:	a001f716 	blt	r20,zero,44f50 <___vfprintf_internal_r+0x1b2c>
   44774:	da813317 	ldw	r10,1228(sp)
   44778:	5529c83a 	sub	r20,r10,r20
   4477c:	0500520e 	bge	zero,r20,448c8 <___vfprintf_internal_r+0x14a4>
   44780:	05800404 	movi	r22,16
   44784:	d8811f17 	ldw	r2,1148(sp)
   44788:	05400174 	movhi	r21,5
   4478c:	ad7fa784 	addi	r21,r21,-354
   44790:	b5015a0e 	bge	r22,r20,44cfc <___vfprintf_internal_r+0x18d8>
   44794:	8809883a 	mov	r4,r17
   44798:	dc012e15 	stw	r16,1208(sp)
   4479c:	a023883a 	mov	r17,r20
   447a0:	070001c4 	movi	fp,7
   447a4:	dc012c17 	ldw	r16,1200(sp)
   447a8:	2029883a 	mov	r20,r4
   447ac:	00000306 	br	447bc <___vfprintf_internal_r+0x1398>
   447b0:	42000204 	addi	r8,r8,8
   447b4:	8c7ffc04 	addi	r17,r17,-16
   447b8:	b4414c0e 	bge	r22,r17,44cec <___vfprintf_internal_r+0x18c8>
   447bc:	18c00404 	addi	r3,r3,16
   447c0:	10800044 	addi	r2,r2,1
   447c4:	44c00015 	stw	r19,0(r8)
   447c8:	45800115 	stw	r22,4(r8)
   447cc:	d8c12015 	stw	r3,1152(sp)
   447d0:	d8811f15 	stw	r2,1148(sp)
   447d4:	e0bff60e 	bge	fp,r2,447b0 <___vfprintf_internal_r+0x138c>
   447d8:	8009883a 	mov	r4,r16
   447dc:	b80b883a 	mov	r5,r23
   447e0:	d9811e04 	addi	r6,sp,1144
   447e4:	004a52c0 	call	4a52c <__sprint_r>
   447e8:	103d4c1e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   447ec:	d8c12017 	ldw	r3,1152(sp)
   447f0:	d8811f17 	ldw	r2,1148(sp)
   447f4:	da000404 	addi	r8,sp,16
   447f8:	003fee06 	br	447b4 <___vfprintf_internal_r+0x1390>
   447fc:	d9012c17 	ldw	r4,1200(sp)
   44800:	b80b883a 	mov	r5,r23
   44804:	d9811e04 	addi	r6,sp,1144
   44808:	004a52c0 	call	4a52c <__sprint_r>
   4480c:	103d431e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44810:	d8c12017 	ldw	r3,1152(sp)
   44814:	d8812787 	ldb	r2,1182(sp)
   44818:	da000404 	addi	r8,sp,16
   4481c:	003c3c06 	br	43910 <___vfprintf_internal_r+0x4ec>
   44820:	543fffc4 	addi	r16,r10,-1
   44824:	043f3d0e 	bge	zero,r16,4451c <___vfprintf_internal_r+0x10f8>
   44828:	07000404 	movi	fp,16
   4482c:	05400174 	movhi	r21,5
   44830:	ad7fa784 	addi	r21,r21,-354
   44834:	e4007c0e 	bge	fp,r16,44a28 <___vfprintf_internal_r+0x1604>
   44838:	dc412e15 	stw	r17,1208(sp)
   4483c:	00c001c4 	movi	r3,7
   44840:	8023883a 	mov	r17,r16
   44844:	dc012c17 	ldw	r16,1200(sp)
   44848:	00000306 	br	44858 <___vfprintf_internal_r+0x1434>
   4484c:	a5000204 	addi	r20,r20,8
   44850:	8c7ffc04 	addi	r17,r17,-16
   44854:	e440720e 	bge	fp,r17,44a20 <___vfprintf_internal_r+0x15fc>
   44858:	b5800404 	addi	r22,r22,16
   4485c:	94800044 	addi	r18,r18,1
   44860:	a4c00015 	stw	r19,0(r20)
   44864:	a7000115 	stw	fp,4(r20)
   44868:	dd812015 	stw	r22,1152(sp)
   4486c:	dc811f15 	stw	r18,1148(sp)
   44870:	1cbff60e 	bge	r3,r18,4484c <___vfprintf_internal_r+0x1428>
   44874:	8009883a 	mov	r4,r16
   44878:	b80b883a 	mov	r5,r23
   4487c:	d9811e04 	addi	r6,sp,1144
   44880:	d8c13e15 	stw	r3,1272(sp)
   44884:	004a52c0 	call	4a52c <__sprint_r>
   44888:	d8c13e17 	ldw	r3,1272(sp)
   4488c:	103d231e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44890:	dd812017 	ldw	r22,1152(sp)
   44894:	dc811f17 	ldw	r18,1148(sp)
   44898:	dd000404 	addi	r20,sp,16
   4489c:	003fec06 	br	44850 <___vfprintf_internal_r+0x142c>
   448a0:	00c00084 	movi	r3,2
   448a4:	ad84b03a 	or	r2,r21,r22
   448a8:	003cc506 	br	43bc0 <___vfprintf_internal_r+0x79c>
   448ac:	d9012c17 	ldw	r4,1200(sp)
   448b0:	b80b883a 	mov	r5,r23
   448b4:	d9811e04 	addi	r6,sp,1144
   448b8:	004a52c0 	call	4a52c <__sprint_r>
   448bc:	103d171e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   448c0:	d8c12017 	ldw	r3,1152(sp)
   448c4:	da000404 	addi	r8,sp,16
   448c8:	da813317 	ldw	r10,1228(sp)
   448cc:	d8812617 	ldw	r2,1176(sp)
   448d0:	82a1883a 	add	r16,r16,r10
   448d4:	da813517 	ldw	r10,1236(sp)
   448d8:	12800316 	blt	r2,r10,448e8 <___vfprintf_internal_r+0x14c4>
   448dc:	da812a17 	ldw	r10,1192(sp)
   448e0:	5100004c 	andi	r4,r10,1
   448e4:	20000d26 	beq	r4,zero,4491c <___vfprintf_internal_r+0x14f8>
   448e8:	da813817 	ldw	r10,1248(sp)
   448ec:	d9011f17 	ldw	r4,1148(sp)
   448f0:	014001c4 	movi	r5,7
   448f4:	1a87883a 	add	r3,r3,r10
   448f8:	da813417 	ldw	r10,1232(sp)
   448fc:	21000044 	addi	r4,r4,1
   44900:	d8c12015 	stw	r3,1152(sp)
   44904:	42800015 	stw	r10,0(r8)
   44908:	da813817 	ldw	r10,1248(sp)
   4490c:	d9011f15 	stw	r4,1148(sp)
   44910:	42800115 	stw	r10,4(r8)
   44914:	2901a216 	blt	r5,r4,44fa0 <___vfprintf_internal_r+0x1b7c>
   44918:	42000204 	addi	r8,r8,8
   4491c:	da813517 	ldw	r10,1236(sp)
   44920:	9425c83a 	sub	r18,r18,r16
   44924:	5085c83a 	sub	r2,r10,r2
   44928:	1029883a 	mov	r20,r2
   4492c:	9080010e 	bge	r18,r2,44934 <___vfprintf_internal_r+0x1510>
   44930:	9029883a 	mov	r20,r18
   44934:	05000a0e 	bge	zero,r20,44960 <___vfprintf_internal_r+0x153c>
   44938:	d9011f17 	ldw	r4,1148(sp)
   4493c:	1d07883a 	add	r3,r3,r20
   44940:	44000015 	stw	r16,0(r8)
   44944:	21000044 	addi	r4,r4,1
   44948:	45000115 	stw	r20,4(r8)
   4494c:	d8c12015 	stw	r3,1152(sp)
   44950:	d9011f15 	stw	r4,1148(sp)
   44954:	014001c4 	movi	r5,7
   44958:	29019c16 	blt	r5,r4,44fcc <___vfprintf_internal_r+0x1ba8>
   4495c:	42000204 	addi	r8,r8,8
   44960:	a0019816 	blt	r20,zero,44fc4 <___vfprintf_internal_r+0x1ba0>
   44964:	1521c83a 	sub	r16,r2,r20
   44968:	043c450e 	bge	zero,r16,43a80 <___vfprintf_internal_r+0x65c>
   4496c:	04800404 	movi	r18,16
   44970:	d8811f17 	ldw	r2,1148(sp)
   44974:	05400174 	movhi	r21,5
   44978:	ad7fa784 	addi	r21,r21,-354
   4497c:	943e140e 	bge	r18,r16,441d0 <___vfprintf_internal_r+0xdac>
   44980:	050001c4 	movi	r20,7
   44984:	dd812c17 	ldw	r22,1200(sp)
   44988:	00000306 	br	44998 <___vfprintf_internal_r+0x1574>
   4498c:	42000204 	addi	r8,r8,8
   44990:	843ffc04 	addi	r16,r16,-16
   44994:	943e0e0e 	bge	r18,r16,441d0 <___vfprintf_internal_r+0xdac>
   44998:	18c00404 	addi	r3,r3,16
   4499c:	10800044 	addi	r2,r2,1
   449a0:	44c00015 	stw	r19,0(r8)
   449a4:	44800115 	stw	r18,4(r8)
   449a8:	d8c12015 	stw	r3,1152(sp)
   449ac:	d8811f15 	stw	r2,1148(sp)
   449b0:	a0bff60e 	bge	r20,r2,4498c <___vfprintf_internal_r+0x1568>
   449b4:	b009883a 	mov	r4,r22
   449b8:	b80b883a 	mov	r5,r23
   449bc:	d9811e04 	addi	r6,sp,1144
   449c0:	004a52c0 	call	4a52c <__sprint_r>
   449c4:	103cd51e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   449c8:	d8c12017 	ldw	r3,1152(sp)
   449cc:	d8811f17 	ldw	r2,1148(sp)
   449d0:	da000404 	addi	r8,sp,16
   449d4:	003fee06 	br	44990 <___vfprintf_internal_r+0x156c>
   449d8:	d9012c17 	ldw	r4,1200(sp)
   449dc:	b80b883a 	mov	r5,r23
   449e0:	d9811e04 	addi	r6,sp,1144
   449e4:	004a52c0 	call	4a52c <__sprint_r>
   449e8:	103ccc1e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   449ec:	d8c12017 	ldw	r3,1152(sp)
   449f0:	dc811f17 	ldw	r18,1148(sp)
   449f4:	da000404 	addi	r8,sp,16
   449f8:	003eaa06 	br	444a4 <___vfprintf_internal_r+0x1080>
   449fc:	d9012c17 	ldw	r4,1200(sp)
   44a00:	b80b883a 	mov	r5,r23
   44a04:	d9811e04 	addi	r6,sp,1144
   44a08:	004a52c0 	call	4a52c <__sprint_r>
   44a0c:	103cc31e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44a10:	dd812017 	ldw	r22,1152(sp)
   44a14:	dc811f17 	ldw	r18,1148(sp)
   44a18:	dd000404 	addi	r20,sp,16
   44a1c:	003ead06 	br	444d4 <___vfprintf_internal_r+0x10b0>
   44a20:	8821883a 	mov	r16,r17
   44a24:	dc412e17 	ldw	r17,1208(sp)
   44a28:	b42d883a 	add	r22,r22,r16
   44a2c:	94800044 	addi	r18,r18,1
   44a30:	a5400015 	stw	r21,0(r20)
   44a34:	a4000115 	stw	r16,4(r20)
   44a38:	dd812015 	stw	r22,1152(sp)
   44a3c:	dc811f15 	stw	r18,1148(sp)
   44a40:	008001c4 	movi	r2,7
   44a44:	14beb40e 	bge	r2,r18,44518 <___vfprintf_internal_r+0x10f4>
   44a48:	003ecc06 	br	4457c <___vfprintf_internal_r+0x1158>
   44a4c:	d9012c17 	ldw	r4,1200(sp)
   44a50:	b80b883a 	mov	r5,r23
   44a54:	d9811e04 	addi	r6,sp,1144
   44a58:	004a52c0 	call	4a52c <__sprint_r>
   44a5c:	103caf1e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44a60:	d8c12017 	ldw	r3,1152(sp)
   44a64:	da000404 	addi	r8,sp,16
   44a68:	003bc706 	br	43988 <___vfprintf_internal_r+0x564>
   44a6c:	056bc83a 	sub	r21,zero,r21
   44a70:	a804c03a 	cmpne	r2,r21,zero
   44a74:	05adc83a 	sub	r22,zero,r22
   44a78:	07000b44 	movi	fp,45
   44a7c:	b0adc83a 	sub	r22,r22,r2
   44a80:	df012785 	stb	fp,1182(sp)
   44a84:	00c00044 	movi	r3,1
   44a88:	ad84b03a 	or	r2,r21,r22
   44a8c:	003b4006 	br	43790 <___vfprintf_internal_r+0x36c>
   44a90:	da013f15 	stw	r8,1276(sp)
   44a94:	004a1840 	call	4a184 <__fpclassifyd>
   44a98:	da013f17 	ldw	r8,1276(sp)
   44a9c:	1000e826 	beq	r2,zero,44e40 <___vfprintf_internal_r+0x1a1c>
   44aa0:	05bff7c4 	movi	r22,-33
   44aa4:	00bfffc4 	movi	r2,-1
   44aa8:	95ac703a 	and	r22,r18,r22
   44aac:	a081d626 	beq	r20,r2,45208 <___vfprintf_internal_r+0x1de4>
   44ab0:	008011c4 	movi	r2,71
   44ab4:	b081d126 	beq	r22,r2,451fc <___vfprintf_internal_r+0x1dd8>
   44ab8:	d8c12a17 	ldw	r3,1192(sp)
   44abc:	da813917 	ldw	r10,1252(sp)
   44ac0:	18c04014 	ori	r3,r3,256
   44ac4:	d8c12d15 	stw	r3,1204(sp)
   44ac8:	5001d116 	blt	r10,zero,45210 <___vfprintf_internal_r+0x1dec>
   44acc:	dd413917 	ldw	r21,1252(sp)
   44ad0:	d8012b05 	stb	zero,1196(sp)
   44ad4:	00801984 	movi	r2,102
   44ad8:	90816926 	beq	r18,r2,45080 <___vfprintf_internal_r+0x1c5c>
   44adc:	00801184 	movi	r2,70
   44ae0:	90816726 	beq	r18,r2,45080 <___vfprintf_internal_r+0x1c5c>
   44ae4:	00801144 	movi	r2,69
   44ae8:	b081cd26 	beq	r22,r2,45220 <___vfprintf_internal_r+0x1dfc>
   44aec:	a039883a 	mov	fp,r20
   44af0:	d8812604 	addi	r2,sp,1176
   44af4:	d8800115 	stw	r2,4(sp)
   44af8:	d9012c17 	ldw	r4,1200(sp)
   44afc:	d8812504 	addi	r2,sp,1172
   44b00:	d9413717 	ldw	r5,1244(sp)
   44b04:	d8800215 	stw	r2,8(sp)
   44b08:	d8812104 	addi	r2,sp,1156
   44b0c:	df000015 	stw	fp,0(sp)
   44b10:	d8800315 	stw	r2,12(sp)
   44b14:	a80d883a 	mov	r6,r21
   44b18:	01c00084 	movi	r7,2
   44b1c:	da013f15 	stw	r8,1276(sp)
   44b20:	00457600 	call	45760 <_dtoa_r>
   44b24:	1021883a 	mov	r16,r2
   44b28:	008019c4 	movi	r2,103
   44b2c:	da013f17 	ldw	r8,1276(sp)
   44b30:	90800226 	beq	r18,r2,44b3c <___vfprintf_internal_r+0x1718>
   44b34:	008011c4 	movi	r2,71
   44b38:	9080031e 	bne	r18,r2,44b48 <___vfprintf_internal_r+0x1724>
   44b3c:	da812a17 	ldw	r10,1192(sp)
   44b40:	5080004c 	andi	r2,r10,1
   44b44:	1001e926 	beq	r2,zero,452ec <___vfprintf_internal_r+0x1ec8>
   44b48:	00801184 	movi	r2,70
   44b4c:	8713883a 	add	r9,r16,fp
   44b50:	b0815e26 	beq	r22,r2,450cc <___vfprintf_internal_r+0x1ca8>
   44b54:	d9013717 	ldw	r4,1244(sp)
   44b58:	a80b883a 	mov	r5,r21
   44b5c:	000d883a 	mov	r6,zero
   44b60:	000f883a 	mov	r7,zero
   44b64:	da013f15 	stw	r8,1276(sp)
   44b68:	da413e15 	stw	r9,1272(sp)
   44b6c:	004cd400 	call	4cd40 <__eqdf2>
   44b70:	da013f17 	ldw	r8,1276(sp)
   44b74:	da413e17 	ldw	r9,1272(sp)
   44b78:	10015226 	beq	r2,zero,450c4 <___vfprintf_internal_r+0x1ca0>
   44b7c:	d8812117 	ldw	r2,1156(sp)
   44b80:	1240062e 	bgeu	r2,r9,44b9c <___vfprintf_internal_r+0x1778>
   44b84:	01000c04 	movi	r4,48
   44b88:	10c00044 	addi	r3,r2,1
   44b8c:	d8c12115 	stw	r3,1156(sp)
   44b90:	11000005 	stb	r4,0(r2)
   44b94:	d8812117 	ldw	r2,1156(sp)
   44b98:	127ffb36 	bltu	r2,r9,44b88 <___vfprintf_internal_r+0x1764>
   44b9c:	1405c83a 	sub	r2,r2,r16
   44ba0:	d8813515 	stw	r2,1236(sp)
   44ba4:	008011c4 	movi	r2,71
   44ba8:	b0812c26 	beq	r22,r2,4505c <___vfprintf_internal_r+0x1c38>
   44bac:	00801944 	movi	r2,101
   44bb0:	1482060e 	bge	r2,r18,453cc <___vfprintf_internal_r+0x1fa8>
   44bb4:	00801984 	movi	r2,102
   44bb8:	9081ce26 	beq	r18,r2,452f4 <___vfprintf_internal_r+0x1ed0>
   44bbc:	da812617 	ldw	r10,1176(sp)
   44bc0:	da813315 	stw	r10,1228(sp)
   44bc4:	d8c13317 	ldw	r3,1228(sp)
   44bc8:	da813517 	ldw	r10,1236(sp)
   44bcc:	1a819616 	blt	r3,r10,45228 <___vfprintf_internal_r+0x1e04>
   44bd0:	da812a17 	ldw	r10,1192(sp)
   44bd4:	5080004c 	andi	r2,r10,1
   44bd8:	10019c1e 	bne	r2,zero,4524c <___vfprintf_internal_r+0x1e28>
   44bdc:	1805883a 	mov	r2,r3
   44be0:	18020516 	blt	r3,zero,453f8 <___vfprintf_internal_r+0x1fd4>
   44be4:	d8c13317 	ldw	r3,1228(sp)
   44be8:	048019c4 	movi	r18,103
   44bec:	d8c12e15 	stw	r3,1208(sp)
   44bf0:	df012b07 	ldb	fp,1196(sp)
   44bf4:	e001111e 	bne	fp,zero,4503c <___vfprintf_internal_r+0x1c18>
   44bf8:	d8c12d17 	ldw	r3,1204(sp)
   44bfc:	df012783 	ldbu	fp,1182(sp)
   44c00:	d8812b15 	stw	r2,1196(sp)
   44c04:	d8c12a15 	stw	r3,1192(sp)
   44c08:	0029883a 	mov	r20,zero
   44c0c:	003af606 	br	437e8 <___vfprintf_internal_r+0x3c4>
   44c10:	da812a17 	ldw	r10,1192(sp)
   44c14:	5080040c 	andi	r2,r10,16
   44c18:	10000a1e 	bne	r2,zero,44c44 <___vfprintf_internal_r+0x1820>
   44c1c:	da812a17 	ldw	r10,1192(sp)
   44c20:	5080100c 	andi	r2,r10,64
   44c24:	10000726 	beq	r2,zero,44c44 <___vfprintf_internal_r+0x1820>
   44c28:	da812f17 	ldw	r10,1212(sp)
   44c2c:	50800017 	ldw	r2,0(r10)
   44c30:	52800104 	addi	r10,r10,4
   44c34:	da812f15 	stw	r10,1212(sp)
   44c38:	da813117 	ldw	r10,1220(sp)
   44c3c:	1280000d 	sth	r10,0(r2)
   44c40:	003a3706 	br	43520 <___vfprintf_internal_r+0xfc>
   44c44:	da812f17 	ldw	r10,1212(sp)
   44c48:	50800017 	ldw	r2,0(r10)
   44c4c:	52800104 	addi	r10,r10,4
   44c50:	da812f15 	stw	r10,1212(sp)
   44c54:	da813117 	ldw	r10,1220(sp)
   44c58:	12800015 	stw	r10,0(r2)
   44c5c:	003a3006 	br	43520 <___vfprintf_internal_r+0xfc>
   44c60:	8c800007 	ldb	r18,0(r17)
   44c64:	003a5506 	br	435bc <___vfprintf_internal_r+0x198>
   44c68:	da812a17 	ldw	r10,1192(sp)
   44c6c:	5080100c 	andi	r2,r10,64
   44c70:	da812f17 	ldw	r10,1212(sp)
   44c74:	10008126 	beq	r2,zero,44e7c <___vfprintf_internal_r+0x1a58>
   44c78:	5540000b 	ldhu	r21,0(r10)
   44c7c:	52800104 	addi	r10,r10,4
   44c80:	002d883a 	mov	r22,zero
   44c84:	da812f15 	stw	r10,1212(sp)
   44c88:	003caa06 	br	43f34 <___vfprintf_internal_r+0xb10>
   44c8c:	00c00084 	movi	r3,2
   44c90:	003bcb06 	br	43bc0 <___vfprintf_internal_r+0x79c>
   44c94:	da812a17 	ldw	r10,1192(sp)
   44c98:	5080100c 	andi	r2,r10,64
   44c9c:	da812f17 	ldw	r10,1212(sp)
   44ca0:	103ab326 	beq	r2,zero,43770 <___vfprintf_internal_r+0x34c>
   44ca4:	5540000b 	ldhu	r21,0(r10)
   44ca8:	003ab206 	br	43774 <___vfprintf_internal_r+0x350>
   44cac:	da812a17 	ldw	r10,1192(sp)
   44cb0:	5080100c 	andi	r2,r10,64
   44cb4:	da812f17 	ldw	r10,1212(sp)
   44cb8:	103c2426 	beq	r2,zero,43d4c <___vfprintf_internal_r+0x928>
   44cbc:	5540000b 	ldhu	r21,0(r10)
   44cc0:	003c2306 	br	43d50 <___vfprintf_internal_r+0x92c>
   44cc4:	da812a17 	ldw	r10,1192(sp)
   44cc8:	5080100c 	andi	r2,r10,64
   44ccc:	da812f17 	ldw	r10,1212(sp)
   44cd0:	103cbc26 	beq	r2,zero,43fc4 <___vfprintf_internal_r+0xba0>
   44cd4:	5540000f 	ldh	r21,0(r10)
   44cd8:	52800104 	addi	r10,r10,4
   44cdc:	da812f15 	stw	r10,1212(sp)
   44ce0:	a82dd7fa 	srai	r22,r21,31
   44ce4:	b005883a 	mov	r2,r22
   44ce8:	003c5a06 	br	43e54 <___vfprintf_internal_r+0xa30>
   44cec:	dc012e17 	ldw	r16,1208(sp)
   44cf0:	a009883a 	mov	r4,r20
   44cf4:	8829883a 	mov	r20,r17
   44cf8:	2023883a 	mov	r17,r4
   44cfc:	1d07883a 	add	r3,r3,r20
   44d00:	10800044 	addi	r2,r2,1
   44d04:	45400015 	stw	r21,0(r8)
   44d08:	45000115 	stw	r20,4(r8)
   44d0c:	d8c12015 	stw	r3,1152(sp)
   44d10:	d8811f15 	stw	r2,1148(sp)
   44d14:	010001c4 	movi	r4,7
   44d18:	20bee416 	blt	r4,r2,448ac <___vfprintf_internal_r+0x1488>
   44d1c:	42000204 	addi	r8,r8,8
   44d20:	003ee906 	br	448c8 <___vfprintf_internal_r+0x14a4>
   44d24:	d9012c17 	ldw	r4,1200(sp)
   44d28:	b80b883a 	mov	r5,r23
   44d2c:	d9811e04 	addi	r6,sp,1144
   44d30:	004a52c0 	call	4a52c <__sprint_r>
   44d34:	103bf91e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44d38:	d8c12017 	ldw	r3,1152(sp)
   44d3c:	da000404 	addi	r8,sp,16
   44d40:	003d6306 	br	442d0 <___vfprintf_internal_r+0xeac>
   44d44:	d9011f17 	ldw	r4,1148(sp)
   44d48:	01400174 	movhi	r5,5
   44d4c:	297fa704 	addi	r5,r5,-356
   44d50:	18c00044 	addi	r3,r3,1
   44d54:	21000044 	addi	r4,r4,1
   44d58:	41400015 	stw	r5,0(r8)
   44d5c:	01400044 	movi	r5,1
   44d60:	41400115 	stw	r5,4(r8)
   44d64:	d8c12015 	stw	r3,1152(sp)
   44d68:	d9011f15 	stw	r4,1148(sp)
   44d6c:	014001c4 	movi	r5,7
   44d70:	29004c16 	blt	r5,r4,44ea4 <___vfprintf_internal_r+0x1a80>
   44d74:	42000204 	addi	r8,r8,8
   44d78:	1025883a 	mov	r18,r2
   44d7c:	9000051e 	bne	r18,zero,44d94 <___vfprintf_internal_r+0x1970>
   44d80:	da813517 	ldw	r10,1236(sp)
   44d84:	5000031e 	bne	r10,zero,44d94 <___vfprintf_internal_r+0x1970>
   44d88:	da812a17 	ldw	r10,1192(sp)
   44d8c:	5080004c 	andi	r2,r10,1
   44d90:	103b3b26 	beq	r2,zero,43a80 <___vfprintf_internal_r+0x65c>
   44d94:	da813817 	ldw	r10,1248(sp)
   44d98:	d8811f17 	ldw	r2,1148(sp)
   44d9c:	010001c4 	movi	r4,7
   44da0:	1a87883a 	add	r3,r3,r10
   44da4:	da813417 	ldw	r10,1232(sp)
   44da8:	10800044 	addi	r2,r2,1
   44dac:	d8c12015 	stw	r3,1152(sp)
   44db0:	42800015 	stw	r10,0(r8)
   44db4:	da813817 	ldw	r10,1248(sp)
   44db8:	d8811f15 	stw	r2,1148(sp)
   44dbc:	42800115 	stw	r10,4(r8)
   44dc0:	20810416 	blt	r4,r2,451d4 <___vfprintf_internal_r+0x1db0>
   44dc4:	42000204 	addi	r8,r8,8
   44dc8:	04a5c83a 	sub	r18,zero,r18
   44dcc:	0480540e 	bge	zero,r18,44f20 <___vfprintf_internal_r+0x1afc>
   44dd0:	05000404 	movi	r20,16
   44dd4:	05400174 	movhi	r21,5
   44dd8:	ad7fa784 	addi	r21,r21,-354
   44ddc:	a480660e 	bge	r20,r18,44f78 <___vfprintf_internal_r+0x1b54>
   44de0:	058001c4 	movi	r22,7
   44de4:	df012c17 	ldw	fp,1200(sp)
   44de8:	00000306 	br	44df8 <___vfprintf_internal_r+0x19d4>
   44dec:	42000204 	addi	r8,r8,8
   44df0:	94bffc04 	addi	r18,r18,-16
   44df4:	a480600e 	bge	r20,r18,44f78 <___vfprintf_internal_r+0x1b54>
   44df8:	18c00404 	addi	r3,r3,16
   44dfc:	10800044 	addi	r2,r2,1
   44e00:	44c00015 	stw	r19,0(r8)
   44e04:	45000115 	stw	r20,4(r8)
   44e08:	d8c12015 	stw	r3,1152(sp)
   44e0c:	d8811f15 	stw	r2,1148(sp)
   44e10:	b0bff60e 	bge	r22,r2,44dec <___vfprintf_internal_r+0x19c8>
   44e14:	e009883a 	mov	r4,fp
   44e18:	b80b883a 	mov	r5,r23
   44e1c:	d9811e04 	addi	r6,sp,1144
   44e20:	004a52c0 	call	4a52c <__sprint_r>
   44e24:	103bbd1e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44e28:	d8c12017 	ldw	r3,1152(sp)
   44e2c:	d8811f17 	ldw	r2,1148(sp)
   44e30:	da000404 	addi	r8,sp,16
   44e34:	003fee06 	br	44df0 <___vfprintf_internal_r+0x19cc>
   44e38:	dd012e15 	stw	r20,1208(sp)
   44e3c:	003cb006 	br	44100 <___vfprintf_internal_r+0xcdc>
   44e40:	008011c4 	movi	r2,71
   44e44:	14808b16 	blt	r2,r18,45074 <___vfprintf_internal_r+0x1c50>
   44e48:	04000174 	movhi	r16,5
   44e4c:	843f9904 	addi	r16,r16,-412
   44e50:	da812a17 	ldw	r10,1192(sp)
   44e54:	00bfdfc4 	movi	r2,-129
   44e58:	00c000c4 	movi	r3,3
   44e5c:	5094703a 	and	r10,r10,r2
   44e60:	d8c12b15 	stw	r3,1196(sp)
   44e64:	da812a15 	stw	r10,1192(sp)
   44e68:	df012783 	ldbu	fp,1182(sp)
   44e6c:	d8c12e15 	stw	r3,1208(sp)
   44e70:	0029883a 	mov	r20,zero
   44e74:	d8013315 	stw	zero,1228(sp)
   44e78:	003a5b06 	br	437e8 <___vfprintf_internal_r+0x3c4>
   44e7c:	55400017 	ldw	r21,0(r10)
   44e80:	52800104 	addi	r10,r10,4
   44e84:	002d883a 	mov	r22,zero
   44e88:	da812f15 	stw	r10,1212(sp)
   44e8c:	003c2906 	br	43f34 <___vfprintf_internal_r+0xb10>
   44e90:	04000174 	movhi	r16,5
   44e94:	843f9704 	addi	r16,r16,-420
   44e98:	003c1006 	br	43edc <___vfprintf_internal_r+0xab8>
   44e9c:	45000204 	addi	r20,r8,8
   44ea0:	003d9e06 	br	4451c <___vfprintf_internal_r+0x10f8>
   44ea4:	d9012c17 	ldw	r4,1200(sp)
   44ea8:	b80b883a 	mov	r5,r23
   44eac:	d9811e04 	addi	r6,sp,1144
   44eb0:	004a52c0 	call	4a52c <__sprint_r>
   44eb4:	103b991e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44eb8:	dc812617 	ldw	r18,1176(sp)
   44ebc:	d8c12017 	ldw	r3,1152(sp)
   44ec0:	da000404 	addi	r8,sp,16
   44ec4:	003fad06 	br	44d7c <___vfprintf_internal_r+0x1958>
   44ec8:	da812a17 	ldw	r10,1192(sp)
   44ecc:	8c400044 	addi	r17,r17,1
   44ed0:	14800047 	ldb	r18,1(r2)
   44ed4:	52800814 	ori	r10,r10,32
   44ed8:	da812a15 	stw	r10,1192(sp)
   44edc:	0039b706 	br	435bc <___vfprintf_internal_r+0x198>
   44ee0:	d9012c17 	ldw	r4,1200(sp)
   44ee4:	b80b883a 	mov	r5,r23
   44ee8:	d9811e04 	addi	r6,sp,1144
   44eec:	004a52c0 	call	4a52c <__sprint_r>
   44ef0:	103b8a1e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44ef4:	d8c12017 	ldw	r3,1152(sp)
   44ef8:	da000404 	addi	r8,sp,16
   44efc:	003d0706 	br	4431c <___vfprintf_internal_r+0xef8>
   44f00:	d9012c17 	ldw	r4,1200(sp)
   44f04:	b80b883a 	mov	r5,r23
   44f08:	d9811e04 	addi	r6,sp,1144
   44f0c:	004a52c0 	call	4a52c <__sprint_r>
   44f10:	103b821e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44f14:	d8c12017 	ldw	r3,1152(sp)
   44f18:	d8811f17 	ldw	r2,1148(sp)
   44f1c:	da000404 	addi	r8,sp,16
   44f20:	da813517 	ldw	r10,1236(sp)
   44f24:	10800044 	addi	r2,r2,1
   44f28:	44000015 	stw	r16,0(r8)
   44f2c:	50c7883a 	add	r3,r10,r3
   44f30:	003acd06 	br	43a68 <___vfprintf_internal_r+0x644>
   44f34:	da013f15 	stw	r8,1276(sp)
   44f38:	00433980 	call	43398 <strlen>
   44f3c:	d8812e15 	stw	r2,1208(sp)
   44f40:	da013f17 	ldw	r8,1276(sp)
   44f44:	103c700e 	bge	r2,zero,44108 <___vfprintf_internal_r+0xce4>
   44f48:	0005883a 	mov	r2,zero
   44f4c:	003c6e06 	br	44108 <___vfprintf_internal_r+0xce4>
   44f50:	0029883a 	mov	r20,zero
   44f54:	003e0706 	br	44774 <___vfprintf_internal_r+0x1350>
   44f58:	d9012c17 	ldw	r4,1200(sp)
   44f5c:	b80b883a 	mov	r5,r23
   44f60:	d9811e04 	addi	r6,sp,1144
   44f64:	004a52c0 	call	4a52c <__sprint_r>
   44f68:	103b6c1e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44f6c:	d8c12017 	ldw	r3,1152(sp)
   44f70:	da000404 	addi	r8,sp,16
   44f74:	003dfe06 	br	44770 <___vfprintf_internal_r+0x134c>
   44f78:	1c87883a 	add	r3,r3,r18
   44f7c:	10800044 	addi	r2,r2,1
   44f80:	45400015 	stw	r21,0(r8)
   44f84:	44800115 	stw	r18,4(r8)
   44f88:	d8c12015 	stw	r3,1152(sp)
   44f8c:	d8811f15 	stw	r2,1148(sp)
   44f90:	010001c4 	movi	r4,7
   44f94:	20bfda16 	blt	r4,r2,44f00 <___vfprintf_internal_r+0x1adc>
   44f98:	42000204 	addi	r8,r8,8
   44f9c:	003fe006 	br	44f20 <___vfprintf_internal_r+0x1afc>
   44fa0:	d9012c17 	ldw	r4,1200(sp)
   44fa4:	b80b883a 	mov	r5,r23
   44fa8:	d9811e04 	addi	r6,sp,1144
   44fac:	004a52c0 	call	4a52c <__sprint_r>
   44fb0:	103b5a1e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44fb4:	d8812617 	ldw	r2,1176(sp)
   44fb8:	d8c12017 	ldw	r3,1152(sp)
   44fbc:	da000404 	addi	r8,sp,16
   44fc0:	003e5606 	br	4491c <___vfprintf_internal_r+0x14f8>
   44fc4:	0029883a 	mov	r20,zero
   44fc8:	003e6606 	br	44964 <___vfprintf_internal_r+0x1540>
   44fcc:	d9012c17 	ldw	r4,1200(sp)
   44fd0:	b80b883a 	mov	r5,r23
   44fd4:	d9811e04 	addi	r6,sp,1144
   44fd8:	004a52c0 	call	4a52c <__sprint_r>
   44fdc:	103b4f1e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   44fe0:	d8812617 	ldw	r2,1176(sp)
   44fe4:	da813517 	ldw	r10,1236(sp)
   44fe8:	d8c12017 	ldw	r3,1152(sp)
   44fec:	da000404 	addi	r8,sp,16
   44ff0:	5085c83a 	sub	r2,r10,r2
   44ff4:	003e5a06 	br	44960 <___vfprintf_internal_r+0x153c>
   44ff8:	00800184 	movi	r2,6
   44ffc:	1500012e 	bgeu	r2,r20,45004 <___vfprintf_internal_r+0x1be0>
   45000:	1029883a 	mov	r20,r2
   45004:	dd012e15 	stw	r20,1208(sp)
   45008:	a005883a 	mov	r2,r20
   4500c:	a000c516 	blt	r20,zero,45324 <___vfprintf_internal_r+0x1f00>
   45010:	d8812b15 	stw	r2,1196(sp)
   45014:	dd412f15 	stw	r21,1212(sp)
   45018:	0029883a 	mov	r20,zero
   4501c:	d8013315 	stw	zero,1228(sp)
   45020:	04000174 	movhi	r16,5
   45024:	843fa504 	addi	r16,r16,-364
   45028:	0005883a 	mov	r2,zero
   4502c:	0039f506 	br	43804 <___vfprintf_internal_r+0x3e0>
   45030:	07000b44 	movi	fp,45
   45034:	df012785 	stb	fp,1182(sp)
   45038:	003ba406 	br	43ecc <___vfprintf_internal_r+0xaa8>
   4503c:	da812d17 	ldw	r10,1204(sp)
   45040:	00c00b44 	movi	r3,45
   45044:	d8812b15 	stw	r2,1196(sp)
   45048:	d8c12785 	stb	r3,1182(sp)
   4504c:	da812a15 	stw	r10,1192(sp)
   45050:	0029883a 	mov	r20,zero
   45054:	00800b44 	movi	r2,45
   45058:	0039e706 	br	437f8 <___vfprintf_internal_r+0x3d4>
   4505c:	d8812617 	ldw	r2,1176(sp)
   45060:	00ffff44 	movi	r3,-3
   45064:	10c02e16 	blt	r2,r3,45120 <___vfprintf_internal_r+0x1cfc>
   45068:	a0802d16 	blt	r20,r2,45120 <___vfprintf_internal_r+0x1cfc>
   4506c:	d8813315 	stw	r2,1228(sp)
   45070:	003ed406 	br	44bc4 <___vfprintf_internal_r+0x17a0>
   45074:	04000174 	movhi	r16,5
   45078:	843f9a04 	addi	r16,r16,-408
   4507c:	003f7406 	br	44e50 <___vfprintf_internal_r+0x1a2c>
   45080:	d8812604 	addi	r2,sp,1176
   45084:	d8800115 	stw	r2,4(sp)
   45088:	d9012c17 	ldw	r4,1200(sp)
   4508c:	d8812504 	addi	r2,sp,1172
   45090:	d9413717 	ldw	r5,1244(sp)
   45094:	d8800215 	stw	r2,8(sp)
   45098:	d8812104 	addi	r2,sp,1156
   4509c:	dd000015 	stw	r20,0(sp)
   450a0:	d8800315 	stw	r2,12(sp)
   450a4:	a80d883a 	mov	r6,r21
   450a8:	01c000c4 	movi	r7,3
   450ac:	da013f15 	stw	r8,1276(sp)
   450b0:	00457600 	call	45760 <_dtoa_r>
   450b4:	1021883a 	mov	r16,r2
   450b8:	a039883a 	mov	fp,r20
   450bc:	da013f17 	ldw	r8,1276(sp)
   450c0:	003ea106 	br	44b48 <___vfprintf_internal_r+0x1724>
   450c4:	4805883a 	mov	r2,r9
   450c8:	003eb406 	br	44b9c <___vfprintf_internal_r+0x1778>
   450cc:	81000007 	ldb	r4,0(r16)
   450d0:	00800c04 	movi	r2,48
   450d4:	20800326 	beq	r4,r2,450e4 <___vfprintf_internal_r+0x1cc0>
   450d8:	d8c12617 	ldw	r3,1176(sp)
   450dc:	48d3883a 	add	r9,r9,r3
   450e0:	003e9c06 	br	44b54 <___vfprintf_internal_r+0x1730>
   450e4:	d9013717 	ldw	r4,1244(sp)
   450e8:	a80b883a 	mov	r5,r21
   450ec:	000d883a 	mov	r6,zero
   450f0:	000f883a 	mov	r7,zero
   450f4:	da013f15 	stw	r8,1276(sp)
   450f8:	da413e15 	stw	r9,1272(sp)
   450fc:	004cd400 	call	4cd40 <__eqdf2>
   45100:	da013f17 	ldw	r8,1276(sp)
   45104:	da413e17 	ldw	r9,1272(sp)
   45108:	103ff326 	beq	r2,zero,450d8 <___vfprintf_internal_r+0x1cb4>
   4510c:	00800044 	movi	r2,1
   45110:	1707c83a 	sub	r3,r2,fp
   45114:	d8c12615 	stw	r3,1176(sp)
   45118:	48d3883a 	add	r9,r9,r3
   4511c:	003e8d06 	br	44b54 <___vfprintf_internal_r+0x1730>
   45120:	94bfff84 	addi	r18,r18,-2
   45124:	157fffc4 	addi	r21,r2,-1
   45128:	dd412615 	stw	r21,1176(sp)
   4512c:	dc8122c5 	stb	r18,1163(sp)
   45130:	a8008916 	blt	r21,zero,45358 <___vfprintf_internal_r+0x1f34>
   45134:	00800ac4 	movi	r2,43
   45138:	d8812305 	stb	r2,1164(sp)
   4513c:	05000244 	movi	r20,9
   45140:	a5404a16 	blt	r20,r21,4526c <___vfprintf_internal_r+0x1e48>
   45144:	00800c04 	movi	r2,48
   45148:	ad400c04 	addi	r21,r21,48
   4514c:	d8812345 	stb	r2,1165(sp)
   45150:	dd412385 	stb	r21,1166(sp)
   45154:	d8c123c4 	addi	r3,sp,1167
   45158:	d88122c4 	addi	r2,sp,1163
   4515c:	da813517 	ldw	r10,1236(sp)
   45160:	1885c83a 	sub	r2,r3,r2
   45164:	d8813a15 	stw	r2,1256(sp)
   45168:	5095883a 	add	r10,r10,r2
   4516c:	da812e15 	stw	r10,1208(sp)
   45170:	da813517 	ldw	r10,1236(sp)
   45174:	00800044 	movi	r2,1
   45178:	1280070e 	bge	r2,r10,45198 <___vfprintf_internal_r+0x1d74>
   4517c:	d8c12e17 	ldw	r3,1208(sp)
   45180:	18c00044 	addi	r3,r3,1
   45184:	d8c12e15 	stw	r3,1208(sp)
   45188:	1805883a 	mov	r2,r3
   4518c:	18000716 	blt	r3,zero,451ac <___vfprintf_internal_r+0x1d88>
   45190:	d8013315 	stw	zero,1228(sp)
   45194:	003e9606 	br	44bf0 <___vfprintf_internal_r+0x17cc>
   45198:	da812a17 	ldw	r10,1192(sp)
   4519c:	5084703a 	and	r2,r10,r2
   451a0:	103ff61e 	bne	r2,zero,4517c <___vfprintf_internal_r+0x1d58>
   451a4:	d8812e17 	ldw	r2,1208(sp)
   451a8:	103ff90e 	bge	r2,zero,45190 <___vfprintf_internal_r+0x1d6c>
   451ac:	0005883a 	mov	r2,zero
   451b0:	d8013315 	stw	zero,1228(sp)
   451b4:	003e8e06 	br	44bf0 <___vfprintf_internal_r+0x17cc>
   451b8:	dd012b15 	stw	r20,1196(sp)
   451bc:	dd012e15 	stw	r20,1208(sp)
   451c0:	df012783 	ldbu	fp,1182(sp)
   451c4:	dd412f15 	stw	r21,1212(sp)
   451c8:	0029883a 	mov	r20,zero
   451cc:	d8013315 	stw	zero,1228(sp)
   451d0:	00398506 	br	437e8 <___vfprintf_internal_r+0x3c4>
   451d4:	d9012c17 	ldw	r4,1200(sp)
   451d8:	b80b883a 	mov	r5,r23
   451dc:	d9811e04 	addi	r6,sp,1144
   451e0:	004a52c0 	call	4a52c <__sprint_r>
   451e4:	103acd1e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x8f8>
   451e8:	dc812617 	ldw	r18,1176(sp)
   451ec:	d8c12017 	ldw	r3,1152(sp)
   451f0:	d8811f17 	ldw	r2,1148(sp)
   451f4:	da000404 	addi	r8,sp,16
   451f8:	003ef306 	br	44dc8 <___vfprintf_internal_r+0x19a4>
   451fc:	a03e2e1e 	bne	r20,zero,44ab8 <___vfprintf_internal_r+0x1694>
   45200:	8029883a 	mov	r20,r16
   45204:	003e2c06 	br	44ab8 <___vfprintf_internal_r+0x1694>
   45208:	05000184 	movi	r20,6
   4520c:	003e2a06 	br	44ab8 <___vfprintf_internal_r+0x1694>
   45210:	00c00b44 	movi	r3,45
   45214:	5560003c 	xorhi	r21,r10,32768
   45218:	d8c12b05 	stb	r3,1196(sp)
   4521c:	003e2d06 	br	44ad4 <___vfprintf_internal_r+0x16b0>
   45220:	a7000044 	addi	fp,r20,1
   45224:	003e3206 	br	44af0 <___vfprintf_internal_r+0x16cc>
   45228:	d8c13317 	ldw	r3,1228(sp)
   4522c:	00c0470e 	bge	zero,r3,4534c <___vfprintf_internal_r+0x1f28>
   45230:	00800044 	movi	r2,1
   45234:	da813517 	ldw	r10,1236(sp)
   45238:	1285883a 	add	r2,r2,r10
   4523c:	d8812e15 	stw	r2,1208(sp)
   45240:	10000716 	blt	r2,zero,45260 <___vfprintf_internal_r+0x1e3c>
   45244:	048019c4 	movi	r18,103
   45248:	003e6906 	br	44bf0 <___vfprintf_internal_r+0x17cc>
   4524c:	da813317 	ldw	r10,1228(sp)
   45250:	52800044 	addi	r10,r10,1
   45254:	da812e15 	stw	r10,1208(sp)
   45258:	5005883a 	mov	r2,r10
   4525c:	503ff90e 	bge	r10,zero,45244 <___vfprintf_internal_r+0x1e20>
   45260:	0005883a 	mov	r2,zero
   45264:	048019c4 	movi	r18,103
   45268:	003e6106 	br	44bf0 <___vfprintf_internal_r+0x17cc>
   4526c:	d8c12284 	addi	r3,sp,1162
   45270:	4039883a 	mov	fp,r8
   45274:	a809883a 	mov	r4,r21
   45278:	01400284 	movi	r5,10
   4527c:	182d883a 	mov	r22,r3
   45280:	0040f680 	call	40f68 <__modsi3>
   45284:	10800c04 	addi	r2,r2,48
   45288:	a809883a 	mov	r4,r21
   4528c:	b0800005 	stb	r2,0(r22)
   45290:	01400284 	movi	r5,10
   45294:	0040f200 	call	40f20 <__divsi3>
   45298:	102b883a 	mov	r21,r2
   4529c:	b0ffffc4 	addi	r3,r22,-1
   452a0:	a0bff416 	blt	r20,r2,45274 <___vfprintf_internal_r+0x1e50>
   452a4:	11400c04 	addi	r5,r2,48
   452a8:	b17fffc5 	stb	r5,-1(r22)
   452ac:	d88122c4 	addi	r2,sp,1163
   452b0:	e011883a 	mov	r8,fp
   452b4:	18804e2e 	bgeu	r3,r2,453f0 <___vfprintf_internal_r+0x1fcc>
   452b8:	d9012344 	addi	r4,sp,1165
   452bc:	b007883a 	mov	r3,r22
   452c0:	00000206 	br	452cc <___vfprintf_internal_r+0x1ea8>
   452c4:	19400003 	ldbu	r5,0(r3)
   452c8:	18c00044 	addi	r3,r3,1
   452cc:	21400005 	stb	r5,0(r4)
   452d0:	21000044 	addi	r4,r4,1
   452d4:	10fffb1e 	bne	r2,r3,452c4 <___vfprintf_internal_r+0x1ea0>
   452d8:	d8c12304 	addi	r3,sp,1164
   452dc:	1d87c83a 	sub	r3,r3,r22
   452e0:	d9012344 	addi	r4,sp,1165
   452e4:	20c7883a 	add	r3,r4,r3
   452e8:	003f9c06 	br	4515c <___vfprintf_internal_r+0x1d38>
   452ec:	d8812117 	ldw	r2,1156(sp)
   452f0:	003e2a06 	br	44b9c <___vfprintf_internal_r+0x1778>
   452f4:	d8c12617 	ldw	r3,1176(sp)
   452f8:	d8c13315 	stw	r3,1228(sp)
   452fc:	00c01a0e 	bge	zero,r3,45368 <___vfprintf_internal_r+0x1f44>
   45300:	a0000a1e 	bne	r20,zero,4532c <___vfprintf_internal_r+0x1f08>
   45304:	da812a17 	ldw	r10,1192(sp)
   45308:	5080004c 	andi	r2,r10,1
   4530c:	1000071e 	bne	r2,zero,4532c <___vfprintf_internal_r+0x1f08>
   45310:	1805883a 	mov	r2,r3
   45314:	18002f16 	blt	r3,zero,453d4 <___vfprintf_internal_r+0x1fb0>
   45318:	d8c13317 	ldw	r3,1228(sp)
   4531c:	d8c12e15 	stw	r3,1208(sp)
   45320:	003e3306 	br	44bf0 <___vfprintf_internal_r+0x17cc>
   45324:	0005883a 	mov	r2,zero
   45328:	003f3906 	br	45010 <___vfprintf_internal_r+0x1bec>
   4532c:	da813317 	ldw	r10,1228(sp)
   45330:	a5000044 	addi	r20,r20,1
   45334:	5529883a 	add	r20,r10,r20
   45338:	dd012e15 	stw	r20,1208(sp)
   4533c:	a005883a 	mov	r2,r20
   45340:	a03e2b0e 	bge	r20,zero,44bf0 <___vfprintf_internal_r+0x17cc>
   45344:	0005883a 	mov	r2,zero
   45348:	003e2906 	br	44bf0 <___vfprintf_internal_r+0x17cc>
   4534c:	00800084 	movi	r2,2
   45350:	10c5c83a 	sub	r2,r2,r3
   45354:	003fb706 	br	45234 <___vfprintf_internal_r+0x1e10>
   45358:	00800b44 	movi	r2,45
   4535c:	056bc83a 	sub	r21,zero,r21
   45360:	d8812305 	stb	r2,1164(sp)
   45364:	003f7506 	br	4513c <___vfprintf_internal_r+0x1d18>
   45368:	a000111e 	bne	r20,zero,453b0 <___vfprintf_internal_r+0x1f8c>
   4536c:	da812a17 	ldw	r10,1192(sp)
   45370:	5080004c 	andi	r2,r10,1
   45374:	10000e1e 	bne	r2,zero,453b0 <___vfprintf_internal_r+0x1f8c>
   45378:	00800044 	movi	r2,1
   4537c:	d8812e15 	stw	r2,1208(sp)
   45380:	003e1b06 	br	44bf0 <___vfprintf_internal_r+0x17cc>
   45384:	da812f17 	ldw	r10,1212(sp)
   45388:	8c800043 	ldbu	r18,1(r17)
   4538c:	2823883a 	mov	r17,r5
   45390:	55000017 	ldw	r20,0(r10)
   45394:	50800104 	addi	r2,r10,4
   45398:	d8812f15 	stw	r2,1212(sp)
   4539c:	a0000f16 	blt	r20,zero,453dc <___vfprintf_internal_r+0x1fb8>
   453a0:	94803fcc 	andi	r18,r18,255
   453a4:	9480201c 	xori	r18,r18,128
   453a8:	94bfe004 	addi	r18,r18,-128
   453ac:	00388306 	br	435bc <___vfprintf_internal_r+0x198>
   453b0:	a5000084 	addi	r20,r20,2
   453b4:	dd012e15 	stw	r20,1208(sp)
   453b8:	a005883a 	mov	r2,r20
   453bc:	a03e0c0e 	bge	r20,zero,44bf0 <___vfprintf_internal_r+0x17cc>
   453c0:	003fe006 	br	45344 <___vfprintf_internal_r+0x1f20>
   453c4:	043fffc4 	movi	r16,-1
   453c8:	003a3206 	br	43c94 <___vfprintf_internal_r+0x870>
   453cc:	d8812617 	ldw	r2,1176(sp)
   453d0:	003f5406 	br	45124 <___vfprintf_internal_r+0x1d00>
   453d4:	0005883a 	mov	r2,zero
   453d8:	003fcf06 	br	45318 <___vfprintf_internal_r+0x1ef4>
   453dc:	94803fcc 	andi	r18,r18,255
   453e0:	9480201c 	xori	r18,r18,128
   453e4:	053fffc4 	movi	r20,-1
   453e8:	94bfe004 	addi	r18,r18,-128
   453ec:	00387306 	br	435bc <___vfprintf_internal_r+0x198>
   453f0:	d8c12344 	addi	r3,sp,1165
   453f4:	003f5906 	br	4515c <___vfprintf_internal_r+0x1d38>
   453f8:	0005883a 	mov	r2,zero
   453fc:	003df906 	br	44be4 <___vfprintf_internal_r+0x17c0>

00045400 <__vfprintf_internal>:
   45400:	00800174 	movhi	r2,5
   45404:	10870004 	addi	r2,r2,7168
   45408:	2007883a 	mov	r3,r4
   4540c:	11000017 	ldw	r4,0(r2)
   45410:	2805883a 	mov	r2,r5
   45414:	300f883a 	mov	r7,r6
   45418:	180b883a 	mov	r5,r3
   4541c:	100d883a 	mov	r6,r2
   45420:	00434241 	jmpi	43424 <___vfprintf_internal_r>

00045424 <__swsetup_r>:
   45424:	00800174 	movhi	r2,5
   45428:	10870004 	addi	r2,r2,7168
   4542c:	10800017 	ldw	r2,0(r2)
   45430:	defffd04 	addi	sp,sp,-12
   45434:	dc400115 	stw	r17,4(sp)
   45438:	dc000015 	stw	r16,0(sp)
   4543c:	dfc00215 	stw	ra,8(sp)
   45440:	2023883a 	mov	r17,r4
   45444:	2821883a 	mov	r16,r5
   45448:	10000226 	beq	r2,zero,45454 <__swsetup_r+0x30>
   4544c:	10c00e17 	ldw	r3,56(r2)
   45450:	18002e26 	beq	r3,zero,4550c <__swsetup_r+0xe8>
   45454:	8080030b 	ldhu	r2,12(r16)
   45458:	10c0020c 	andi	r3,r2,8
   4545c:	100d883a 	mov	r6,r2
   45460:	18000f26 	beq	r3,zero,454a0 <__swsetup_r+0x7c>
   45464:	80c00417 	ldw	r3,16(r16)
   45468:	18001526 	beq	r3,zero,454c0 <__swsetup_r+0x9c>
   4546c:	1100004c 	andi	r4,r2,1
   45470:	20001c1e 	bne	r4,zero,454e4 <__swsetup_r+0xc0>
   45474:	1080008c 	andi	r2,r2,2
   45478:	1000271e 	bne	r2,zero,45518 <__swsetup_r+0xf4>
   4547c:	80800517 	ldw	r2,20(r16)
   45480:	80800215 	stw	r2,8(r16)
   45484:	18001c26 	beq	r3,zero,454f8 <__swsetup_r+0xd4>
   45488:	0005883a 	mov	r2,zero
   4548c:	dfc00217 	ldw	ra,8(sp)
   45490:	dc400117 	ldw	r17,4(sp)
   45494:	dc000017 	ldw	r16,0(sp)
   45498:	dec00304 	addi	sp,sp,12
   4549c:	f800283a 	ret
   454a0:	3080040c 	andi	r2,r6,16
   454a4:	10001726 	beq	r2,zero,45504 <__swsetup_r+0xe0>
   454a8:	3080010c 	andi	r2,r6,4
   454ac:	10001d1e 	bne	r2,zero,45524 <__swsetup_r+0x100>
   454b0:	80c00417 	ldw	r3,16(r16)
   454b4:	30800214 	ori	r2,r6,8
   454b8:	8080030d 	sth	r2,12(r16)
   454bc:	183feb1e 	bne	r3,zero,4546c <__swsetup_r+0x48>
   454c0:	1140a00c 	andi	r5,r2,640
   454c4:	01008004 	movi	r4,512
   454c8:	293fe826 	beq	r5,r4,4546c <__swsetup_r+0x48>
   454cc:	8809883a 	mov	r4,r17
   454d0:	800b883a 	mov	r5,r16
   454d4:	0047e8c0 	call	47e8c <__smakebuf_r>
   454d8:	8080030b 	ldhu	r2,12(r16)
   454dc:	80c00417 	ldw	r3,16(r16)
   454e0:	003fe206 	br	4546c <__swsetup_r+0x48>
   454e4:	80800517 	ldw	r2,20(r16)
   454e8:	80000215 	stw	zero,8(r16)
   454ec:	0085c83a 	sub	r2,zero,r2
   454f0:	80800615 	stw	r2,24(r16)
   454f4:	183fe41e 	bne	r3,zero,45488 <__swsetup_r+0x64>
   454f8:	8080030b 	ldhu	r2,12(r16)
   454fc:	1080200c 	andi	r2,r2,128
   45500:	103fe226 	beq	r2,zero,4548c <__swsetup_r+0x68>
   45504:	00bfffc4 	movi	r2,-1
   45508:	003fe006 	br	4548c <__swsetup_r+0x68>
   4550c:	1009883a 	mov	r4,r2
   45510:	00470a80 	call	470a8 <__sinit>
   45514:	003fcf06 	br	45454 <__swsetup_r+0x30>
   45518:	0005883a 	mov	r2,zero
   4551c:	80800215 	stw	r2,8(r16)
   45520:	003fd806 	br	45484 <__swsetup_r+0x60>
   45524:	81400c17 	ldw	r5,48(r16)
   45528:	28000626 	beq	r5,zero,45544 <__swsetup_r+0x120>
   4552c:	80801004 	addi	r2,r16,64
   45530:	28800326 	beq	r5,r2,45540 <__swsetup_r+0x11c>
   45534:	8809883a 	mov	r4,r17
   45538:	00474dc0 	call	474dc <_free_r>
   4553c:	8180030b 	ldhu	r6,12(r16)
   45540:	80000c15 	stw	zero,48(r16)
   45544:	80c00417 	ldw	r3,16(r16)
   45548:	00bff6c4 	movi	r2,-37
   4554c:	118c703a 	and	r6,r2,r6
   45550:	80000115 	stw	zero,4(r16)
   45554:	80c00015 	stw	r3,0(r16)
   45558:	003fd606 	br	454b4 <__swsetup_r+0x90>

0004555c <quorem>:
   4555c:	defff704 	addi	sp,sp,-36
   45560:	dc000015 	stw	r16,0(sp)
   45564:	20800417 	ldw	r2,16(r4)
   45568:	2c000417 	ldw	r16,16(r5)
   4556c:	dd800615 	stw	r22,24(sp)
   45570:	dd400515 	stw	r21,20(sp)
   45574:	dfc00815 	stw	ra,32(sp)
   45578:	ddc00715 	stw	r23,28(sp)
   4557c:	dd000415 	stw	r20,16(sp)
   45580:	dcc00315 	stw	r19,12(sp)
   45584:	dc800215 	stw	r18,8(sp)
   45588:	dc400115 	stw	r17,4(sp)
   4558c:	202b883a 	mov	r21,r4
   45590:	282d883a 	mov	r22,r5
   45594:	14007016 	blt	r2,r16,45758 <quorem+0x1fc>
   45598:	843fffc4 	addi	r16,r16,-1
   4559c:	842f883a 	add	r23,r16,r16
   455a0:	bdef883a 	add	r23,r23,r23
   455a4:	2c400504 	addi	r17,r5,20
   455a8:	8de5883a 	add	r18,r17,r23
   455ac:	25000504 	addi	r20,r4,20
   455b0:	a5ef883a 	add	r23,r20,r23
   455b4:	91400017 	ldw	r5,0(r18)
   455b8:	b9000017 	ldw	r4,0(r23)
   455bc:	29400044 	addi	r5,r5,1
   455c0:	0040fb40 	call	40fb4 <__udivsi3>
   455c4:	1027883a 	mov	r19,r2
   455c8:	10002c26 	beq	r2,zero,4567c <quorem+0x120>
   455cc:	a00f883a 	mov	r7,r20
   455d0:	880d883a 	mov	r6,r17
   455d4:	0013883a 	mov	r9,zero
   455d8:	0011883a 	mov	r8,zero
   455dc:	30800017 	ldw	r2,0(r6)
   455e0:	3ac00017 	ldw	r11,0(r7)
   455e4:	31800104 	addi	r6,r6,4
   455e8:	10ffffcc 	andi	r3,r2,65535
   455ec:	1cc7383a 	mul	r3,r3,r19
   455f0:	1004d43a 	srli	r2,r2,16
   455f4:	5abfffcc 	andi	r10,r11,65535
   455f8:	48c7883a 	add	r3,r9,r3
   455fc:	1812d43a 	srli	r9,r3,16
   45600:	14c5383a 	mul	r2,r2,r19
   45604:	5211883a 	add	r8,r10,r8
   45608:	18ffffcc 	andi	r3,r3,65535
   4560c:	40d5c83a 	sub	r10,r8,r3
   45610:	5810d43a 	srli	r8,r11,16
   45614:	4893883a 	add	r9,r9,r2
   45618:	5005d43a 	srai	r2,r10,16
   4561c:	48ffffcc 	andi	r3,r9,65535
   45620:	40d1c83a 	sub	r8,r8,r3
   45624:	4091883a 	add	r8,r8,r2
   45628:	4004943a 	slli	r2,r8,16
   4562c:	52bfffcc 	andi	r10,r10,65535
   45630:	4812d43a 	srli	r9,r9,16
   45634:	1294b03a 	or	r10,r2,r10
   45638:	3a800015 	stw	r10,0(r7)
   4563c:	4011d43a 	srai	r8,r8,16
   45640:	39c00104 	addi	r7,r7,4
   45644:	91bfe52e 	bgeu	r18,r6,455dc <quorem+0x80>
   45648:	b8800017 	ldw	r2,0(r23)
   4564c:	10000b1e 	bne	r2,zero,4567c <quorem+0x120>
   45650:	b8bfff04 	addi	r2,r23,-4
   45654:	a080082e 	bgeu	r20,r2,45678 <quorem+0x11c>
   45658:	b8ffff17 	ldw	r3,-4(r23)
   4565c:	18000326 	beq	r3,zero,4566c <quorem+0x110>
   45660:	00000506 	br	45678 <quorem+0x11c>
   45664:	10c00017 	ldw	r3,0(r2)
   45668:	1800031e 	bne	r3,zero,45678 <quorem+0x11c>
   4566c:	10bfff04 	addi	r2,r2,-4
   45670:	843fffc4 	addi	r16,r16,-1
   45674:	a0bffb36 	bltu	r20,r2,45664 <quorem+0x108>
   45678:	ac000415 	stw	r16,16(r21)
   4567c:	a809883a 	mov	r4,r21
   45680:	b00b883a 	mov	r5,r22
   45684:	00493fc0 	call	493fc <__mcmp>
   45688:	10002716 	blt	r2,zero,45728 <quorem+0x1cc>
   4568c:	9cc00044 	addi	r19,r19,1
   45690:	a00b883a 	mov	r5,r20
   45694:	8807883a 	mov	r3,r17
   45698:	000d883a 	mov	r6,zero
   4569c:	2a400017 	ldw	r9,0(r5)
   456a0:	1a000017 	ldw	r8,0(r3)
   456a4:	29400104 	addi	r5,r5,4
   456a8:	49ffffcc 	andi	r7,r9,65535
   456ac:	40bfffcc 	andi	r2,r8,65535
   456b0:	398d883a 	add	r6,r7,r6
   456b4:	308fc83a 	sub	r7,r6,r2
   456b8:	4010d43a 	srli	r8,r8,16
   456bc:	480cd43a 	srli	r6,r9,16
   456c0:	3805d43a 	srai	r2,r7,16
   456c4:	39ffffcc 	andi	r7,r7,65535
   456c8:	320dc83a 	sub	r6,r6,r8
   456cc:	308d883a 	add	r6,r6,r2
   456d0:	3004943a 	slli	r2,r6,16
   456d4:	18c00104 	addi	r3,r3,4
   456d8:	300dd43a 	srai	r6,r6,16
   456dc:	11ceb03a 	or	r7,r2,r7
   456e0:	29ffff15 	stw	r7,-4(r5)
   456e4:	90ffed2e 	bgeu	r18,r3,4569c <quorem+0x140>
   456e8:	8405883a 	add	r2,r16,r16
   456ec:	1085883a 	add	r2,r2,r2
   456f0:	a087883a 	add	r3,r20,r2
   456f4:	18800017 	ldw	r2,0(r3)
   456f8:	10000b1e 	bne	r2,zero,45728 <quorem+0x1cc>
   456fc:	18bfff04 	addi	r2,r3,-4
   45700:	a080082e 	bgeu	r20,r2,45724 <quorem+0x1c8>
   45704:	18ffff17 	ldw	r3,-4(r3)
   45708:	18000326 	beq	r3,zero,45718 <quorem+0x1bc>
   4570c:	00000506 	br	45724 <quorem+0x1c8>
   45710:	10c00017 	ldw	r3,0(r2)
   45714:	1800031e 	bne	r3,zero,45724 <quorem+0x1c8>
   45718:	10bfff04 	addi	r2,r2,-4
   4571c:	843fffc4 	addi	r16,r16,-1
   45720:	a0bffb36 	bltu	r20,r2,45710 <quorem+0x1b4>
   45724:	ac000415 	stw	r16,16(r21)
   45728:	9805883a 	mov	r2,r19
   4572c:	dfc00817 	ldw	ra,32(sp)
   45730:	ddc00717 	ldw	r23,28(sp)
   45734:	dd800617 	ldw	r22,24(sp)
   45738:	dd400517 	ldw	r21,20(sp)
   4573c:	dd000417 	ldw	r20,16(sp)
   45740:	dcc00317 	ldw	r19,12(sp)
   45744:	dc800217 	ldw	r18,8(sp)
   45748:	dc400117 	ldw	r17,4(sp)
   4574c:	dc000017 	ldw	r16,0(sp)
   45750:	dec00904 	addi	sp,sp,36
   45754:	f800283a 	ret
   45758:	0005883a 	mov	r2,zero
   4575c:	003ff306 	br	4572c <quorem+0x1d0>

00045760 <_dtoa_r>:
   45760:	20801017 	ldw	r2,64(r4)
   45764:	deffdf04 	addi	sp,sp,-132
   45768:	dcc01a15 	stw	r19,104(sp)
   4576c:	dc801915 	stw	r18,100(sp)
   45770:	dc401815 	stw	r17,96(sp)
   45774:	dc001715 	stw	r16,92(sp)
   45778:	dfc02015 	stw	ra,128(sp)
   4577c:	df001f15 	stw	fp,124(sp)
   45780:	ddc01e15 	stw	r23,120(sp)
   45784:	dd801d15 	stw	r22,116(sp)
   45788:	dd401c15 	stw	r21,112(sp)
   4578c:	dd001b15 	stw	r20,108(sp)
   45790:	d9400315 	stw	r5,12(sp)
   45794:	d9c00415 	stw	r7,16(sp)
   45798:	2021883a 	mov	r16,r4
   4579c:	3023883a 	mov	r17,r6
   457a0:	dcc02317 	ldw	r19,140(sp)
   457a4:	3025883a 	mov	r18,r6
   457a8:	10000826 	beq	r2,zero,457cc <_dtoa_r+0x6c>
   457ac:	20c01117 	ldw	r3,68(r4)
   457b0:	01800044 	movi	r6,1
   457b4:	100b883a 	mov	r5,r2
   457b8:	30cc983a 	sll	r6,r6,r3
   457bc:	10c00115 	stw	r3,4(r2)
   457c0:	11800215 	stw	r6,8(r2)
   457c4:	0048be40 	call	48be4 <_Bfree>
   457c8:	80001015 	stw	zero,64(r16)
   457cc:	88002e16 	blt	r17,zero,45888 <_dtoa_r+0x128>
   457d0:	98000015 	stw	zero,0(r19)
   457d4:	88dffc2c 	andhi	r3,r17,32752
   457d8:	009ffc34 	movhi	r2,32752
   457dc:	18801b26 	beq	r3,r2,4584c <_dtoa_r+0xec>
   457e0:	d9000317 	ldw	r4,12(sp)
   457e4:	900b883a 	mov	r5,r18
   457e8:	000d883a 	mov	r6,zero
   457ec:	000f883a 	mov	r7,zero
   457f0:	004cd400 	call	4cd40 <__eqdf2>
   457f4:	10002b1e 	bne	r2,zero,458a4 <_dtoa_r+0x144>
   457f8:	d8c02217 	ldw	r3,136(sp)
   457fc:	d9002417 	ldw	r4,144(sp)
   45800:	00800044 	movi	r2,1
   45804:	18800015 	stw	r2,0(r3)
   45808:	2001a026 	beq	r4,zero,45e8c <_dtoa_r+0x72c>
   4580c:	00800174 	movhi	r2,5
   45810:	10bfa744 	addi	r2,r2,-355
   45814:	20800015 	stw	r2,0(r4)
   45818:	10bfffc4 	addi	r2,r2,-1
   4581c:	dfc02017 	ldw	ra,128(sp)
   45820:	df001f17 	ldw	fp,124(sp)
   45824:	ddc01e17 	ldw	r23,120(sp)
   45828:	dd801d17 	ldw	r22,116(sp)
   4582c:	dd401c17 	ldw	r21,112(sp)
   45830:	dd001b17 	ldw	r20,108(sp)
   45834:	dcc01a17 	ldw	r19,104(sp)
   45838:	dc801917 	ldw	r18,100(sp)
   4583c:	dc401817 	ldw	r17,96(sp)
   45840:	dc001717 	ldw	r16,92(sp)
   45844:	dec02104 	addi	sp,sp,132
   45848:	f800283a 	ret
   4584c:	d8c02217 	ldw	r3,136(sp)
   45850:	d9000317 	ldw	r4,12(sp)
   45854:	0089c3c4 	movi	r2,9999
   45858:	18800015 	stw	r2,0(r3)
   4585c:	20017926 	beq	r4,zero,45e44 <_dtoa_r+0x6e4>
   45860:	00800174 	movhi	r2,5
   45864:	10bfb304 	addi	r2,r2,-308
   45868:	d9802417 	ldw	r6,144(sp)
   4586c:	303feb26 	beq	r6,zero,4581c <_dtoa_r+0xbc>
   45870:	10c000c7 	ldb	r3,3(r2)
   45874:	18017a1e 	bne	r3,zero,45e60 <_dtoa_r+0x700>
   45878:	10c000c4 	addi	r3,r2,3
   4587c:	d9c02417 	ldw	r7,144(sp)
   45880:	38c00015 	stw	r3,0(r7)
   45884:	003fe506 	br	4581c <_dtoa_r+0xbc>
   45888:	04a00034 	movhi	r18,32768
   4588c:	94bfffc4 	addi	r18,r18,-1
   45890:	8ca4703a 	and	r18,r17,r18
   45894:	00800044 	movi	r2,1
   45898:	98800015 	stw	r2,0(r19)
   4589c:	9023883a 	mov	r17,r18
   458a0:	003fcc06 	br	457d4 <_dtoa_r+0x74>
   458a4:	d9400317 	ldw	r5,12(sp)
   458a8:	d8800204 	addi	r2,sp,8
   458ac:	8828d53a 	srli	r20,r17,20
   458b0:	d8800015 	stw	r2,0(sp)
   458b4:	8009883a 	mov	r4,r16
   458b8:	900d883a 	mov	r6,r18
   458bc:	d9c00104 	addi	r7,sp,4
   458c0:	004975c0 	call	4975c <__d2b>
   458c4:	1039883a 	mov	fp,r2
   458c8:	a001671e 	bne	r20,zero,45e68 <_dtoa_r+0x708>
   458cc:	dd400217 	ldw	r21,8(sp)
   458d0:	dd000117 	ldw	r20,4(sp)
   458d4:	00befbc4 	movi	r2,-1041
   458d8:	ad29883a 	add	r20,r21,r20
   458dc:	a082d616 	blt	r20,r2,46438 <_dtoa_r+0xcd8>
   458e0:	d9800317 	ldw	r6,12(sp)
   458e4:	013f0384 	movi	r4,-1010
   458e8:	2509c83a 	sub	r4,r4,r20
   458ec:	a0810484 	addi	r2,r20,1042
   458f0:	8922983a 	sll	r17,r17,r4
   458f4:	3084d83a 	srl	r2,r6,r2
   458f8:	8888b03a 	or	r4,r17,r2
   458fc:	004d0d80 	call	4d0d8 <__floatunsidf>
   45900:	1009883a 	mov	r4,r2
   45904:	017f8434 	movhi	r5,65040
   45908:	00800044 	movi	r2,1
   4590c:	194b883a 	add	r5,r3,r5
   45910:	a53fffc4 	addi	r20,r20,-1
   45914:	d8800f15 	stw	r2,60(sp)
   45918:	000d883a 	mov	r6,zero
   4591c:	01cffe34 	movhi	r7,16376
   45920:	00428000 	call	42800 <__subdf3>
   45924:	1009883a 	mov	r4,r2
   45928:	180b883a 	mov	r5,r3
   4592c:	0198dbf4 	movhi	r6,25455
   45930:	3190d844 	addi	r6,r6,17249
   45934:	01cff4f4 	movhi	r7,16339
   45938:	39e1e9c4 	addi	r7,r7,-30809
   4593c:	00421140 	call	42114 <__muldf3>
   45940:	180b883a 	mov	r5,r3
   45944:	01a2d874 	movhi	r6,35681
   45948:	31b22cc4 	addi	r6,r6,-14157
   4594c:	01cff1f4 	movhi	r7,16327
   45950:	39e28a04 	addi	r7,r7,-30168
   45954:	1009883a 	mov	r4,r2
   45958:	0040fc40 	call	40fc4 <__adddf3>
   4595c:	a009883a 	mov	r4,r20
   45960:	1027883a 	mov	r19,r2
   45964:	1823883a 	mov	r17,r3
   45968:	004d0080 	call	4d008 <__floatsidf>
   4596c:	1009883a 	mov	r4,r2
   45970:	180b883a 	mov	r5,r3
   45974:	019427f4 	movhi	r6,20639
   45978:	319e7ec4 	addi	r6,r6,31227
   4597c:	01cff4f4 	movhi	r7,16339
   45980:	39d104c4 	addi	r7,r7,17427
   45984:	00421140 	call	42114 <__muldf3>
   45988:	9809883a 	mov	r4,r19
   4598c:	880b883a 	mov	r5,r17
   45990:	100d883a 	mov	r6,r2
   45994:	180f883a 	mov	r7,r3
   45998:	0040fc40 	call	40fc4 <__adddf3>
   4599c:	1009883a 	mov	r4,r2
   459a0:	180b883a 	mov	r5,r3
   459a4:	1027883a 	mov	r19,r2
   459a8:	1823883a 	mov	r17,r3
   459ac:	004cf880 	call	4cf88 <__fixdfsi>
   459b0:	9809883a 	mov	r4,r19
   459b4:	880b883a 	mov	r5,r17
   459b8:	000d883a 	mov	r6,zero
   459bc:	000f883a 	mov	r7,zero
   459c0:	d8800615 	stw	r2,24(sp)
   459c4:	004ce9c0 	call	4ce9c <__ledf2>
   459c8:	10028416 	blt	r2,zero,463dc <_dtoa_r+0xc7c>
   459cc:	d9000617 	ldw	r4,24(sp)
   459d0:	00800584 	movi	r2,22
   459d4:	11027236 	bltu	r2,r4,463a0 <_dtoa_r+0xc40>
   459d8:	200490fa 	slli	r2,r4,3
   459dc:	00c00174 	movhi	r3,5
   459e0:	18ffcf04 	addi	r3,r3,-196
   459e4:	d9800317 	ldw	r6,12(sp)
   459e8:	1885883a 	add	r2,r3,r2
   459ec:	11000017 	ldw	r4,0(r2)
   459f0:	11400117 	ldw	r5,4(r2)
   459f4:	900f883a 	mov	r7,r18
   459f8:	004cdc40 	call	4cdc4 <__gedf2>
   459fc:	0082930e 	bge	zero,r2,4644c <_dtoa_r+0xcec>
   45a00:	d9800617 	ldw	r6,24(sp)
   45a04:	d8000e15 	stw	zero,56(sp)
   45a08:	31bfffc4 	addi	r6,r6,-1
   45a0c:	d9800615 	stw	r6,24(sp)
   45a10:	ad2bc83a 	sub	r21,r21,r20
   45a14:	ad7fffc4 	addi	r21,r21,-1
   45a18:	a8026c16 	blt	r21,zero,463cc <_dtoa_r+0xc6c>
   45a1c:	d8000815 	stw	zero,32(sp)
   45a20:	d8800617 	ldw	r2,24(sp)
   45a24:	10026116 	blt	r2,zero,463ac <_dtoa_r+0xc4c>
   45a28:	a8ab883a 	add	r21,r21,r2
   45a2c:	d8800b15 	stw	r2,44(sp)
   45a30:	d8000a15 	stw	zero,40(sp)
   45a34:	d9c00417 	ldw	r7,16(sp)
   45a38:	00800244 	movi	r2,9
   45a3c:	11c11636 	bltu	r2,r7,45e98 <_dtoa_r+0x738>
   45a40:	00800144 	movi	r2,5
   45a44:	11c4cc0e 	bge	r2,r7,46d78 <_dtoa_r+0x1618>
   45a48:	39ffff04 	addi	r7,r7,-4
   45a4c:	d9c00415 	stw	r7,16(sp)
   45a50:	0027883a 	mov	r19,zero
   45a54:	d8c00417 	ldw	r3,16(sp)
   45a58:	008000c4 	movi	r2,3
   45a5c:	1883aa26 	beq	r3,r2,46908 <_dtoa_r+0x11a8>
   45a60:	10c35b0e 	bge	r2,r3,467d0 <_dtoa_r+0x1070>
   45a64:	d9000417 	ldw	r4,16(sp)
   45a68:	00800104 	movi	r2,4
   45a6c:	2082da26 	beq	r4,r2,465d8 <_dtoa_r+0xe78>
   45a70:	00800144 	movi	r2,5
   45a74:	2081091e 	bne	r4,r2,45e9c <_dtoa_r+0x73c>
   45a78:	01c00044 	movi	r7,1
   45a7c:	d9c00c15 	stw	r7,48(sp)
   45a80:	d8c02117 	ldw	r3,132(sp)
   45a84:	d9000617 	ldw	r4,24(sp)
   45a88:	1907883a 	add	r3,r3,r4
   45a8c:	19800044 	addi	r6,r3,1
   45a90:	d8c00d15 	stw	r3,52(sp)
   45a94:	d9800915 	stw	r6,36(sp)
   45a98:	0183a90e 	bge	zero,r6,46940 <_dtoa_r+0x11e0>
   45a9c:	d9800917 	ldw	r6,36(sp)
   45aa0:	80001115 	stw	zero,68(r16)
   45aa4:	008005c4 	movi	r2,23
   45aa8:	1184b52e 	bgeu	r2,r6,46d80 <_dtoa_r+0x1620>
   45aac:	00c00044 	movi	r3,1
   45ab0:	00800104 	movi	r2,4
   45ab4:	1085883a 	add	r2,r2,r2
   45ab8:	11000504 	addi	r4,r2,20
   45abc:	180b883a 	mov	r5,r3
   45ac0:	18c00044 	addi	r3,r3,1
   45ac4:	313ffb2e 	bgeu	r6,r4,45ab4 <_dtoa_r+0x354>
   45ac8:	81401115 	stw	r5,68(r16)
   45acc:	3023883a 	mov	r17,r6
   45ad0:	8009883a 	mov	r4,r16
   45ad4:	0048b3c0 	call	48b3c <_Balloc>
   45ad8:	d8800715 	stw	r2,28(sp)
   45adc:	80801015 	stw	r2,64(r16)
   45ae0:	00800384 	movi	r2,14
   45ae4:	1440f936 	bltu	r2,r17,45ecc <_dtoa_r+0x76c>
   45ae8:	9800f826 	beq	r19,zero,45ecc <_dtoa_r+0x76c>
   45aec:	d9c00617 	ldw	r7,24(sp)
   45af0:	01c39c0e 	bge	zero,r7,46964 <_dtoa_r+0x1204>
   45af4:	388003cc 	andi	r2,r7,15
   45af8:	100490fa 	slli	r2,r2,3
   45afc:	382dd13a 	srai	r22,r7,4
   45b00:	00c00174 	movhi	r3,5
   45b04:	18ffcf04 	addi	r3,r3,-196
   45b08:	1885883a 	add	r2,r3,r2
   45b0c:	b0c0040c 	andi	r3,r22,16
   45b10:	12800017 	ldw	r10,0(r2)
   45b14:	12400117 	ldw	r9,4(r2)
   45b18:	18038526 	beq	r3,zero,46930 <_dtoa_r+0x11d0>
   45b1c:	00800174 	movhi	r2,5
   45b20:	10bfc504 	addi	r2,r2,-236
   45b24:	11800817 	ldw	r6,32(r2)
   45b28:	11c00917 	ldw	r7,36(r2)
   45b2c:	d9000317 	ldw	r4,12(sp)
   45b30:	900b883a 	mov	r5,r18
   45b34:	da401515 	stw	r9,84(sp)
   45b38:	da801615 	stw	r10,88(sp)
   45b3c:	00418400 	call	41840 <__divdf3>
   45b40:	da401517 	ldw	r9,84(sp)
   45b44:	da801617 	ldw	r10,88(sp)
   45b48:	1027883a 	mov	r19,r2
   45b4c:	1829883a 	mov	r20,r3
   45b50:	b58003cc 	andi	r22,r22,15
   45b54:	044000c4 	movi	r17,3
   45b58:	b0001126 	beq	r22,zero,45ba0 <_dtoa_r+0x440>
   45b5c:	05c00174 	movhi	r23,5
   45b60:	bdffc504 	addi	r23,r23,-236
   45b64:	5005883a 	mov	r2,r10
   45b68:	4807883a 	mov	r3,r9
   45b6c:	b180004c 	andi	r6,r22,1
   45b70:	1009883a 	mov	r4,r2
   45b74:	b02dd07a 	srai	r22,r22,1
   45b78:	180b883a 	mov	r5,r3
   45b7c:	30000426 	beq	r6,zero,45b90 <_dtoa_r+0x430>
   45b80:	b9800017 	ldw	r6,0(r23)
   45b84:	b9c00117 	ldw	r7,4(r23)
   45b88:	8c400044 	addi	r17,r17,1
   45b8c:	00421140 	call	42114 <__muldf3>
   45b90:	bdc00204 	addi	r23,r23,8
   45b94:	b03ff51e 	bne	r22,zero,45b6c <_dtoa_r+0x40c>
   45b98:	1015883a 	mov	r10,r2
   45b9c:	1813883a 	mov	r9,r3
   45ba0:	9809883a 	mov	r4,r19
   45ba4:	a00b883a 	mov	r5,r20
   45ba8:	500d883a 	mov	r6,r10
   45bac:	480f883a 	mov	r7,r9
   45bb0:	00418400 	call	41840 <__divdf3>
   45bb4:	1027883a 	mov	r19,r2
   45bb8:	1829883a 	mov	r20,r3
   45bbc:	d8c00e17 	ldw	r3,56(sp)
   45bc0:	18000626 	beq	r3,zero,45bdc <_dtoa_r+0x47c>
   45bc4:	9809883a 	mov	r4,r19
   45bc8:	a00b883a 	mov	r5,r20
   45bcc:	000d883a 	mov	r6,zero
   45bd0:	01cffc34 	movhi	r7,16368
   45bd4:	004ce9c0 	call	4ce9c <__ledf2>
   45bd8:	10041516 	blt	r2,zero,46c30 <_dtoa_r+0x14d0>
   45bdc:	8809883a 	mov	r4,r17
   45be0:	004d0080 	call	4d008 <__floatsidf>
   45be4:	1009883a 	mov	r4,r2
   45be8:	180b883a 	mov	r5,r3
   45bec:	980d883a 	mov	r6,r19
   45bf0:	a00f883a 	mov	r7,r20
   45bf4:	00421140 	call	42114 <__muldf3>
   45bf8:	1009883a 	mov	r4,r2
   45bfc:	180b883a 	mov	r5,r3
   45c00:	000d883a 	mov	r6,zero
   45c04:	01d00734 	movhi	r7,16412
   45c08:	0040fc40 	call	40fc4 <__adddf3>
   45c0c:	1023883a 	mov	r17,r2
   45c10:	d8800917 	ldw	r2,36(sp)
   45c14:	05bf3034 	movhi	r22,64704
   45c18:	1daf883a 	add	r23,r3,r22
   45c1c:	10031e26 	beq	r2,zero,46898 <_dtoa_r+0x1138>
   45c20:	d8c00617 	ldw	r3,24(sp)
   45c24:	dac00917 	ldw	r11,36(sp)
   45c28:	d8c01315 	stw	r3,76(sp)
   45c2c:	d9000c17 	ldw	r4,48(sp)
   45c30:	20039626 	beq	r4,zero,46a8c <_dtoa_r+0x132c>
   45c34:	58bfffc4 	addi	r2,r11,-1
   45c38:	100490fa 	slli	r2,r2,3
   45c3c:	00c00174 	movhi	r3,5
   45c40:	18ffcf04 	addi	r3,r3,-196
   45c44:	0009883a 	mov	r4,zero
   45c48:	1885883a 	add	r2,r3,r2
   45c4c:	11800017 	ldw	r6,0(r2)
   45c50:	11c00117 	ldw	r7,4(r2)
   45c54:	d8800717 	ldw	r2,28(sp)
   45c58:	014ff834 	movhi	r5,16352
   45c5c:	dac01615 	stw	r11,88(sp)
   45c60:	15800044 	addi	r22,r2,1
   45c64:	00418400 	call	41840 <__divdf3>
   45c68:	880d883a 	mov	r6,r17
   45c6c:	b80f883a 	mov	r7,r23
   45c70:	1009883a 	mov	r4,r2
   45c74:	180b883a 	mov	r5,r3
   45c78:	00428000 	call	42800 <__subdf3>
   45c7c:	a00b883a 	mov	r5,r20
   45c80:	9809883a 	mov	r4,r19
   45c84:	102f883a 	mov	r23,r2
   45c88:	d8c01015 	stw	r3,64(sp)
   45c8c:	004cf880 	call	4cf88 <__fixdfsi>
   45c90:	1009883a 	mov	r4,r2
   45c94:	d8801515 	stw	r2,84(sp)
   45c98:	004d0080 	call	4d008 <__floatsidf>
   45c9c:	9809883a 	mov	r4,r19
   45ca0:	a00b883a 	mov	r5,r20
   45ca4:	100d883a 	mov	r6,r2
   45ca8:	180f883a 	mov	r7,r3
   45cac:	00428000 	call	42800 <__subdf3>
   45cb0:	da401517 	ldw	r9,84(sp)
   45cb4:	1827883a 	mov	r19,r3
   45cb8:	d8c00717 	ldw	r3,28(sp)
   45cbc:	d9401017 	ldw	r5,64(sp)
   45cc0:	4a400c04 	addi	r9,r9,48
   45cc4:	1023883a 	mov	r17,r2
   45cc8:	1a400005 	stb	r9,0(r3)
   45ccc:	b809883a 	mov	r4,r23
   45cd0:	880d883a 	mov	r6,r17
   45cd4:	980f883a 	mov	r7,r19
   45cd8:	4829883a 	mov	r20,r9
   45cdc:	004cdc40 	call	4cdc4 <__gedf2>
   45ce0:	00842216 	blt	zero,r2,46d6c <_dtoa_r+0x160c>
   45ce4:	0009883a 	mov	r4,zero
   45ce8:	014ffc34 	movhi	r5,16368
   45cec:	880d883a 	mov	r6,r17
   45cf0:	980f883a 	mov	r7,r19
   45cf4:	00428000 	call	42800 <__subdf3>
   45cf8:	d9401017 	ldw	r5,64(sp)
   45cfc:	b809883a 	mov	r4,r23
   45d00:	100d883a 	mov	r6,r2
   45d04:	180f883a 	mov	r7,r3
   45d08:	004cdc40 	call	4cdc4 <__gedf2>
   45d0c:	dac01617 	ldw	r11,88(sp)
   45d10:	00841316 	blt	zero,r2,46d60 <_dtoa_r+0x1600>
   45d14:	00800044 	movi	r2,1
   45d18:	12c06c0e 	bge	r2,r11,45ecc <_dtoa_r+0x76c>
   45d1c:	d9000717 	ldw	r4,28(sp)
   45d20:	dd401215 	stw	r21,72(sp)
   45d24:	dc001115 	stw	r16,68(sp)
   45d28:	22d7883a 	add	r11,r4,r11
   45d2c:	dc801415 	stw	r18,80(sp)
   45d30:	582b883a 	mov	r21,r11
   45d34:	b021883a 	mov	r16,r22
   45d38:	dc801017 	ldw	r18,64(sp)
   45d3c:	00000906 	br	45d64 <_dtoa_r+0x604>
   45d40:	00428000 	call	42800 <__subdf3>
   45d44:	1009883a 	mov	r4,r2
   45d48:	180b883a 	mov	r5,r3
   45d4c:	b80d883a 	mov	r6,r23
   45d50:	900f883a 	mov	r7,r18
   45d54:	004ce9c0 	call	4ce9c <__ledf2>
   45d58:	1003ea16 	blt	r2,zero,46d04 <_dtoa_r+0x15a4>
   45d5c:	b543ed26 	beq	r22,r21,46d14 <_dtoa_r+0x15b4>
   45d60:	b021883a 	mov	r16,r22
   45d64:	b809883a 	mov	r4,r23
   45d68:	900b883a 	mov	r5,r18
   45d6c:	000d883a 	mov	r6,zero
   45d70:	01d00934 	movhi	r7,16420
   45d74:	00421140 	call	42114 <__muldf3>
   45d78:	000d883a 	mov	r6,zero
   45d7c:	01d00934 	movhi	r7,16420
   45d80:	8809883a 	mov	r4,r17
   45d84:	980b883a 	mov	r5,r19
   45d88:	102f883a 	mov	r23,r2
   45d8c:	1825883a 	mov	r18,r3
   45d90:	00421140 	call	42114 <__muldf3>
   45d94:	180b883a 	mov	r5,r3
   45d98:	1009883a 	mov	r4,r2
   45d9c:	1823883a 	mov	r17,r3
   45da0:	1027883a 	mov	r19,r2
   45da4:	004cf880 	call	4cf88 <__fixdfsi>
   45da8:	1009883a 	mov	r4,r2
   45dac:	1029883a 	mov	r20,r2
   45db0:	004d0080 	call	4d008 <__floatsidf>
   45db4:	9809883a 	mov	r4,r19
   45db8:	880b883a 	mov	r5,r17
   45dbc:	100d883a 	mov	r6,r2
   45dc0:	180f883a 	mov	r7,r3
   45dc4:	00428000 	call	42800 <__subdf3>
   45dc8:	a5000c04 	addi	r20,r20,48
   45dcc:	1009883a 	mov	r4,r2
   45dd0:	180b883a 	mov	r5,r3
   45dd4:	b80d883a 	mov	r6,r23
   45dd8:	900f883a 	mov	r7,r18
   45ddc:	85000005 	stb	r20,0(r16)
   45de0:	1023883a 	mov	r17,r2
   45de4:	1827883a 	mov	r19,r3
   45de8:	004ce9c0 	call	4ce9c <__ledf2>
   45dec:	b5800044 	addi	r22,r22,1
   45df0:	0009883a 	mov	r4,zero
   45df4:	014ffc34 	movhi	r5,16368
   45df8:	880d883a 	mov	r6,r17
   45dfc:	980f883a 	mov	r7,r19
   45e00:	103fcf0e 	bge	r2,zero,45d40 <_dtoa_r+0x5e0>
   45e04:	d8c01317 	ldw	r3,76(sp)
   45e08:	dc001117 	ldw	r16,68(sp)
   45e0c:	d8c00615 	stw	r3,24(sp)
   45e10:	8009883a 	mov	r4,r16
   45e14:	e00b883a 	mov	r5,fp
   45e18:	0048be40 	call	48be4 <_Bfree>
   45e1c:	d9800617 	ldw	r6,24(sp)
   45e20:	d9c02217 	ldw	r7,136(sp)
   45e24:	b0000005 	stb	zero,0(r22)
   45e28:	30800044 	addi	r2,r6,1
   45e2c:	38800015 	stw	r2,0(r7)
   45e30:	d8802417 	ldw	r2,144(sp)
   45e34:	10026426 	beq	r2,zero,467c8 <_dtoa_r+0x1068>
   45e38:	15800015 	stw	r22,0(r2)
   45e3c:	d8800717 	ldw	r2,28(sp)
   45e40:	003e7606 	br	4581c <_dtoa_r+0xbc>
   45e44:	00800434 	movhi	r2,16
   45e48:	10bfffc4 	addi	r2,r2,-1
   45e4c:	88a2703a 	and	r17,r17,r2
   45e50:	883e831e 	bne	r17,zero,45860 <_dtoa_r+0x100>
   45e54:	00800174 	movhi	r2,5
   45e58:	10bfb004 	addi	r2,r2,-320
   45e5c:	003e8206 	br	45868 <_dtoa_r+0x108>
   45e60:	10c00204 	addi	r3,r2,8
   45e64:	003e8506 	br	4587c <_dtoa_r+0x11c>
   45e68:	01400434 	movhi	r5,16
   45e6c:	297fffc4 	addi	r5,r5,-1
   45e70:	914a703a 	and	r5,r18,r5
   45e74:	d9000317 	ldw	r4,12(sp)
   45e78:	294ffc34 	orhi	r5,r5,16368
   45e7c:	a53f0044 	addi	r20,r20,-1023
   45e80:	dd400217 	ldw	r21,8(sp)
   45e84:	d8000f15 	stw	zero,60(sp)
   45e88:	003ea306 	br	45918 <_dtoa_r+0x1b8>
   45e8c:	00800174 	movhi	r2,5
   45e90:	10bfa704 	addi	r2,r2,-356
   45e94:	003e6106 	br	4581c <_dtoa_r+0xbc>
   45e98:	d8000415 	stw	zero,16(sp)
   45e9c:	8009883a 	mov	r4,r16
   45ea0:	80001115 	stw	zero,68(r16)
   45ea4:	000b883a 	mov	r5,zero
   45ea8:	0048b3c0 	call	48b3c <_Balloc>
   45eac:	00ffffc4 	movi	r3,-1
   45eb0:	01000044 	movi	r4,1
   45eb4:	d8800715 	stw	r2,28(sp)
   45eb8:	d8c00d15 	stw	r3,52(sp)
   45ebc:	80801015 	stw	r2,64(r16)
   45ec0:	d8002115 	stw	zero,132(sp)
   45ec4:	d8c00915 	stw	r3,36(sp)
   45ec8:	d9000c15 	stw	r4,48(sp)
   45ecc:	d8800117 	ldw	r2,4(sp)
   45ed0:	10008e16 	blt	r2,zero,4610c <_dtoa_r+0x9ac>
   45ed4:	d9000617 	ldw	r4,24(sp)
   45ed8:	00c00384 	movi	r3,14
   45edc:	19008b16 	blt	r3,r4,4610c <_dtoa_r+0x9ac>
   45ee0:	200490fa 	slli	r2,r4,3
   45ee4:	d9802117 	ldw	r6,132(sp)
   45ee8:	00c00174 	movhi	r3,5
   45eec:	18ffcf04 	addi	r3,r3,-196
   45ef0:	1885883a 	add	r2,r3,r2
   45ef4:	14400017 	ldw	r17,0(r2)
   45ef8:	14c00117 	ldw	r19,4(r2)
   45efc:	3001be16 	blt	r6,zero,465f8 <_dtoa_r+0xe98>
   45f00:	d9000317 	ldw	r4,12(sp)
   45f04:	880d883a 	mov	r6,r17
   45f08:	980f883a 	mov	r7,r19
   45f0c:	900b883a 	mov	r5,r18
   45f10:	00418400 	call	41840 <__divdf3>
   45f14:	180b883a 	mov	r5,r3
   45f18:	1009883a 	mov	r4,r2
   45f1c:	004cf880 	call	4cf88 <__fixdfsi>
   45f20:	1009883a 	mov	r4,r2
   45f24:	102f883a 	mov	r23,r2
   45f28:	004d0080 	call	4d008 <__floatsidf>
   45f2c:	1009883a 	mov	r4,r2
   45f30:	180b883a 	mov	r5,r3
   45f34:	880d883a 	mov	r6,r17
   45f38:	980f883a 	mov	r7,r19
   45f3c:	00421140 	call	42114 <__muldf3>
   45f40:	d9000317 	ldw	r4,12(sp)
   45f44:	900b883a 	mov	r5,r18
   45f48:	100d883a 	mov	r6,r2
   45f4c:	180f883a 	mov	r7,r3
   45f50:	00428000 	call	42800 <__subdf3>
   45f54:	d9c00717 	ldw	r7,28(sp)
   45f58:	1009883a 	mov	r4,r2
   45f5c:	b8800c04 	addi	r2,r23,48
   45f60:	38800005 	stb	r2,0(r7)
   45f64:	3d800044 	addi	r22,r7,1
   45f68:	d9c00917 	ldw	r7,36(sp)
   45f6c:	01800044 	movi	r6,1
   45f70:	180b883a 	mov	r5,r3
   45f74:	2005883a 	mov	r2,r4
   45f78:	39803e26 	beq	r7,r6,46074 <_dtoa_r+0x914>
   45f7c:	000d883a 	mov	r6,zero
   45f80:	01d00934 	movhi	r7,16420
   45f84:	00421140 	call	42114 <__muldf3>
   45f88:	1009883a 	mov	r4,r2
   45f8c:	180b883a 	mov	r5,r3
   45f90:	000d883a 	mov	r6,zero
   45f94:	000f883a 	mov	r7,zero
   45f98:	1029883a 	mov	r20,r2
   45f9c:	182b883a 	mov	r21,r3
   45fa0:	004cd400 	call	4cd40 <__eqdf2>
   45fa4:	103f9a26 	beq	r2,zero,45e10 <_dtoa_r+0x6b0>
   45fa8:	d8c00717 	ldw	r3,28(sp)
   45fac:	d9000917 	ldw	r4,36(sp)
   45fb0:	b025883a 	mov	r18,r22
   45fb4:	df000415 	stw	fp,16(sp)
   45fb8:	1905883a 	add	r2,r3,r4
   45fbc:	15ffffc4 	addi	r23,r2,-1
   45fc0:	dc000315 	stw	r16,12(sp)
   45fc4:	00000a06 	br	45ff0 <_dtoa_r+0x890>
   45fc8:	00421140 	call	42114 <__muldf3>
   45fcc:	1009883a 	mov	r4,r2
   45fd0:	180b883a 	mov	r5,r3
   45fd4:	000d883a 	mov	r6,zero
   45fd8:	000f883a 	mov	r7,zero
   45fdc:	1029883a 	mov	r20,r2
   45fe0:	182b883a 	mov	r21,r3
   45fe4:	004cd400 	call	4cd40 <__eqdf2>
   45fe8:	10021926 	beq	r2,zero,46850 <_dtoa_r+0x10f0>
   45fec:	e025883a 	mov	r18,fp
   45ff0:	880d883a 	mov	r6,r17
   45ff4:	980f883a 	mov	r7,r19
   45ff8:	a009883a 	mov	r4,r20
   45ffc:	a80b883a 	mov	r5,r21
   46000:	00418400 	call	41840 <__divdf3>
   46004:	180b883a 	mov	r5,r3
   46008:	1009883a 	mov	r4,r2
   4600c:	004cf880 	call	4cf88 <__fixdfsi>
   46010:	1009883a 	mov	r4,r2
   46014:	1021883a 	mov	r16,r2
   46018:	004d0080 	call	4d008 <__floatsidf>
   4601c:	1009883a 	mov	r4,r2
   46020:	180b883a 	mov	r5,r3
   46024:	880d883a 	mov	r6,r17
   46028:	980f883a 	mov	r7,r19
   4602c:	00421140 	call	42114 <__muldf3>
   46030:	a009883a 	mov	r4,r20
   46034:	a80b883a 	mov	r5,r21
   46038:	100d883a 	mov	r6,r2
   4603c:	180f883a 	mov	r7,r3
   46040:	00428000 	call	42800 <__subdf3>
   46044:	82800c04 	addi	r10,r16,48
   46048:	97000044 	addi	fp,r18,1
   4604c:	92800005 	stb	r10,0(r18)
   46050:	000d883a 	mov	r6,zero
   46054:	01d00934 	movhi	r7,16420
   46058:	1009883a 	mov	r4,r2
   4605c:	180b883a 	mov	r5,r3
   46060:	e02d883a 	mov	r22,fp
   46064:	95ffd81e 	bne	r18,r23,45fc8 <_dtoa_r+0x868>
   46068:	802f883a 	mov	r23,r16
   4606c:	df000417 	ldw	fp,16(sp)
   46070:	dc000317 	ldw	r16,12(sp)
   46074:	1009883a 	mov	r4,r2
   46078:	180b883a 	mov	r5,r3
   4607c:	100d883a 	mov	r6,r2
   46080:	180f883a 	mov	r7,r3
   46084:	0040fc40 	call	40fc4 <__adddf3>
   46088:	8809883a 	mov	r4,r17
   4608c:	980b883a 	mov	r5,r19
   46090:	100d883a 	mov	r6,r2
   46094:	180f883a 	mov	r7,r3
   46098:	1025883a 	mov	r18,r2
   4609c:	1829883a 	mov	r20,r3
   460a0:	004ce9c0 	call	4ce9c <__ledf2>
   460a4:	10000816 	blt	r2,zero,460c8 <_dtoa_r+0x968>
   460a8:	8809883a 	mov	r4,r17
   460ac:	980b883a 	mov	r5,r19
   460b0:	900d883a 	mov	r6,r18
   460b4:	a00f883a 	mov	r7,r20
   460b8:	004cd400 	call	4cd40 <__eqdf2>
   460bc:	103f541e 	bne	r2,zero,45e10 <_dtoa_r+0x6b0>
   460c0:	bdc0004c 	andi	r23,r23,1
   460c4:	b83f5226 	beq	r23,zero,45e10 <_dtoa_r+0x6b0>
   460c8:	b53fffc3 	ldbu	r20,-1(r22)
   460cc:	b0ffff84 	addi	r3,r22,-2
   460d0:	01400e44 	movi	r5,57
   460d4:	d9800717 	ldw	r6,28(sp)
   460d8:	00000406 	br	460ec <_dtoa_r+0x98c>
   460dc:	30824326 	beq	r6,r2,469ec <_dtoa_r+0x128c>
   460e0:	1d000003 	ldbu	r20,0(r3)
   460e4:	102d883a 	mov	r22,r2
   460e8:	18ffffc4 	addi	r3,r3,-1
   460ec:	a1003fcc 	andi	r4,r20,255
   460f0:	2100201c 	xori	r4,r4,128
   460f4:	213fe004 	addi	r4,r4,-128
   460f8:	b0bfffc4 	addi	r2,r22,-1
   460fc:	217ff726 	beq	r4,r5,460dc <_dtoa_r+0x97c>
   46100:	a2400044 	addi	r9,r20,1
   46104:	12400005 	stb	r9,0(r2)
   46108:	003f4106 	br	45e10 <_dtoa_r+0x6b0>
   4610c:	d9000c17 	ldw	r4,48(sp)
   46110:	2000be26 	beq	r4,zero,4640c <_dtoa_r+0xcac>
   46114:	d9800417 	ldw	r6,16(sp)
   46118:	00c00044 	movi	r3,1
   4611c:	19815e0e 	bge	r3,r6,46698 <_dtoa_r+0xf38>
   46120:	d8800917 	ldw	r2,36(sp)
   46124:	d8c00a17 	ldw	r3,40(sp)
   46128:	153fffc4 	addi	r20,r2,-1
   4612c:	1d01f816 	blt	r3,r20,46910 <_dtoa_r+0x11b0>
   46130:	1d29c83a 	sub	r20,r3,r20
   46134:	d9c00917 	ldw	r7,36(sp)
   46138:	3802ad16 	blt	r7,zero,46bf0 <_dtoa_r+0x1490>
   4613c:	dcc00817 	ldw	r19,32(sp)
   46140:	d8800917 	ldw	r2,36(sp)
   46144:	d8c00817 	ldw	r3,32(sp)
   46148:	8009883a 	mov	r4,r16
   4614c:	01400044 	movi	r5,1
   46150:	1887883a 	add	r3,r3,r2
   46154:	d8c00815 	stw	r3,32(sp)
   46158:	a8ab883a 	add	r21,r21,r2
   4615c:	0048f3c0 	call	48f3c <__i2b>
   46160:	1023883a 	mov	r17,r2
   46164:	98000826 	beq	r19,zero,46188 <_dtoa_r+0xa28>
   46168:	0540070e 	bge	zero,r21,46188 <_dtoa_r+0xa28>
   4616c:	a805883a 	mov	r2,r21
   46170:	9d411716 	blt	r19,r21,465d0 <_dtoa_r+0xe70>
   46174:	d9000817 	ldw	r4,32(sp)
   46178:	98a7c83a 	sub	r19,r19,r2
   4617c:	a8abc83a 	sub	r21,r21,r2
   46180:	2089c83a 	sub	r4,r4,r2
   46184:	d9000815 	stw	r4,32(sp)
   46188:	d9800a17 	ldw	r6,40(sp)
   4618c:	0180140e 	bge	zero,r6,461e0 <_dtoa_r+0xa80>
   46190:	d9c00c17 	ldw	r7,48(sp)
   46194:	3801d626 	beq	r7,zero,468f0 <_dtoa_r+0x1190>
   46198:	05000e0e 	bge	zero,r20,461d4 <_dtoa_r+0xa74>
   4619c:	880b883a 	mov	r5,r17
   461a0:	8009883a 	mov	r4,r16
   461a4:	a00d883a 	mov	r6,r20
   461a8:	00491640 	call	49164 <__pow5mult>
   461ac:	e00d883a 	mov	r6,fp
   461b0:	8009883a 	mov	r4,r16
   461b4:	100b883a 	mov	r5,r2
   461b8:	1023883a 	mov	r17,r2
   461bc:	0048f780 	call	48f78 <__multiply>
   461c0:	102d883a 	mov	r22,r2
   461c4:	e00b883a 	mov	r5,fp
   461c8:	8009883a 	mov	r4,r16
   461cc:	0048be40 	call	48be4 <_Bfree>
   461d0:	b039883a 	mov	fp,r22
   461d4:	d8800a17 	ldw	r2,40(sp)
   461d8:	150dc83a 	sub	r6,r2,r20
   461dc:	30011f1e 	bne	r6,zero,4665c <_dtoa_r+0xefc>
   461e0:	8009883a 	mov	r4,r16
   461e4:	01400044 	movi	r5,1
   461e8:	0048f3c0 	call	48f3c <__i2b>
   461ec:	d8c00b17 	ldw	r3,44(sp)
   461f0:	1029883a 	mov	r20,r2
   461f4:	00c0050e 	bge	zero,r3,4620c <_dtoa_r+0xaac>
   461f8:	8009883a 	mov	r4,r16
   461fc:	100b883a 	mov	r5,r2
   46200:	180d883a 	mov	r6,r3
   46204:	00491640 	call	49164 <__pow5mult>
   46208:	1029883a 	mov	r20,r2
   4620c:	d9000417 	ldw	r4,16(sp)
   46210:	00800044 	movi	r2,1
   46214:	1100e00e 	bge	r2,r4,46598 <_dtoa_r+0xe38>
   46218:	0025883a 	mov	r18,zero
   4621c:	d8800b17 	ldw	r2,44(sp)
   46220:	10015f1e 	bne	r2,zero,467a0 <_dtoa_r+0x1040>
   46224:	00800044 	movi	r2,1
   46228:	1545883a 	add	r2,r2,r21
   4622c:	108007cc 	andi	r2,r2,31
   46230:	10007a26 	beq	r2,zero,4641c <_dtoa_r+0xcbc>
   46234:	01000804 	movi	r4,32
   46238:	2089c83a 	sub	r4,r4,r2
   4623c:	00c00104 	movi	r3,4
   46240:	1902d20e 	bge	r3,r4,46d8c <_dtoa_r+0x162c>
   46244:	00c00704 	movi	r3,28
   46248:	1885c83a 	sub	r2,r3,r2
   4624c:	d8c00817 	ldw	r3,32(sp)
   46250:	98a7883a 	add	r19,r19,r2
   46254:	a8ab883a 	add	r21,r21,r2
   46258:	1887883a 	add	r3,r3,r2
   4625c:	d8c00815 	stw	r3,32(sp)
   46260:	d9800817 	ldw	r6,32(sp)
   46264:	0180040e 	bge	zero,r6,46278 <_dtoa_r+0xb18>
   46268:	e00b883a 	mov	r5,fp
   4626c:	8009883a 	mov	r4,r16
   46270:	00492ac0 	call	492ac <__lshift>
   46274:	1039883a 	mov	fp,r2
   46278:	0540050e 	bge	zero,r21,46290 <_dtoa_r+0xb30>
   4627c:	a00b883a 	mov	r5,r20
   46280:	8009883a 	mov	r4,r16
   46284:	a80d883a 	mov	r6,r21
   46288:	00492ac0 	call	492ac <__lshift>
   4628c:	1029883a 	mov	r20,r2
   46290:	d9c00e17 	ldw	r7,56(sp)
   46294:	3801301e 	bne	r7,zero,46758 <_dtoa_r+0xff8>
   46298:	d9c00917 	ldw	r7,36(sp)
   4629c:	01c1500e 	bge	zero,r7,467e0 <_dtoa_r+0x1080>
   462a0:	d8800c17 	ldw	r2,48(sp)
   462a4:	10006b1e 	bne	r2,zero,46454 <_dtoa_r+0xcf4>
   462a8:	dc800717 	ldw	r18,28(sp)
   462ac:	dcc00917 	ldw	r19,36(sp)
   462b0:	902b883a 	mov	r21,r18
   462b4:	00000206 	br	462c0 <_dtoa_r+0xb60>
   462b8:	0048c0c0 	call	48c0c <__multadd>
   462bc:	1039883a 	mov	fp,r2
   462c0:	e009883a 	mov	r4,fp
   462c4:	a00b883a 	mov	r5,r20
   462c8:	004555c0 	call	4555c <quorem>
   462cc:	10800c04 	addi	r2,r2,48
   462d0:	90800005 	stb	r2,0(r18)
   462d4:	94800044 	addi	r18,r18,1
   462d8:	9547c83a 	sub	r3,r18,r21
   462dc:	8009883a 	mov	r4,r16
   462e0:	e00b883a 	mov	r5,fp
   462e4:	01800284 	movi	r6,10
   462e8:	000f883a 	mov	r7,zero
   462ec:	1cfff216 	blt	r3,r19,462b8 <_dtoa_r+0xb58>
   462f0:	102f883a 	mov	r23,r2
   462f4:	d8800917 	ldw	r2,36(sp)
   462f8:	0082410e 	bge	zero,r2,46c00 <_dtoa_r+0x14a0>
   462fc:	d9000717 	ldw	r4,28(sp)
   46300:	002b883a 	mov	r21,zero
   46304:	20ad883a 	add	r22,r4,r2
   46308:	e00b883a 	mov	r5,fp
   4630c:	8009883a 	mov	r4,r16
   46310:	01800044 	movi	r6,1
   46314:	00492ac0 	call	492ac <__lshift>
   46318:	1009883a 	mov	r4,r2
   4631c:	a00b883a 	mov	r5,r20
   46320:	1039883a 	mov	fp,r2
   46324:	00493fc0 	call	493fc <__mcmp>
   46328:	0080d10e 	bge	zero,r2,46670 <_dtoa_r+0xf10>
   4632c:	b13fffc3 	ldbu	r4,-1(r22)
   46330:	b0ffff84 	addi	r3,r22,-2
   46334:	01800e44 	movi	r6,57
   46338:	d9c00717 	ldw	r7,28(sp)
   4633c:	00000406 	br	46350 <_dtoa_r+0xbf0>
   46340:	38813c26 	beq	r7,r2,46834 <_dtoa_r+0x10d4>
   46344:	19000003 	ldbu	r4,0(r3)
   46348:	102d883a 	mov	r22,r2
   4634c:	18ffffc4 	addi	r3,r3,-1
   46350:	21403fcc 	andi	r5,r4,255
   46354:	2940201c 	xori	r5,r5,128
   46358:	297fe004 	addi	r5,r5,-128
   4635c:	b0bfffc4 	addi	r2,r22,-1
   46360:	29bff726 	beq	r5,r6,46340 <_dtoa_r+0xbe0>
   46364:	21000044 	addi	r4,r4,1
   46368:	11000005 	stb	r4,0(r2)
   4636c:	8009883a 	mov	r4,r16
   46370:	a00b883a 	mov	r5,r20
   46374:	0048be40 	call	48be4 <_Bfree>
   46378:	883ea526 	beq	r17,zero,45e10 <_dtoa_r+0x6b0>
   4637c:	a8000426 	beq	r21,zero,46390 <_dtoa_r+0xc30>
   46380:	ac400326 	beq	r21,r17,46390 <_dtoa_r+0xc30>
   46384:	8009883a 	mov	r4,r16
   46388:	a80b883a 	mov	r5,r21
   4638c:	0048be40 	call	48be4 <_Bfree>
   46390:	8009883a 	mov	r4,r16
   46394:	880b883a 	mov	r5,r17
   46398:	0048be40 	call	48be4 <_Bfree>
   4639c:	003e9c06 	br	45e10 <_dtoa_r+0x6b0>
   463a0:	01c00044 	movi	r7,1
   463a4:	d9c00e15 	stw	r7,56(sp)
   463a8:	003d9906 	br	45a10 <_dtoa_r+0x2b0>
   463ac:	d8c00817 	ldw	r3,32(sp)
   463b0:	d9000617 	ldw	r4,24(sp)
   463b4:	d8000b15 	stw	zero,44(sp)
   463b8:	1907c83a 	sub	r3,r3,r4
   463bc:	010dc83a 	sub	r6,zero,r4
   463c0:	d8c00815 	stw	r3,32(sp)
   463c4:	d9800a15 	stw	r6,40(sp)
   463c8:	003d9a06 	br	45a34 <_dtoa_r+0x2d4>
   463cc:	056bc83a 	sub	r21,zero,r21
   463d0:	dd400815 	stw	r21,32(sp)
   463d4:	002b883a 	mov	r21,zero
   463d8:	003d9106 	br	45a20 <_dtoa_r+0x2c0>
   463dc:	d9000617 	ldw	r4,24(sp)
   463e0:	004d0080 	call	4d008 <__floatsidf>
   463e4:	1009883a 	mov	r4,r2
   463e8:	180b883a 	mov	r5,r3
   463ec:	980d883a 	mov	r6,r19
   463f0:	880f883a 	mov	r7,r17
   463f4:	004cd400 	call	4cd40 <__eqdf2>
   463f8:	103d7426 	beq	r2,zero,459cc <_dtoa_r+0x26c>
   463fc:	d8c00617 	ldw	r3,24(sp)
   46400:	18ffffc4 	addi	r3,r3,-1
   46404:	d8c00615 	stw	r3,24(sp)
   46408:	003d7006 	br	459cc <_dtoa_r+0x26c>
   4640c:	dd000a17 	ldw	r20,40(sp)
   46410:	dcc00817 	ldw	r19,32(sp)
   46414:	0023883a 	mov	r17,zero
   46418:	003f5206 	br	46164 <_dtoa_r+0xa04>
   4641c:	00800704 	movi	r2,28
   46420:	d9000817 	ldw	r4,32(sp)
   46424:	98a7883a 	add	r19,r19,r2
   46428:	a8ab883a 	add	r21,r21,r2
   4642c:	2089883a 	add	r4,r4,r2
   46430:	d9000815 	stw	r4,32(sp)
   46434:	003f8a06 	br	46260 <_dtoa_r+0xb00>
   46438:	d9c00317 	ldw	r7,12(sp)
   4643c:	013efb84 	movi	r4,-1042
   46440:	2509c83a 	sub	r4,r4,r20
   46444:	3908983a 	sll	r4,r7,r4
   46448:	003d2c06 	br	458fc <_dtoa_r+0x19c>
   4644c:	d8000e15 	stw	zero,56(sp)
   46450:	003d6f06 	br	45a10 <_dtoa_r+0x2b0>
   46454:	04c0050e 	bge	zero,r19,4646c <_dtoa_r+0xd0c>
   46458:	880b883a 	mov	r5,r17
   4645c:	8009883a 	mov	r4,r16
   46460:	980d883a 	mov	r6,r19
   46464:	00492ac0 	call	492ac <__lshift>
   46468:	1023883a 	mov	r17,r2
   4646c:	9001681e 	bne	r18,zero,46a10 <_dtoa_r+0x12b0>
   46470:	8827883a 	mov	r19,r17
   46474:	d8c00717 	ldw	r3,28(sp)
   46478:	d9000917 	ldw	r4,36(sp)
   4647c:	1dffffc4 	addi	r23,r3,-1
   46480:	1825883a 	mov	r18,r3
   46484:	d8c00317 	ldw	r3,12(sp)
   46488:	b92f883a 	add	r23,r23,r4
   4648c:	ddc00515 	stw	r23,20(sp)
   46490:	18c0004c 	andi	r3,r3,1
   46494:	d8c00315 	stw	r3,12(sp)
   46498:	e009883a 	mov	r4,fp
   4649c:	a00b883a 	mov	r5,r20
   464a0:	004555c0 	call	4555c <quorem>
   464a4:	e009883a 	mov	r4,fp
   464a8:	880b883a 	mov	r5,r17
   464ac:	102d883a 	mov	r22,r2
   464b0:	00493fc0 	call	493fc <__mcmp>
   464b4:	8009883a 	mov	r4,r16
   464b8:	a00b883a 	mov	r5,r20
   464bc:	980d883a 	mov	r6,r19
   464c0:	102b883a 	mov	r21,r2
   464c4:	004945c0 	call	4945c <__mdiff>
   464c8:	1007883a 	mov	r3,r2
   464cc:	10800317 	ldw	r2,12(r2)
   464d0:	b5c00c04 	addi	r23,r22,48
   464d4:	10009b1e 	bne	r2,zero,46744 <_dtoa_r+0xfe4>
   464d8:	180b883a 	mov	r5,r3
   464dc:	e009883a 	mov	r4,fp
   464e0:	d8c01515 	stw	r3,84(sp)
   464e4:	00493fc0 	call	493fc <__mcmp>
   464e8:	d8c01517 	ldw	r3,84(sp)
   464ec:	8009883a 	mov	r4,r16
   464f0:	d8801515 	stw	r2,84(sp)
   464f4:	180b883a 	mov	r5,r3
   464f8:	0048be40 	call	48be4 <_Bfree>
   464fc:	d8801517 	ldw	r2,84(sp)
   46500:	1000041e 	bne	r2,zero,46514 <_dtoa_r+0xdb4>
   46504:	d9000417 	ldw	r4,16(sp)
   46508:	2000021e 	bne	r4,zero,46514 <_dtoa_r+0xdb4>
   4650c:	d8c00317 	ldw	r3,12(sp)
   46510:	18007926 	beq	r3,zero,466f8 <_dtoa_r+0xf98>
   46514:	a8006616 	blt	r21,zero,466b0 <_dtoa_r+0xf50>
   46518:	a800041e 	bne	r21,zero,4652c <_dtoa_r+0xdcc>
   4651c:	d9000417 	ldw	r4,16(sp)
   46520:	2000021e 	bne	r4,zero,4652c <_dtoa_r+0xdcc>
   46524:	d8c00317 	ldw	r3,12(sp)
   46528:	18006126 	beq	r3,zero,466b0 <_dtoa_r+0xf50>
   4652c:	00814916 	blt	zero,r2,46a54 <_dtoa_r+0x12f4>
   46530:	d8c00517 	ldw	r3,20(sp)
   46534:	95400044 	addi	r21,r18,1
   46538:	95c00005 	stb	r23,0(r18)
   4653c:	a82d883a 	mov	r22,r21
   46540:	90c14c26 	beq	r18,r3,46a74 <_dtoa_r+0x1314>
   46544:	e00b883a 	mov	r5,fp
   46548:	8009883a 	mov	r4,r16
   4654c:	01800284 	movi	r6,10
   46550:	000f883a 	mov	r7,zero
   46554:	0048c0c0 	call	48c0c <__multadd>
   46558:	1039883a 	mov	fp,r2
   4655c:	8cc07026 	beq	r17,r19,46720 <_dtoa_r+0xfc0>
   46560:	880b883a 	mov	r5,r17
   46564:	01800284 	movi	r6,10
   46568:	000f883a 	mov	r7,zero
   4656c:	8009883a 	mov	r4,r16
   46570:	0048c0c0 	call	48c0c <__multadd>
   46574:	980b883a 	mov	r5,r19
   46578:	8009883a 	mov	r4,r16
   4657c:	01800284 	movi	r6,10
   46580:	000f883a 	mov	r7,zero
   46584:	1023883a 	mov	r17,r2
   46588:	0048c0c0 	call	48c0c <__multadd>
   4658c:	1027883a 	mov	r19,r2
   46590:	a825883a 	mov	r18,r21
   46594:	003fc006 	br	46498 <_dtoa_r+0xd38>
   46598:	d9800317 	ldw	r6,12(sp)
   4659c:	303f1e1e 	bne	r6,zero,46218 <_dtoa_r+0xab8>
   465a0:	00c00434 	movhi	r3,16
   465a4:	18ffffc4 	addi	r3,r3,-1
   465a8:	90c6703a 	and	r3,r18,r3
   465ac:	183f1a1e 	bne	r3,zero,46218 <_dtoa_r+0xab8>
   465b0:	949ffc2c 	andhi	r18,r18,32752
   465b4:	903f1826 	beq	r18,zero,46218 <_dtoa_r+0xab8>
   465b8:	d9c00817 	ldw	r7,32(sp)
   465bc:	a8ab883a 	add	r21,r21,r2
   465c0:	1025883a 	mov	r18,r2
   465c4:	388f883a 	add	r7,r7,r2
   465c8:	d9c00815 	stw	r7,32(sp)
   465cc:	003f1306 	br	4621c <_dtoa_r+0xabc>
   465d0:	9805883a 	mov	r2,r19
   465d4:	003ee706 	br	46174 <_dtoa_r+0xa14>
   465d8:	01800044 	movi	r6,1
   465dc:	d9800c15 	stw	r6,48(sp)
   465e0:	d8802117 	ldw	r2,132(sp)
   465e4:	0080da0e 	bge	zero,r2,46950 <_dtoa_r+0x11f0>
   465e8:	100d883a 	mov	r6,r2
   465ec:	d8800d15 	stw	r2,52(sp)
   465f0:	d8800915 	stw	r2,36(sp)
   465f4:	003d2a06 	br	45aa0 <_dtoa_r+0x340>
   465f8:	d8800917 	ldw	r2,36(sp)
   465fc:	00be4016 	blt	zero,r2,45f00 <_dtoa_r+0x7a0>
   46600:	1000b81e 	bne	r2,zero,468e4 <_dtoa_r+0x1184>
   46604:	8809883a 	mov	r4,r17
   46608:	980b883a 	mov	r5,r19
   4660c:	000d883a 	mov	r6,zero
   46610:	01d00534 	movhi	r7,16404
   46614:	00421140 	call	42114 <__muldf3>
   46618:	d9800317 	ldw	r6,12(sp)
   4661c:	1009883a 	mov	r4,r2
   46620:	180b883a 	mov	r5,r3
   46624:	900f883a 	mov	r7,r18
   46628:	004cdc40 	call	4cdc4 <__gedf2>
   4662c:	0029883a 	mov	r20,zero
   46630:	0023883a 	mov	r17,zero
   46634:	10007716 	blt	r2,zero,46814 <_dtoa_r+0x10b4>
   46638:	d9002117 	ldw	r4,132(sp)
   4663c:	dd800717 	ldw	r22,28(sp)
   46640:	0108303a 	nor	r4,zero,r4
   46644:	d9000615 	stw	r4,24(sp)
   46648:	8009883a 	mov	r4,r16
   4664c:	a00b883a 	mov	r5,r20
   46650:	0048be40 	call	48be4 <_Bfree>
   46654:	883f4e1e 	bne	r17,zero,46390 <_dtoa_r+0xc30>
   46658:	003ded06 	br	45e10 <_dtoa_r+0x6b0>
   4665c:	e00b883a 	mov	r5,fp
   46660:	8009883a 	mov	r4,r16
   46664:	00491640 	call	49164 <__pow5mult>
   46668:	1039883a 	mov	fp,r2
   4666c:	003edc06 	br	461e0 <_dtoa_r+0xa80>
   46670:	1000021e 	bne	r2,zero,4667c <_dtoa_r+0xf1c>
   46674:	ba40004c 	andi	r9,r23,1
   46678:	483f2c1e 	bne	r9,zero,4632c <_dtoa_r+0xbcc>
   4667c:	01000c04 	movi	r4,48
   46680:	00000106 	br	46688 <_dtoa_r+0xf28>
   46684:	102d883a 	mov	r22,r2
   46688:	b0bfffc4 	addi	r2,r22,-1
   4668c:	10c00007 	ldb	r3,0(r2)
   46690:	193ffc26 	beq	r3,r4,46684 <_dtoa_r+0xf24>
   46694:	003f3506 	br	4636c <_dtoa_r+0xc0c>
   46698:	d9c00f17 	ldw	r7,60(sp)
   4669c:	38015a26 	beq	r7,zero,46c08 <_dtoa_r+0x14a8>
   466a0:	10810cc4 	addi	r2,r2,1075
   466a4:	dd000a17 	ldw	r20,40(sp)
   466a8:	dcc00817 	ldw	r19,32(sp)
   466ac:	003ea506 	br	46144 <_dtoa_r+0x9e4>
   466b0:	00800c0e 	bge	zero,r2,466e4 <_dtoa_r+0xf84>
   466b4:	e00b883a 	mov	r5,fp
   466b8:	8009883a 	mov	r4,r16
   466bc:	01800044 	movi	r6,1
   466c0:	00492ac0 	call	492ac <__lshift>
   466c4:	1009883a 	mov	r4,r2
   466c8:	a00b883a 	mov	r5,r20
   466cc:	1039883a 	mov	fp,r2
   466d0:	00493fc0 	call	493fc <__mcmp>
   466d4:	0081930e 	bge	zero,r2,46d24 <_dtoa_r+0x15c4>
   466d8:	00800e44 	movi	r2,57
   466dc:	b8800a26 	beq	r23,r2,46708 <_dtoa_r+0xfa8>
   466e0:	b5c00c44 	addi	r23,r22,49
   466e4:	882b883a 	mov	r21,r17
   466e8:	95800044 	addi	r22,r18,1
   466ec:	95c00005 	stb	r23,0(r18)
   466f0:	9823883a 	mov	r17,r19
   466f4:	003f1d06 	br	4636c <_dtoa_r+0xc0c>
   466f8:	00800e44 	movi	r2,57
   466fc:	b8800226 	beq	r23,r2,46708 <_dtoa_r+0xfa8>
   46700:	057ff716 	blt	zero,r21,466e0 <_dtoa_r+0xf80>
   46704:	003ff706 	br	466e4 <_dtoa_r+0xf84>
   46708:	01000e44 	movi	r4,57
   4670c:	882b883a 	mov	r21,r17
   46710:	95800044 	addi	r22,r18,1
   46714:	91000005 	stb	r4,0(r18)
   46718:	9823883a 	mov	r17,r19
   4671c:	003f0406 	br	46330 <_dtoa_r+0xbd0>
   46720:	880b883a 	mov	r5,r17
   46724:	8009883a 	mov	r4,r16
   46728:	01800284 	movi	r6,10
   4672c:	000f883a 	mov	r7,zero
   46730:	0048c0c0 	call	48c0c <__multadd>
   46734:	1023883a 	mov	r17,r2
   46738:	1027883a 	mov	r19,r2
   4673c:	a825883a 	mov	r18,r21
   46740:	003f5506 	br	46498 <_dtoa_r+0xd38>
   46744:	8009883a 	mov	r4,r16
   46748:	180b883a 	mov	r5,r3
   4674c:	0048be40 	call	48be4 <_Bfree>
   46750:	00800044 	movi	r2,1
   46754:	003f6f06 	br	46514 <_dtoa_r+0xdb4>
   46758:	e009883a 	mov	r4,fp
   4675c:	a00b883a 	mov	r5,r20
   46760:	00493fc0 	call	493fc <__mcmp>
   46764:	103ecc0e 	bge	r2,zero,46298 <_dtoa_r+0xb38>
   46768:	e00b883a 	mov	r5,fp
   4676c:	8009883a 	mov	r4,r16
   46770:	01800284 	movi	r6,10
   46774:	000f883a 	mov	r7,zero
   46778:	0048c0c0 	call	48c0c <__multadd>
   4677c:	1039883a 	mov	fp,r2
   46780:	d8800617 	ldw	r2,24(sp)
   46784:	d8c00c17 	ldw	r3,48(sp)
   46788:	10bfffc4 	addi	r2,r2,-1
   4678c:	d8800615 	stw	r2,24(sp)
   46790:	1801681e 	bne	r3,zero,46d34 <_dtoa_r+0x15d4>
   46794:	d9800d17 	ldw	r6,52(sp)
   46798:	d9800915 	stw	r6,36(sp)
   4679c:	003ebe06 	br	46298 <_dtoa_r+0xb38>
   467a0:	a0800417 	ldw	r2,16(r20)
   467a4:	10800104 	addi	r2,r2,4
   467a8:	1085883a 	add	r2,r2,r2
   467ac:	1085883a 	add	r2,r2,r2
   467b0:	a085883a 	add	r2,r20,r2
   467b4:	11000017 	ldw	r4,0(r2)
   467b8:	0048e240 	call	48e24 <__hi0bits>
   467bc:	00c00804 	movi	r3,32
   467c0:	1885c83a 	sub	r2,r3,r2
   467c4:	003e9806 	br	46228 <_dtoa_r+0xac8>
   467c8:	d8800717 	ldw	r2,28(sp)
   467cc:	003c1306 	br	4581c <_dtoa_r+0xbc>
   467d0:	00800084 	movi	r2,2
   467d4:	18bdb11e 	bne	r3,r2,45e9c <_dtoa_r+0x73c>
   467d8:	d8000c15 	stw	zero,48(sp)
   467dc:	003f8006 	br	465e0 <_dtoa_r+0xe80>
   467e0:	d8c00417 	ldw	r3,16(sp)
   467e4:	00800084 	movi	r2,2
   467e8:	10fead0e 	bge	r2,r3,462a0 <_dtoa_r+0xb40>
   467ec:	383f921e 	bne	r7,zero,46638 <_dtoa_r+0xed8>
   467f0:	a00b883a 	mov	r5,r20
   467f4:	8009883a 	mov	r4,r16
   467f8:	01800144 	movi	r6,5
   467fc:	0048c0c0 	call	48c0c <__multadd>
   46800:	e009883a 	mov	r4,fp
   46804:	100b883a 	mov	r5,r2
   46808:	1029883a 	mov	r20,r2
   4680c:	00493fc0 	call	493fc <__mcmp>
   46810:	00bf890e 	bge	zero,r2,46638 <_dtoa_r+0xed8>
   46814:	d9c00617 	ldw	r7,24(sp)
   46818:	d9800717 	ldw	r6,28(sp)
   4681c:	00800c44 	movi	r2,49
   46820:	39c00044 	addi	r7,r7,1
   46824:	35800044 	addi	r22,r6,1
   46828:	30800005 	stb	r2,0(r6)
   4682c:	d9c00615 	stw	r7,24(sp)
   46830:	003f8506 	br	46648 <_dtoa_r+0xee8>
   46834:	d9800617 	ldw	r6,24(sp)
   46838:	d9c00717 	ldw	r7,28(sp)
   4683c:	00800c44 	movi	r2,49
   46840:	31800044 	addi	r6,r6,1
   46844:	d9800615 	stw	r6,24(sp)
   46848:	38800005 	stb	r2,0(r7)
   4684c:	003ec706 	br	4636c <_dtoa_r+0xc0c>
   46850:	df000417 	ldw	fp,16(sp)
   46854:	dc000317 	ldw	r16,12(sp)
   46858:	003d6d06 	br	45e10 <_dtoa_r+0x6b0>
   4685c:	8809883a 	mov	r4,r17
   46860:	004d0080 	call	4d008 <__floatsidf>
   46864:	9809883a 	mov	r4,r19
   46868:	a00b883a 	mov	r5,r20
   4686c:	100d883a 	mov	r6,r2
   46870:	180f883a 	mov	r7,r3
   46874:	00421140 	call	42114 <__muldf3>
   46878:	1009883a 	mov	r4,r2
   4687c:	180b883a 	mov	r5,r3
   46880:	000d883a 	mov	r6,zero
   46884:	01d00734 	movhi	r7,16412
   46888:	0040fc40 	call	40fc4 <__adddf3>
   4688c:	05bf3034 	movhi	r22,64704
   46890:	1023883a 	mov	r17,r2
   46894:	1daf883a 	add	r23,r3,r22
   46898:	9809883a 	mov	r4,r19
   4689c:	a00b883a 	mov	r5,r20
   468a0:	000d883a 	mov	r6,zero
   468a4:	01d00534 	movhi	r7,16404
   468a8:	00428000 	call	42800 <__subdf3>
   468ac:	1009883a 	mov	r4,r2
   468b0:	180b883a 	mov	r5,r3
   468b4:	880d883a 	mov	r6,r17
   468b8:	b80f883a 	mov	r7,r23
   468bc:	1027883a 	mov	r19,r2
   468c0:	1829883a 	mov	r20,r3
   468c4:	004cdc40 	call	4cdc4 <__gedf2>
   468c8:	00806d16 	blt	zero,r2,46a80 <_dtoa_r+0x1320>
   468cc:	b9e0003c 	xorhi	r7,r23,32768
   468d0:	9809883a 	mov	r4,r19
   468d4:	a00b883a 	mov	r5,r20
   468d8:	880d883a 	mov	r6,r17
   468dc:	004ce9c0 	call	4ce9c <__ledf2>
   468e0:	103d7a0e 	bge	r2,zero,45ecc <_dtoa_r+0x76c>
   468e4:	0029883a 	mov	r20,zero
   468e8:	0023883a 	mov	r17,zero
   468ec:	003f5206 	br	46638 <_dtoa_r+0xed8>
   468f0:	d9800a17 	ldw	r6,40(sp)
   468f4:	e00b883a 	mov	r5,fp
   468f8:	8009883a 	mov	r4,r16
   468fc:	00491640 	call	49164 <__pow5mult>
   46900:	1039883a 	mov	fp,r2
   46904:	003e3606 	br	461e0 <_dtoa_r+0xa80>
   46908:	d8000c15 	stw	zero,48(sp)
   4690c:	003c5c06 	br	45a80 <_dtoa_r+0x320>
   46910:	d9000a17 	ldw	r4,40(sp)
   46914:	d9800b17 	ldw	r6,44(sp)
   46918:	dd000a15 	stw	r20,40(sp)
   4691c:	a105c83a 	sub	r2,r20,r4
   46920:	308d883a 	add	r6,r6,r2
   46924:	d9800b15 	stw	r6,44(sp)
   46928:	0029883a 	mov	r20,zero
   4692c:	003e0106 	br	46134 <_dtoa_r+0x9d4>
   46930:	dcc00317 	ldw	r19,12(sp)
   46934:	9029883a 	mov	r20,r18
   46938:	04400084 	movi	r17,2
   4693c:	003c8606 	br	45b58 <_dtoa_r+0x3f8>
   46940:	3023883a 	mov	r17,r6
   46944:	80001115 	stw	zero,68(r16)
   46948:	000b883a 	mov	r5,zero
   4694c:	003c6006 	br	45ad0 <_dtoa_r+0x370>
   46950:	04400044 	movi	r17,1
   46954:	dc400d15 	stw	r17,52(sp)
   46958:	dc400915 	stw	r17,36(sp)
   4695c:	dc402115 	stw	r17,132(sp)
   46960:	003ff806 	br	46944 <_dtoa_r+0x11e4>
   46964:	d8800617 	ldw	r2,24(sp)
   46968:	00adc83a 	sub	r22,zero,r2
   4696c:	b000ac26 	beq	r22,zero,46c20 <_dtoa_r+0x14c0>
   46970:	b08003cc 	andi	r2,r22,15
   46974:	100490fa 	slli	r2,r2,3
   46978:	00c00174 	movhi	r3,5
   4697c:	18ffcf04 	addi	r3,r3,-196
   46980:	d9000317 	ldw	r4,12(sp)
   46984:	1885883a 	add	r2,r3,r2
   46988:	11800017 	ldw	r6,0(r2)
   4698c:	11c00117 	ldw	r7,4(r2)
   46990:	b02dd13a 	srai	r22,r22,4
   46994:	900b883a 	mov	r5,r18
   46998:	00421140 	call	42114 <__muldf3>
   4699c:	1027883a 	mov	r19,r2
   469a0:	1829883a 	mov	r20,r3
   469a4:	b000ec26 	beq	r22,zero,46d58 <_dtoa_r+0x15f8>
   469a8:	05c00174 	movhi	r23,5
   469ac:	bdffc504 	addi	r23,r23,-236
   469b0:	04400084 	movi	r17,2
   469b4:	b180004c 	andi	r6,r22,1
   469b8:	1009883a 	mov	r4,r2
   469bc:	b02dd07a 	srai	r22,r22,1
   469c0:	180b883a 	mov	r5,r3
   469c4:	30000426 	beq	r6,zero,469d8 <_dtoa_r+0x1278>
   469c8:	b9800017 	ldw	r6,0(r23)
   469cc:	b9c00117 	ldw	r7,4(r23)
   469d0:	8c400044 	addi	r17,r17,1
   469d4:	00421140 	call	42114 <__muldf3>
   469d8:	bdc00204 	addi	r23,r23,8
   469dc:	b03ff51e 	bne	r22,zero,469b4 <_dtoa_r+0x1254>
   469e0:	1027883a 	mov	r19,r2
   469e4:	1829883a 	mov	r20,r3
   469e8:	003c7406 	br	45bbc <_dtoa_r+0x45c>
   469ec:	d9800617 	ldw	r6,24(sp)
   469f0:	d9c00717 	ldw	r7,28(sp)
   469f4:	00c00c04 	movi	r3,48
   469f8:	31800044 	addi	r6,r6,1
   469fc:	38c00005 	stb	r3,0(r7)
   46a00:	02400c44 	movi	r9,49
   46a04:	d9800615 	stw	r6,24(sp)
   46a08:	12400005 	stb	r9,0(r2)
   46a0c:	003d0006 	br	45e10 <_dtoa_r+0x6b0>
   46a10:	89400117 	ldw	r5,4(r17)
   46a14:	8009883a 	mov	r4,r16
   46a18:	0048b3c0 	call	48b3c <_Balloc>
   46a1c:	89800417 	ldw	r6,16(r17)
   46a20:	11000304 	addi	r4,r2,12
   46a24:	89400304 	addi	r5,r17,12
   46a28:	31800084 	addi	r6,r6,2
   46a2c:	318d883a 	add	r6,r6,r6
   46a30:	318d883a 	add	r6,r6,r6
   46a34:	1025883a 	mov	r18,r2
   46a38:	00431340 	call	43134 <memcpy>
   46a3c:	8009883a 	mov	r4,r16
   46a40:	900b883a 	mov	r5,r18
   46a44:	01800044 	movi	r6,1
   46a48:	00492ac0 	call	492ac <__lshift>
   46a4c:	1027883a 	mov	r19,r2
   46a50:	003e8806 	br	46474 <_dtoa_r+0xd14>
   46a54:	00800e44 	movi	r2,57
   46a58:	b8bf2b26 	beq	r23,r2,46708 <_dtoa_r+0xfa8>
   46a5c:	ba400044 	addi	r9,r23,1
   46a60:	882b883a 	mov	r21,r17
   46a64:	95800044 	addi	r22,r18,1
   46a68:	92400005 	stb	r9,0(r18)
   46a6c:	9823883a 	mov	r17,r19
   46a70:	003e3e06 	br	4636c <_dtoa_r+0xc0c>
   46a74:	882b883a 	mov	r21,r17
   46a78:	9823883a 	mov	r17,r19
   46a7c:	003e2206 	br	46308 <_dtoa_r+0xba8>
   46a80:	0029883a 	mov	r20,zero
   46a84:	0023883a 	mov	r17,zero
   46a88:	003f6206 	br	46814 <_dtoa_r+0x10b4>
   46a8c:	59bfffc4 	addi	r6,r11,-1
   46a90:	300490fa 	slli	r2,r6,3
   46a94:	00c00174 	movhi	r3,5
   46a98:	18ffcf04 	addi	r3,r3,-196
   46a9c:	b80f883a 	mov	r7,r23
   46aa0:	1885883a 	add	r2,r3,r2
   46aa4:	11000017 	ldw	r4,0(r2)
   46aa8:	11400117 	ldw	r5,4(r2)
   46aac:	d8800717 	ldw	r2,28(sp)
   46ab0:	d9801015 	stw	r6,64(sp)
   46ab4:	880d883a 	mov	r6,r17
   46ab8:	dac01615 	stw	r11,88(sp)
   46abc:	15800044 	addi	r22,r2,1
   46ac0:	00421140 	call	42114 <__muldf3>
   46ac4:	a00b883a 	mov	r5,r20
   46ac8:	9809883a 	mov	r4,r19
   46acc:	d8c01215 	stw	r3,72(sp)
   46ad0:	d8801115 	stw	r2,68(sp)
   46ad4:	004cf880 	call	4cf88 <__fixdfsi>
   46ad8:	1009883a 	mov	r4,r2
   46adc:	1023883a 	mov	r17,r2
   46ae0:	004d0080 	call	4d008 <__floatsidf>
   46ae4:	9809883a 	mov	r4,r19
   46ae8:	a00b883a 	mov	r5,r20
   46aec:	100d883a 	mov	r6,r2
   46af0:	180f883a 	mov	r7,r3
   46af4:	00428000 	call	42800 <__subdf3>
   46af8:	1815883a 	mov	r10,r3
   46afc:	d8c00717 	ldw	r3,28(sp)
   46b00:	8c400c04 	addi	r17,r17,48
   46b04:	102f883a 	mov	r23,r2
   46b08:	1c400005 	stb	r17,0(r3)
   46b0c:	dac01617 	ldw	r11,88(sp)
   46b10:	00800044 	movi	r2,1
   46b14:	58802426 	beq	r11,r2,46ba8 <_dtoa_r+0x1448>
   46b18:	d9800717 	ldw	r6,28(sp)
   46b1c:	dc001415 	stw	r16,80(sp)
   46b20:	b805883a 	mov	r2,r23
   46b24:	32d7883a 	add	r11,r6,r11
   46b28:	b027883a 	mov	r19,r22
   46b2c:	5821883a 	mov	r16,r11
   46b30:	5007883a 	mov	r3,r10
   46b34:	902f883a 	mov	r23,r18
   46b38:	000d883a 	mov	r6,zero
   46b3c:	01d00934 	movhi	r7,16420
   46b40:	1009883a 	mov	r4,r2
   46b44:	180b883a 	mov	r5,r3
   46b48:	00421140 	call	42114 <__muldf3>
   46b4c:	180b883a 	mov	r5,r3
   46b50:	1009883a 	mov	r4,r2
   46b54:	1829883a 	mov	r20,r3
   46b58:	1025883a 	mov	r18,r2
   46b5c:	004cf880 	call	4cf88 <__fixdfsi>
   46b60:	1009883a 	mov	r4,r2
   46b64:	1023883a 	mov	r17,r2
   46b68:	004d0080 	call	4d008 <__floatsidf>
   46b6c:	9009883a 	mov	r4,r18
   46b70:	a00b883a 	mov	r5,r20
   46b74:	100d883a 	mov	r6,r2
   46b78:	180f883a 	mov	r7,r3
   46b7c:	8c400c04 	addi	r17,r17,48
   46b80:	00428000 	call	42800 <__subdf3>
   46b84:	9cc00044 	addi	r19,r19,1
   46b88:	9c7fffc5 	stb	r17,-1(r19)
   46b8c:	9c3fea1e 	bne	r19,r16,46b38 <_dtoa_r+0x13d8>
   46b90:	d9c01017 	ldw	r7,64(sp)
   46b94:	dc001417 	ldw	r16,80(sp)
   46b98:	b825883a 	mov	r18,r23
   46b9c:	1815883a 	mov	r10,r3
   46ba0:	102f883a 	mov	r23,r2
   46ba4:	b1ed883a 	add	r22,r22,r7
   46ba8:	d9001117 	ldw	r4,68(sp)
   46bac:	d9401217 	ldw	r5,72(sp)
   46bb0:	000d883a 	mov	r6,zero
   46bb4:	01cff834 	movhi	r7,16352
   46bb8:	da801615 	stw	r10,88(sp)
   46bbc:	0040fc40 	call	40fc4 <__adddf3>
   46bc0:	da801617 	ldw	r10,88(sp)
   46bc4:	1009883a 	mov	r4,r2
   46bc8:	180b883a 	mov	r5,r3
   46bcc:	500f883a 	mov	r7,r10
   46bd0:	b80d883a 	mov	r6,r23
   46bd4:	004ce9c0 	call	4ce9c <__ledf2>
   46bd8:	da801617 	ldw	r10,88(sp)
   46bdc:	1000330e 	bge	r2,zero,46cac <_dtoa_r+0x154c>
   46be0:	d9001317 	ldw	r4,76(sp)
   46be4:	b53fffc3 	ldbu	r20,-1(r22)
   46be8:	d9000615 	stw	r4,24(sp)
   46bec:	003d3706 	br	460cc <_dtoa_r+0x96c>
   46bf0:	d8800817 	ldw	r2,32(sp)
   46bf4:	11e7c83a 	sub	r19,r2,r7
   46bf8:	0005883a 	mov	r2,zero
   46bfc:	003d5106 	br	46144 <_dtoa_r+0x9e4>
   46c00:	00800044 	movi	r2,1
   46c04:	003dbd06 	br	462fc <_dtoa_r+0xb9c>
   46c08:	d8800217 	ldw	r2,8(sp)
   46c0c:	00c00d84 	movi	r3,54
   46c10:	dd000a17 	ldw	r20,40(sp)
   46c14:	1885c83a 	sub	r2,r3,r2
   46c18:	dcc00817 	ldw	r19,32(sp)
   46c1c:	003d4906 	br	46144 <_dtoa_r+0x9e4>
   46c20:	dcc00317 	ldw	r19,12(sp)
   46c24:	9029883a 	mov	r20,r18
   46c28:	04400084 	movi	r17,2
   46c2c:	003be306 	br	45bbc <_dtoa_r+0x45c>
   46c30:	d9000917 	ldw	r4,36(sp)
   46c34:	203f0926 	beq	r4,zero,4685c <_dtoa_r+0x10fc>
   46c38:	d9800d17 	ldw	r6,52(sp)
   46c3c:	01bca30e 	bge	zero,r6,45ecc <_dtoa_r+0x76c>
   46c40:	a00b883a 	mov	r5,r20
   46c44:	9809883a 	mov	r4,r19
   46c48:	000d883a 	mov	r6,zero
   46c4c:	01d00934 	movhi	r7,16420
   46c50:	00421140 	call	42114 <__muldf3>
   46c54:	89000044 	addi	r4,r17,1
   46c58:	1027883a 	mov	r19,r2
   46c5c:	1829883a 	mov	r20,r3
   46c60:	004d0080 	call	4d008 <__floatsidf>
   46c64:	9809883a 	mov	r4,r19
   46c68:	a00b883a 	mov	r5,r20
   46c6c:	100d883a 	mov	r6,r2
   46c70:	180f883a 	mov	r7,r3
   46c74:	00421140 	call	42114 <__muldf3>
   46c78:	01d00734 	movhi	r7,16412
   46c7c:	1009883a 	mov	r4,r2
   46c80:	180b883a 	mov	r5,r3
   46c84:	000d883a 	mov	r6,zero
   46c88:	0040fc40 	call	40fc4 <__adddf3>
   46c8c:	d9c00617 	ldw	r7,24(sp)
   46c90:	05bf3034 	movhi	r22,64704
   46c94:	1023883a 	mov	r17,r2
   46c98:	39ffffc4 	addi	r7,r7,-1
   46c9c:	d9c01315 	stw	r7,76(sp)
   46ca0:	1daf883a 	add	r23,r3,r22
   46ca4:	dac00d17 	ldw	r11,52(sp)
   46ca8:	003be006 	br	45c2c <_dtoa_r+0x4cc>
   46cac:	d9801117 	ldw	r6,68(sp)
   46cb0:	d9c01217 	ldw	r7,72(sp)
   46cb4:	0009883a 	mov	r4,zero
   46cb8:	014ff834 	movhi	r5,16352
   46cbc:	da801615 	stw	r10,88(sp)
   46cc0:	00428000 	call	42800 <__subdf3>
   46cc4:	da801617 	ldw	r10,88(sp)
   46cc8:	1009883a 	mov	r4,r2
   46ccc:	180b883a 	mov	r5,r3
   46cd0:	b80d883a 	mov	r6,r23
   46cd4:	500f883a 	mov	r7,r10
   46cd8:	004cdc40 	call	4cdc4 <__gedf2>
   46cdc:	00bc7b0e 	bge	zero,r2,45ecc <_dtoa_r+0x76c>
   46ce0:	01000c04 	movi	r4,48
   46ce4:	00000106 	br	46cec <_dtoa_r+0x158c>
   46ce8:	102d883a 	mov	r22,r2
   46cec:	b0bfffc4 	addi	r2,r22,-1
   46cf0:	10c00007 	ldb	r3,0(r2)
   46cf4:	193ffc26 	beq	r3,r4,46ce8 <_dtoa_r+0x1588>
   46cf8:	d9001317 	ldw	r4,76(sp)
   46cfc:	d9000615 	stw	r4,24(sp)
   46d00:	003c4306 	br	45e10 <_dtoa_r+0x6b0>
   46d04:	d8c01317 	ldw	r3,76(sp)
   46d08:	dc001117 	ldw	r16,68(sp)
   46d0c:	d8c00615 	stw	r3,24(sp)
   46d10:	003cee06 	br	460cc <_dtoa_r+0x96c>
   46d14:	dd401217 	ldw	r21,72(sp)
   46d18:	dc001117 	ldw	r16,68(sp)
   46d1c:	dc801417 	ldw	r18,80(sp)
   46d20:	003c6a06 	br	45ecc <_dtoa_r+0x76c>
   46d24:	103e6f1e 	bne	r2,zero,466e4 <_dtoa_r+0xf84>
   46d28:	b880004c 	andi	r2,r23,1
   46d2c:	103e6d26 	beq	r2,zero,466e4 <_dtoa_r+0xf84>
   46d30:	003e6906 	br	466d8 <_dtoa_r+0xf78>
   46d34:	8009883a 	mov	r4,r16
   46d38:	880b883a 	mov	r5,r17
   46d3c:	01800284 	movi	r6,10
   46d40:	000f883a 	mov	r7,zero
   46d44:	0048c0c0 	call	48c0c <__multadd>
   46d48:	d9000d17 	ldw	r4,52(sp)
   46d4c:	1023883a 	mov	r17,r2
   46d50:	d9000915 	stw	r4,36(sp)
   46d54:	003d5006 	br	46298 <_dtoa_r+0xb38>
   46d58:	04400084 	movi	r17,2
   46d5c:	003b9706 	br	45bbc <_dtoa_r+0x45c>
   46d60:	d8801317 	ldw	r2,76(sp)
   46d64:	d8800615 	stw	r2,24(sp)
   46d68:	003cd806 	br	460cc <_dtoa_r+0x96c>
   46d6c:	d8801317 	ldw	r2,76(sp)
   46d70:	d8800615 	stw	r2,24(sp)
   46d74:	003c2606 	br	45e10 <_dtoa_r+0x6b0>
   46d78:	04c00044 	movi	r19,1
   46d7c:	003b3506 	br	45a54 <_dtoa_r+0x2f4>
   46d80:	3023883a 	mov	r17,r6
   46d84:	000b883a 	mov	r5,zero
   46d88:	003b5106 	br	45ad0 <_dtoa_r+0x370>
   46d8c:	20fd3426 	beq	r4,r3,46260 <_dtoa_r+0xb00>
   46d90:	00c00f04 	movi	r3,60
   46d94:	1885c83a 	sub	r2,r3,r2
   46d98:	003da106 	br	46420 <_dtoa_r+0xcc0>

00046d9c <_fflush_r>:
   46d9c:	defffb04 	addi	sp,sp,-20
   46da0:	dcc00315 	stw	r19,12(sp)
   46da4:	dc400115 	stw	r17,4(sp)
   46da8:	dfc00415 	stw	ra,16(sp)
   46dac:	dc800215 	stw	r18,8(sp)
   46db0:	dc000015 	stw	r16,0(sp)
   46db4:	2027883a 	mov	r19,r4
   46db8:	2823883a 	mov	r17,r5
   46dbc:	20000226 	beq	r4,zero,46dc8 <_fflush_r+0x2c>
   46dc0:	20800e17 	ldw	r2,56(r4)
   46dc4:	10005826 	beq	r2,zero,46f28 <_fflush_r+0x18c>
   46dc8:	8880030b 	ldhu	r2,12(r17)
   46dcc:	10ffffcc 	andi	r3,r2,65535
   46dd0:	18e0001c 	xori	r3,r3,32768
   46dd4:	18e00004 	addi	r3,r3,-32768
   46dd8:	18002b26 	beq	r3,zero,46e88 <_fflush_r+0xec>
   46ddc:	10c0020c 	andi	r3,r2,8
   46de0:	1800311e 	bne	r3,zero,46ea8 <_fflush_r+0x10c>
   46de4:	88c00117 	ldw	r3,4(r17)
   46de8:	10820014 	ori	r2,r2,2048
   46dec:	8880030d 	sth	r2,12(r17)
   46df0:	00c05c0e 	bge	zero,r3,46f64 <_fflush_r+0x1c8>
   46df4:	88c00a17 	ldw	r3,40(r17)
   46df8:	18002326 	beq	r3,zero,46e88 <_fflush_r+0xec>
   46dfc:	9c000017 	ldw	r16,0(r19)
   46e00:	1104000c 	andi	r4,r2,4096
   46e04:	98000015 	stw	zero,0(r19)
   46e08:	20004b26 	beq	r4,zero,46f38 <_fflush_r+0x19c>
   46e0c:	89801417 	ldw	r6,80(r17)
   46e10:	1080010c 	andi	r2,r2,4
   46e14:	10000626 	beq	r2,zero,46e30 <_fflush_r+0x94>
   46e18:	89000117 	ldw	r4,4(r17)
   46e1c:	88800c17 	ldw	r2,48(r17)
   46e20:	310dc83a 	sub	r6,r6,r4
   46e24:	10000226 	beq	r2,zero,46e30 <_fflush_r+0x94>
   46e28:	88800f17 	ldw	r2,60(r17)
   46e2c:	308dc83a 	sub	r6,r6,r2
   46e30:	89400717 	ldw	r5,28(r17)
   46e34:	9809883a 	mov	r4,r19
   46e38:	000f883a 	mov	r7,zero
   46e3c:	183ee83a 	callr	r3
   46e40:	00ffffc4 	movi	r3,-1
   46e44:	10c04a26 	beq	r2,r3,46f70 <_fflush_r+0x1d4>
   46e48:	88c0030b 	ldhu	r3,12(r17)
   46e4c:	89000417 	ldw	r4,16(r17)
   46e50:	88000115 	stw	zero,4(r17)
   46e54:	197dffcc 	andi	r5,r3,63487
   46e58:	8940030d 	sth	r5,12(r17)
   46e5c:	89000015 	stw	r4,0(r17)
   46e60:	18c4000c 	andi	r3,r3,4096
   46e64:	1800581e 	bne	r3,zero,46fc8 <_fflush_r+0x22c>
   46e68:	89400c17 	ldw	r5,48(r17)
   46e6c:	9c000015 	stw	r16,0(r19)
   46e70:	28000526 	beq	r5,zero,46e88 <_fflush_r+0xec>
   46e74:	88801004 	addi	r2,r17,64
   46e78:	28800226 	beq	r5,r2,46e84 <_fflush_r+0xe8>
   46e7c:	9809883a 	mov	r4,r19
   46e80:	00474dc0 	call	474dc <_free_r>
   46e84:	88000c15 	stw	zero,48(r17)
   46e88:	0005883a 	mov	r2,zero
   46e8c:	dfc00417 	ldw	ra,16(sp)
   46e90:	dcc00317 	ldw	r19,12(sp)
   46e94:	dc800217 	ldw	r18,8(sp)
   46e98:	dc400117 	ldw	r17,4(sp)
   46e9c:	dc000017 	ldw	r16,0(sp)
   46ea0:	dec00504 	addi	sp,sp,20
   46ea4:	f800283a 	ret
   46ea8:	8c800417 	ldw	r18,16(r17)
   46eac:	903ff626 	beq	r18,zero,46e88 <_fflush_r+0xec>
   46eb0:	8c000017 	ldw	r16,0(r17)
   46eb4:	108000cc 	andi	r2,r2,3
   46eb8:	8c800015 	stw	r18,0(r17)
   46ebc:	84a1c83a 	sub	r16,r16,r18
   46ec0:	10001b26 	beq	r2,zero,46f30 <_fflush_r+0x194>
   46ec4:	0005883a 	mov	r2,zero
   46ec8:	88800215 	stw	r2,8(r17)
   46ecc:	04000316 	blt	zero,r16,46edc <_fflush_r+0x140>
   46ed0:	003fed06 	br	46e88 <_fflush_r+0xec>
   46ed4:	90a5883a 	add	r18,r18,r2
   46ed8:	043feb0e 	bge	zero,r16,46e88 <_fflush_r+0xec>
   46edc:	88800917 	ldw	r2,36(r17)
   46ee0:	89400717 	ldw	r5,28(r17)
   46ee4:	800f883a 	mov	r7,r16
   46ee8:	900d883a 	mov	r6,r18
   46eec:	9809883a 	mov	r4,r19
   46ef0:	103ee83a 	callr	r2
   46ef4:	80a1c83a 	sub	r16,r16,r2
   46ef8:	00bff616 	blt	zero,r2,46ed4 <_fflush_r+0x138>
   46efc:	88c0030b 	ldhu	r3,12(r17)
   46f00:	00bfffc4 	movi	r2,-1
   46f04:	18c01014 	ori	r3,r3,64
   46f08:	88c0030d 	sth	r3,12(r17)
   46f0c:	dfc00417 	ldw	ra,16(sp)
   46f10:	dcc00317 	ldw	r19,12(sp)
   46f14:	dc800217 	ldw	r18,8(sp)
   46f18:	dc400117 	ldw	r17,4(sp)
   46f1c:	dc000017 	ldw	r16,0(sp)
   46f20:	dec00504 	addi	sp,sp,20
   46f24:	f800283a 	ret
   46f28:	00470a80 	call	470a8 <__sinit>
   46f2c:	003fa606 	br	46dc8 <_fflush_r+0x2c>
   46f30:	88800517 	ldw	r2,20(r17)
   46f34:	003fe406 	br	46ec8 <_fflush_r+0x12c>
   46f38:	89400717 	ldw	r5,28(r17)
   46f3c:	000d883a 	mov	r6,zero
   46f40:	9809883a 	mov	r4,r19
   46f44:	01c00044 	movi	r7,1
   46f48:	183ee83a 	callr	r3
   46f4c:	100d883a 	mov	r6,r2
   46f50:	00bfffc4 	movi	r2,-1
   46f54:	30801326 	beq	r6,r2,46fa4 <_fflush_r+0x208>
   46f58:	8880030b 	ldhu	r2,12(r17)
   46f5c:	88c00a17 	ldw	r3,40(r17)
   46f60:	003fab06 	br	46e10 <_fflush_r+0x74>
   46f64:	88c00f17 	ldw	r3,60(r17)
   46f68:	00ffa216 	blt	zero,r3,46df4 <_fflush_r+0x58>
   46f6c:	003fc606 	br	46e88 <_fflush_r+0xec>
   46f70:	98c00017 	ldw	r3,0(r19)
   46f74:	183fb426 	beq	r3,zero,46e48 <_fflush_r+0xac>
   46f78:	01000744 	movi	r4,29
   46f7c:	19000226 	beq	r3,r4,46f88 <_fflush_r+0x1ec>
   46f80:	01000584 	movi	r4,22
   46f84:	1900121e 	bne	r3,r4,46fd0 <_fflush_r+0x234>
   46f88:	88c0030b 	ldhu	r3,12(r17)
   46f8c:	88800417 	ldw	r2,16(r17)
   46f90:	88000115 	stw	zero,4(r17)
   46f94:	18fdffcc 	andi	r3,r3,63487
   46f98:	88c0030d 	sth	r3,12(r17)
   46f9c:	88800015 	stw	r2,0(r17)
   46fa0:	003fb106 	br	46e68 <_fflush_r+0xcc>
   46fa4:	98800017 	ldw	r2,0(r19)
   46fa8:	103feb26 	beq	r2,zero,46f58 <_fflush_r+0x1bc>
   46fac:	00c00744 	movi	r3,29
   46fb0:	10c00226 	beq	r2,r3,46fbc <_fflush_r+0x220>
   46fb4:	00c00584 	movi	r3,22
   46fb8:	10ffd01e 	bne	r2,r3,46efc <_fflush_r+0x160>
   46fbc:	9c000015 	stw	r16,0(r19)
   46fc0:	0005883a 	mov	r2,zero
   46fc4:	003fb106 	br	46e8c <_fflush_r+0xf0>
   46fc8:	88801415 	stw	r2,80(r17)
   46fcc:	003fa606 	br	46e68 <_fflush_r+0xcc>
   46fd0:	88c0030b 	ldhu	r3,12(r17)
   46fd4:	18c01014 	ori	r3,r3,64
   46fd8:	88c0030d 	sth	r3,12(r17)
   46fdc:	003fab06 	br	46e8c <_fflush_r+0xf0>

00046fe0 <fflush>:
   46fe0:	200b883a 	mov	r5,r4
   46fe4:	20000426 	beq	r4,zero,46ff8 <fflush+0x18>
   46fe8:	00800174 	movhi	r2,5
   46fec:	10870004 	addi	r2,r2,7168
   46ff0:	11000017 	ldw	r4,0(r2)
   46ff4:	0046d9c1 	jmpi	46d9c <_fflush_r>
   46ff8:	00800174 	movhi	r2,5
   46ffc:	1086ff04 	addi	r2,r2,7164
   47000:	11000017 	ldw	r4,0(r2)
   47004:	01400134 	movhi	r5,4
   47008:	295b6704 	addi	r5,r5,28060
   4700c:	0047d001 	jmpi	47d00 <_fwalk_reent>

00047010 <__fp_lock>:
   47010:	0005883a 	mov	r2,zero
   47014:	f800283a 	ret

00047018 <__fp_unlock>:
   47018:	0005883a 	mov	r2,zero
   4701c:	f800283a 	ret

00047020 <_cleanup_r>:
   47020:	01400174 	movhi	r5,5
   47024:	296f0c04 	addi	r5,r5,-17360
   47028:	0047c581 	jmpi	47c58 <_fwalk>

0004702c <__sfmoreglue>:
   4702c:	defffc04 	addi	sp,sp,-16
   47030:	dc400115 	stw	r17,4(sp)
   47034:	2c401a24 	muli	r17,r5,104
   47038:	dc800215 	stw	r18,8(sp)
   4703c:	2825883a 	mov	r18,r5
   47040:	89400304 	addi	r5,r17,12
   47044:	dc000015 	stw	r16,0(sp)
   47048:	dfc00315 	stw	ra,12(sp)
   4704c:	00480400 	call	48040 <_malloc_r>
   47050:	1021883a 	mov	r16,r2
   47054:	10000726 	beq	r2,zero,47074 <__sfmoreglue+0x48>
   47058:	11000304 	addi	r4,r2,12
   4705c:	10000015 	stw	zero,0(r2)
   47060:	14800115 	stw	r18,4(r2)
   47064:	11000215 	stw	r4,8(r2)
   47068:	000b883a 	mov	r5,zero
   4706c:	880d883a 	mov	r6,r17
   47070:	0048a280 	call	48a28 <memset>
   47074:	8005883a 	mov	r2,r16
   47078:	dfc00317 	ldw	ra,12(sp)
   4707c:	dc800217 	ldw	r18,8(sp)
   47080:	dc400117 	ldw	r17,4(sp)
   47084:	dc000017 	ldw	r16,0(sp)
   47088:	dec00404 	addi	sp,sp,16
   4708c:	f800283a 	ret

00047090 <_cleanup>:
   47090:	00800174 	movhi	r2,5
   47094:	1086ff04 	addi	r2,r2,7164
   47098:	11000017 	ldw	r4,0(r2)
   4709c:	01400174 	movhi	r5,5
   470a0:	296f0c04 	addi	r5,r5,-17360
   470a4:	0047c581 	jmpi	47c58 <_fwalk>

000470a8 <__sinit>:
   470a8:	20800e17 	ldw	r2,56(r4)
   470ac:	defff704 	addi	sp,sp,-36
   470b0:	dc800215 	stw	r18,8(sp)
   470b4:	dfc00815 	stw	ra,32(sp)
   470b8:	ddc00715 	stw	r23,28(sp)
   470bc:	dd800615 	stw	r22,24(sp)
   470c0:	dd400515 	stw	r21,20(sp)
   470c4:	dd000415 	stw	r20,16(sp)
   470c8:	dcc00315 	stw	r19,12(sp)
   470cc:	dc400115 	stw	r17,4(sp)
   470d0:	dc000015 	stw	r16,0(sp)
   470d4:	2025883a 	mov	r18,r4
   470d8:	10004f1e 	bne	r2,zero,47218 <__sinit+0x170>
   470dc:	24000117 	ldw	r16,4(r4)
   470e0:	00c00134 	movhi	r3,4
   470e4:	18dc0804 	addi	r3,r3,28704
   470e8:	20c00f15 	stw	r3,60(r4)
   470ec:	2080bb04 	addi	r2,r4,748
   470f0:	00c000c4 	movi	r3,3
   470f4:	05c00044 	movi	r23,1
   470f8:	20c0b915 	stw	r3,740(r4)
   470fc:	2080ba15 	stw	r2,744(r4)
   47100:	25c00e15 	stw	r23,56(r4)
   47104:	2000b815 	stw	zero,736(r4)
   47108:	00800104 	movi	r2,4
   4710c:	81001704 	addi	r4,r16,92
   47110:	000b883a 	mov	r5,zero
   47114:	01800204 	movi	r6,8
   47118:	80000015 	stw	zero,0(r16)
   4711c:	80000115 	stw	zero,4(r16)
   47120:	80000215 	stw	zero,8(r16)
   47124:	8080030d 	sth	r2,12(r16)
   47128:	80001915 	stw	zero,100(r16)
   4712c:	8000038d 	sth	zero,14(r16)
   47130:	80000415 	stw	zero,16(r16)
   47134:	80000515 	stw	zero,20(r16)
   47138:	80000615 	stw	zero,24(r16)
   4713c:	0048a280 	call	48a28 <memset>
   47140:	94400217 	ldw	r17,8(r18)
   47144:	05800174 	movhi	r22,5
   47148:	b5a89404 	addi	r22,r22,-23984
   4714c:	05400174 	movhi	r21,5
   47150:	ad68ab04 	addi	r21,r21,-23892
   47154:	05000174 	movhi	r20,5
   47158:	a528ca04 	addi	r20,r20,-23768
   4715c:	04c00174 	movhi	r19,5
   47160:	9ce8e104 	addi	r19,r19,-23676
   47164:	84000715 	stw	r16,28(r16)
   47168:	85800815 	stw	r22,32(r16)
   4716c:	85400915 	stw	r21,36(r16)
   47170:	85000a15 	stw	r20,40(r16)
   47174:	84c00b15 	stw	r19,44(r16)
   47178:	00800284 	movi	r2,10
   4717c:	89001704 	addi	r4,r17,92
   47180:	000b883a 	mov	r5,zero
   47184:	01800204 	movi	r6,8
   47188:	88000015 	stw	zero,0(r17)
   4718c:	88000115 	stw	zero,4(r17)
   47190:	88000215 	stw	zero,8(r17)
   47194:	8880030d 	sth	r2,12(r17)
   47198:	88001915 	stw	zero,100(r17)
   4719c:	8dc0038d 	sth	r23,14(r17)
   471a0:	88000415 	stw	zero,16(r17)
   471a4:	88000515 	stw	zero,20(r17)
   471a8:	88000615 	stw	zero,24(r17)
   471ac:	0048a280 	call	48a28 <memset>
   471b0:	94000317 	ldw	r16,12(r18)
   471b4:	00800484 	movi	r2,18
   471b8:	8c400715 	stw	r17,28(r17)
   471bc:	8d800815 	stw	r22,32(r17)
   471c0:	8d400915 	stw	r21,36(r17)
   471c4:	8d000a15 	stw	r20,40(r17)
   471c8:	8cc00b15 	stw	r19,44(r17)
   471cc:	8080030d 	sth	r2,12(r16)
   471d0:	00800084 	movi	r2,2
   471d4:	80000015 	stw	zero,0(r16)
   471d8:	80000115 	stw	zero,4(r16)
   471dc:	80000215 	stw	zero,8(r16)
   471e0:	80001915 	stw	zero,100(r16)
   471e4:	8080038d 	sth	r2,14(r16)
   471e8:	80000415 	stw	zero,16(r16)
   471ec:	80000515 	stw	zero,20(r16)
   471f0:	80000615 	stw	zero,24(r16)
   471f4:	81001704 	addi	r4,r16,92
   471f8:	000b883a 	mov	r5,zero
   471fc:	01800204 	movi	r6,8
   47200:	0048a280 	call	48a28 <memset>
   47204:	84000715 	stw	r16,28(r16)
   47208:	85800815 	stw	r22,32(r16)
   4720c:	85400915 	stw	r21,36(r16)
   47210:	85000a15 	stw	r20,40(r16)
   47214:	84c00b15 	stw	r19,44(r16)
   47218:	dfc00817 	ldw	ra,32(sp)
   4721c:	ddc00717 	ldw	r23,28(sp)
   47220:	dd800617 	ldw	r22,24(sp)
   47224:	dd400517 	ldw	r21,20(sp)
   47228:	dd000417 	ldw	r20,16(sp)
   4722c:	dcc00317 	ldw	r19,12(sp)
   47230:	dc800217 	ldw	r18,8(sp)
   47234:	dc400117 	ldw	r17,4(sp)
   47238:	dc000017 	ldw	r16,0(sp)
   4723c:	dec00904 	addi	sp,sp,36
   47240:	f800283a 	ret

00047244 <__sfp>:
   47244:	defffb04 	addi	sp,sp,-20
   47248:	00800174 	movhi	r2,5
   4724c:	1086ff04 	addi	r2,r2,7164
   47250:	dc800215 	stw	r18,8(sp)
   47254:	14800017 	ldw	r18,0(r2)
   47258:	dcc00315 	stw	r19,12(sp)
   4725c:	dfc00415 	stw	ra,16(sp)
   47260:	90800e17 	ldw	r2,56(r18)
   47264:	dc400115 	stw	r17,4(sp)
   47268:	dc000015 	stw	r16,0(sp)
   4726c:	2027883a 	mov	r19,r4
   47270:	10002f26 	beq	r2,zero,47330 <__sfp+0xec>
   47274:	9480b804 	addi	r18,r18,736
   47278:	047fffc4 	movi	r17,-1
   4727c:	91400117 	ldw	r5,4(r18)
   47280:	94000217 	ldw	r16,8(r18)
   47284:	297fffc4 	addi	r5,r5,-1
   47288:	28000a16 	blt	r5,zero,472b4 <__sfp+0x70>
   4728c:	8080030f 	ldh	r2,12(r16)
   47290:	10000c26 	beq	r2,zero,472c4 <__sfp+0x80>
   47294:	80c01d04 	addi	r3,r16,116
   47298:	00000206 	br	472a4 <__sfp+0x60>
   4729c:	18bfe60f 	ldh	r2,-104(r3)
   472a0:	10000826 	beq	r2,zero,472c4 <__sfp+0x80>
   472a4:	297fffc4 	addi	r5,r5,-1
   472a8:	1c3ffd04 	addi	r16,r3,-12
   472ac:	18c01a04 	addi	r3,r3,104
   472b0:	2c7ffa1e 	bne	r5,r17,4729c <__sfp+0x58>
   472b4:	90800017 	ldw	r2,0(r18)
   472b8:	10002026 	beq	r2,zero,4733c <__sfp+0xf8>
   472bc:	1025883a 	mov	r18,r2
   472c0:	003fee06 	br	4727c <__sfp+0x38>
   472c4:	00bfffc4 	movi	r2,-1
   472c8:	8080038d 	sth	r2,14(r16)
   472cc:	00800044 	movi	r2,1
   472d0:	8080030d 	sth	r2,12(r16)
   472d4:	80001915 	stw	zero,100(r16)
   472d8:	80000015 	stw	zero,0(r16)
   472dc:	80000215 	stw	zero,8(r16)
   472e0:	80000115 	stw	zero,4(r16)
   472e4:	80000415 	stw	zero,16(r16)
   472e8:	80000515 	stw	zero,20(r16)
   472ec:	80000615 	stw	zero,24(r16)
   472f0:	81001704 	addi	r4,r16,92
   472f4:	000b883a 	mov	r5,zero
   472f8:	01800204 	movi	r6,8
   472fc:	0048a280 	call	48a28 <memset>
   47300:	8005883a 	mov	r2,r16
   47304:	80000c15 	stw	zero,48(r16)
   47308:	80000d15 	stw	zero,52(r16)
   4730c:	80001115 	stw	zero,68(r16)
   47310:	80001215 	stw	zero,72(r16)
   47314:	dfc00417 	ldw	ra,16(sp)
   47318:	dcc00317 	ldw	r19,12(sp)
   4731c:	dc800217 	ldw	r18,8(sp)
   47320:	dc400117 	ldw	r17,4(sp)
   47324:	dc000017 	ldw	r16,0(sp)
   47328:	dec00504 	addi	sp,sp,20
   4732c:	f800283a 	ret
   47330:	9009883a 	mov	r4,r18
   47334:	00470a80 	call	470a8 <__sinit>
   47338:	003fce06 	br	47274 <__sfp+0x30>
   4733c:	9809883a 	mov	r4,r19
   47340:	01400104 	movi	r5,4
   47344:	004702c0 	call	4702c <__sfmoreglue>
   47348:	90800015 	stw	r2,0(r18)
   4734c:	103fdb1e 	bne	r2,zero,472bc <__sfp+0x78>
   47350:	00800304 	movi	r2,12
   47354:	98800015 	stw	r2,0(r19)
   47358:	0005883a 	mov	r2,zero
   4735c:	003fed06 	br	47314 <__sfp+0xd0>

00047360 <__sfp_lock_acquire>:
   47360:	f800283a 	ret

00047364 <__sfp_lock_release>:
   47364:	f800283a 	ret

00047368 <__sinit_lock_acquire>:
   47368:	f800283a 	ret

0004736c <__sinit_lock_release>:
   4736c:	f800283a 	ret

00047370 <__fp_lock_all>:
   47370:	00800174 	movhi	r2,5
   47374:	10870004 	addi	r2,r2,7168
   47378:	11000017 	ldw	r4,0(r2)
   4737c:	01400134 	movhi	r5,4
   47380:	295c0404 	addi	r5,r5,28688
   47384:	0047c581 	jmpi	47c58 <_fwalk>

00047388 <__fp_unlock_all>:
   47388:	00800174 	movhi	r2,5
   4738c:	10870004 	addi	r2,r2,7168
   47390:	11000017 	ldw	r4,0(r2)
   47394:	01400134 	movhi	r5,4
   47398:	295c0604 	addi	r5,r5,28696
   4739c:	0047c581 	jmpi	47c58 <_fwalk>

000473a0 <_malloc_trim_r>:
   473a0:	defffb04 	addi	sp,sp,-20
   473a4:	dcc00315 	stw	r19,12(sp)
   473a8:	dc800215 	stw	r18,8(sp)
   473ac:	dc400115 	stw	r17,4(sp)
   473b0:	dc000015 	stw	r16,0(sp)
   473b4:	2827883a 	mov	r19,r5
   473b8:	dfc00415 	stw	ra,16(sp)
   473bc:	04400174 	movhi	r17,5
   473c0:	8c417b04 	addi	r17,r17,1516
   473c4:	2021883a 	mov	r16,r4
   473c8:	004d6400 	call	4d640 <__malloc_lock>
   473cc:	88800217 	ldw	r2,8(r17)
   473d0:	14800117 	ldw	r18,4(r2)
   473d4:	00bfff04 	movi	r2,-4
   473d8:	90a4703a 	and	r18,r18,r2
   473dc:	94e7c83a 	sub	r19,r18,r19
   473e0:	9cc3fbc4 	addi	r19,r19,4079
   473e4:	9826d33a 	srli	r19,r19,12
   473e8:	0083ffc4 	movi	r2,4095
   473ec:	9cffffc4 	addi	r19,r19,-1
   473f0:	9826933a 	slli	r19,r19,12
   473f4:	14c0060e 	bge	r2,r19,47410 <_malloc_trim_r+0x70>
   473f8:	8009883a 	mov	r4,r16
   473fc:	000b883a 	mov	r5,zero
   47400:	004a1ec0 	call	4a1ec <_sbrk_r>
   47404:	88c00217 	ldw	r3,8(r17)
   47408:	1c87883a 	add	r3,r3,r18
   4740c:	10c00a26 	beq	r2,r3,47438 <_malloc_trim_r+0x98>
   47410:	8009883a 	mov	r4,r16
   47414:	004d6600 	call	4d660 <__malloc_unlock>
   47418:	0005883a 	mov	r2,zero
   4741c:	dfc00417 	ldw	ra,16(sp)
   47420:	dcc00317 	ldw	r19,12(sp)
   47424:	dc800217 	ldw	r18,8(sp)
   47428:	dc400117 	ldw	r17,4(sp)
   4742c:	dc000017 	ldw	r16,0(sp)
   47430:	dec00504 	addi	sp,sp,20
   47434:	f800283a 	ret
   47438:	8009883a 	mov	r4,r16
   4743c:	04cbc83a 	sub	r5,zero,r19
   47440:	004a1ec0 	call	4a1ec <_sbrk_r>
   47444:	00ffffc4 	movi	r3,-1
   47448:	10c01326 	beq	r2,r3,47498 <_malloc_trim_r+0xf8>
   4744c:	00800174 	movhi	r2,5
   47450:	10871e04 	addi	r2,r2,7288
   47454:	11000017 	ldw	r4,0(r2)
   47458:	88c00217 	ldw	r3,8(r17)
   4745c:	94e5c83a 	sub	r18,r18,r19
   47460:	94800054 	ori	r18,r18,1
   47464:	24e7c83a 	sub	r19,r4,r19
   47468:	1c800115 	stw	r18,4(r3)
   4746c:	8009883a 	mov	r4,r16
   47470:	14c00015 	stw	r19,0(r2)
   47474:	004d6600 	call	4d660 <__malloc_unlock>
   47478:	00800044 	movi	r2,1
   4747c:	dfc00417 	ldw	ra,16(sp)
   47480:	dcc00317 	ldw	r19,12(sp)
   47484:	dc800217 	ldw	r18,8(sp)
   47488:	dc400117 	ldw	r17,4(sp)
   4748c:	dc000017 	ldw	r16,0(sp)
   47490:	dec00504 	addi	sp,sp,20
   47494:	f800283a 	ret
   47498:	8009883a 	mov	r4,r16
   4749c:	000b883a 	mov	r5,zero
   474a0:	004a1ec0 	call	4a1ec <_sbrk_r>
   474a4:	88c00217 	ldw	r3,8(r17)
   474a8:	014003c4 	movi	r5,15
   474ac:	10c9c83a 	sub	r4,r2,r3
   474b0:	293fd70e 	bge	r5,r4,47410 <_malloc_trim_r+0x70>
   474b4:	01400174 	movhi	r5,5
   474b8:	29470204 	addi	r5,r5,7176
   474bc:	29400017 	ldw	r5,0(r5)
   474c0:	21000054 	ori	r4,r4,1
   474c4:	19000115 	stw	r4,4(r3)
   474c8:	1145c83a 	sub	r2,r2,r5
   474cc:	01400174 	movhi	r5,5
   474d0:	29471e04 	addi	r5,r5,7288
   474d4:	28800015 	stw	r2,0(r5)
   474d8:	003fcd06 	br	47410 <_malloc_trim_r+0x70>

000474dc <_free_r>:
   474dc:	defffd04 	addi	sp,sp,-12
   474e0:	dc000015 	stw	r16,0(sp)
   474e4:	dfc00215 	stw	ra,8(sp)
   474e8:	dc400115 	stw	r17,4(sp)
   474ec:	2821883a 	mov	r16,r5
   474f0:	28004c26 	beq	r5,zero,47624 <_free_r+0x148>
   474f4:	2023883a 	mov	r17,r4
   474f8:	004d6400 	call	4d640 <__malloc_lock>
   474fc:	823fff17 	ldw	r8,-4(r16)
   47500:	00bfff84 	movi	r2,-2
   47504:	81bffe04 	addi	r6,r16,-8
   47508:	4084703a 	and	r2,r8,r2
   4750c:	3087883a 	add	r3,r6,r2
   47510:	01400174 	movhi	r5,5
   47514:	29417b04 	addi	r5,r5,1516
   47518:	1a400117 	ldw	r9,4(r3)
   4751c:	29000217 	ldw	r4,8(r5)
   47520:	01ffff04 	movi	r7,-4
   47524:	49ce703a 	and	r7,r9,r7
   47528:	20c06526 	beq	r4,r3,476c0 <_free_r+0x1e4>
   4752c:	19c00115 	stw	r7,4(r3)
   47530:	4200004c 	andi	r8,r8,1
   47534:	40003026 	beq	r8,zero,475f8 <_free_r+0x11c>
   47538:	0009883a 	mov	r4,zero
   4753c:	19d1883a 	add	r8,r3,r7
   47540:	42000117 	ldw	r8,4(r8)
   47544:	4200004c 	andi	r8,r8,1
   47548:	4000061e 	bne	r8,zero,47564 <_free_r+0x88>
   4754c:	11c5883a 	add	r2,r2,r7
   47550:	19c00217 	ldw	r7,8(r3)
   47554:	20004e26 	beq	r4,zero,47690 <_free_r+0x1b4>
   47558:	18c00317 	ldw	r3,12(r3)
   4755c:	38c00315 	stw	r3,12(r7)
   47560:	19c00215 	stw	r7,8(r3)
   47564:	10c00054 	ori	r3,r2,1
   47568:	30c00115 	stw	r3,4(r6)
   4756c:	3087883a 	add	r3,r6,r2
   47570:	18800015 	stw	r2,0(r3)
   47574:	20001a1e 	bne	r4,zero,475e0 <_free_r+0x104>
   47578:	00c07fc4 	movi	r3,511
   4757c:	18802e2e 	bgeu	r3,r2,47638 <_free_r+0x15c>
   47580:	1006d27a 	srli	r3,r2,9
   47584:	01000104 	movi	r4,4
   47588:	20c06636 	bltu	r4,r3,47724 <_free_r+0x248>
   4758c:	1008d1ba 	srli	r4,r2,6
   47590:	21000e04 	addi	r4,r4,56
   47594:	210f883a 	add	r7,r4,r4
   47598:	39cf883a 	add	r7,r7,r7
   4759c:	39cf883a 	add	r7,r7,r7
   475a0:	29cf883a 	add	r7,r5,r7
   475a4:	38c00217 	ldw	r3,8(r7)
   475a8:	01400174 	movhi	r5,5
   475ac:	29417b04 	addi	r5,r5,1516
   475b0:	19c06126 	beq	r3,r7,47738 <_free_r+0x25c>
   475b4:	013fff04 	movi	r4,-4
   475b8:	19400117 	ldw	r5,4(r3)
   475bc:	290a703a 	and	r5,r5,r4
   475c0:	1140022e 	bgeu	r2,r5,475cc <_free_r+0xf0>
   475c4:	18c00217 	ldw	r3,8(r3)
   475c8:	38fffb1e 	bne	r7,r3,475b8 <_free_r+0xdc>
   475cc:	18800317 	ldw	r2,12(r3)
   475d0:	30800315 	stw	r2,12(r6)
   475d4:	30c00215 	stw	r3,8(r6)
   475d8:	11800215 	stw	r6,8(r2)
   475dc:	19800315 	stw	r6,12(r3)
   475e0:	8809883a 	mov	r4,r17
   475e4:	dfc00217 	ldw	ra,8(sp)
   475e8:	dc400117 	ldw	r17,4(sp)
   475ec:	dc000017 	ldw	r16,0(sp)
   475f0:	dec00304 	addi	sp,sp,12
   475f4:	004d6601 	jmpi	4d660 <__malloc_unlock>
   475f8:	813ffe17 	ldw	r4,-8(r16)
   475fc:	2a400204 	addi	r9,r5,8
   47600:	310dc83a 	sub	r6,r6,r4
   47604:	32000217 	ldw	r8,8(r6)
   47608:	1105883a 	add	r2,r2,r4
   4760c:	42404326 	beq	r8,r9,4771c <_free_r+0x240>
   47610:	32400317 	ldw	r9,12(r6)
   47614:	0009883a 	mov	r4,zero
   47618:	42400315 	stw	r9,12(r8)
   4761c:	4a000215 	stw	r8,8(r9)
   47620:	003fc606 	br	4753c <_free_r+0x60>
   47624:	dfc00217 	ldw	ra,8(sp)
   47628:	dc400117 	ldw	r17,4(sp)
   4762c:	dc000017 	ldw	r16,0(sp)
   47630:	dec00304 	addi	sp,sp,12
   47634:	f800283a 	ret
   47638:	1004d0fa 	srli	r2,r2,3
   4763c:	02000044 	movi	r8,1
   47640:	29c00117 	ldw	r7,4(r5)
   47644:	1087883a 	add	r3,r2,r2
   47648:	18c7883a 	add	r3,r3,r3
   4764c:	18c7883a 	add	r3,r3,r3
   47650:	28c7883a 	add	r3,r5,r3
   47654:	1005d0ba 	srai	r2,r2,2
   47658:	19000217 	ldw	r4,8(r3)
   4765c:	30c00315 	stw	r3,12(r6)
   47660:	4084983a 	sll	r2,r8,r2
   47664:	31000215 	stw	r4,8(r6)
   47668:	19800215 	stw	r6,8(r3)
   4766c:	11c4b03a 	or	r2,r2,r7
   47670:	21800315 	stw	r6,12(r4)
   47674:	8809883a 	mov	r4,r17
   47678:	28800115 	stw	r2,4(r5)
   4767c:	dfc00217 	ldw	ra,8(sp)
   47680:	dc400117 	ldw	r17,4(sp)
   47684:	dc000017 	ldw	r16,0(sp)
   47688:	dec00304 	addi	sp,sp,12
   4768c:	004d6601 	jmpi	4d660 <__malloc_unlock>
   47690:	02000174 	movhi	r8,5
   47694:	42017d04 	addi	r8,r8,1524
   47698:	3a3faf1e 	bne	r7,r8,47558 <_free_r+0x7c>
   4769c:	29800515 	stw	r6,20(r5)
   476a0:	29800415 	stw	r6,16(r5)
   476a4:	10c00054 	ori	r3,r2,1
   476a8:	31c00315 	stw	r7,12(r6)
   476ac:	31c00215 	stw	r7,8(r6)
   476b0:	30c00115 	stw	r3,4(r6)
   476b4:	308d883a 	add	r6,r6,r2
   476b8:	30800015 	stw	r2,0(r6)
   476bc:	003fc806 	br	475e0 <_free_r+0x104>
   476c0:	4200004c 	andi	r8,r8,1
   476c4:	3885883a 	add	r2,r7,r2
   476c8:	4000071e 	bne	r8,zero,476e8 <_free_r+0x20c>
   476cc:	81fffe17 	ldw	r7,-8(r16)
   476d0:	31cdc83a 	sub	r6,r6,r7
   476d4:	30c00317 	ldw	r3,12(r6)
   476d8:	31000217 	ldw	r4,8(r6)
   476dc:	11c5883a 	add	r2,r2,r7
   476e0:	20c00315 	stw	r3,12(r4)
   476e4:	19000215 	stw	r4,8(r3)
   476e8:	00c00174 	movhi	r3,5
   476ec:	18c70304 	addi	r3,r3,7180
   476f0:	11000054 	ori	r4,r2,1
   476f4:	18c00017 	ldw	r3,0(r3)
   476f8:	31000115 	stw	r4,4(r6)
   476fc:	29800215 	stw	r6,8(r5)
   47700:	10ffb736 	bltu	r2,r3,475e0 <_free_r+0x104>
   47704:	00800174 	movhi	r2,5
   47708:	10871404 	addi	r2,r2,7248
   4770c:	11400017 	ldw	r5,0(r2)
   47710:	8809883a 	mov	r4,r17
   47714:	00473a00 	call	473a0 <_malloc_trim_r>
   47718:	003fb106 	br	475e0 <_free_r+0x104>
   4771c:	01000044 	movi	r4,1
   47720:	003f8606 	br	4753c <_free_r+0x60>
   47724:	01000504 	movi	r4,20
   47728:	20c00b36 	bltu	r4,r3,47758 <_free_r+0x27c>
   4772c:	190016c4 	addi	r4,r3,91
   47730:	210f883a 	add	r7,r4,r4
   47734:	003f9806 	br	47598 <_free_r+0xbc>
   47738:	2009d0ba 	srai	r4,r4,2
   4773c:	00800044 	movi	r2,1
   47740:	29c00117 	ldw	r7,4(r5)
   47744:	1108983a 	sll	r4,r2,r4
   47748:	1805883a 	mov	r2,r3
   4774c:	21c8b03a 	or	r4,r4,r7
   47750:	29000115 	stw	r4,4(r5)
   47754:	003f9e06 	br	475d0 <_free_r+0xf4>
   47758:	01001504 	movi	r4,84
   4775c:	20c00436 	bltu	r4,r3,47770 <_free_r+0x294>
   47760:	1008d33a 	srli	r4,r2,12
   47764:	21001b84 	addi	r4,r4,110
   47768:	210f883a 	add	r7,r4,r4
   4776c:	003f8a06 	br	47598 <_free_r+0xbc>
   47770:	01005504 	movi	r4,340
   47774:	20c00436 	bltu	r4,r3,47788 <_free_r+0x2ac>
   47778:	1008d3fa 	srli	r4,r2,15
   4777c:	21001dc4 	addi	r4,r4,119
   47780:	210f883a 	add	r7,r4,r4
   47784:	003f8406 	br	47598 <_free_r+0xbc>
   47788:	01015504 	movi	r4,1364
   4778c:	20c00436 	bltu	r4,r3,477a0 <_free_r+0x2c4>
   47790:	1008d4ba 	srli	r4,r2,18
   47794:	21001f04 	addi	r4,r4,124
   47798:	210f883a 	add	r7,r4,r4
   4779c:	003f7e06 	br	47598 <_free_r+0xbc>
   477a0:	01c03f04 	movi	r7,252
   477a4:	01001f84 	movi	r4,126
   477a8:	003f7b06 	br	47598 <_free_r+0xbc>

000477ac <__sfvwrite_r>:
   477ac:	30800217 	ldw	r2,8(r6)
   477b0:	defff404 	addi	sp,sp,-48
   477b4:	dcc00515 	stw	r19,20(sp)
   477b8:	dfc00b15 	stw	ra,44(sp)
   477bc:	df000a15 	stw	fp,40(sp)
   477c0:	ddc00915 	stw	r23,36(sp)
   477c4:	dd800815 	stw	r22,32(sp)
   477c8:	dd400715 	stw	r21,28(sp)
   477cc:	dd000615 	stw	r20,24(sp)
   477d0:	dc800415 	stw	r18,16(sp)
   477d4:	dc400315 	stw	r17,12(sp)
   477d8:	dc000215 	stw	r16,8(sp)
   477dc:	3027883a 	mov	r19,r6
   477e0:	10001d26 	beq	r2,zero,47858 <__sfvwrite_r+0xac>
   477e4:	2880030b 	ldhu	r2,12(r5)
   477e8:	202b883a 	mov	r21,r4
   477ec:	2821883a 	mov	r16,r5
   477f0:	10c0020c 	andi	r3,r2,8
   477f4:	18002526 	beq	r3,zero,4788c <__sfvwrite_r+0xe0>
   477f8:	28c00417 	ldw	r3,16(r5)
   477fc:	18002326 	beq	r3,zero,4788c <__sfvwrite_r+0xe0>
   47800:	10c0008c 	andi	r3,r2,2
   47804:	9c400017 	ldw	r17,0(r19)
   47808:	18002826 	beq	r3,zero,478ac <__sfvwrite_r+0x100>
   4780c:	0029883a 	mov	r20,zero
   47810:	0025883a 	mov	r18,zero
   47814:	05810004 	movi	r22,1024
   47818:	a00d883a 	mov	r6,r20
   4781c:	a809883a 	mov	r4,r21
   47820:	90004726 	beq	r18,zero,47940 <__sfvwrite_r+0x194>
   47824:	900f883a 	mov	r7,r18
   47828:	81400717 	ldw	r5,28(r16)
   4782c:	b480012e 	bgeu	r22,r18,47834 <__sfvwrite_r+0x88>
   47830:	01c10004 	movi	r7,1024
   47834:	80800917 	ldw	r2,36(r16)
   47838:	103ee83a 	callr	r2
   4783c:	00804c0e 	bge	zero,r2,47970 <__sfvwrite_r+0x1c4>
   47840:	98c00217 	ldw	r3,8(r19)
   47844:	a0a9883a 	add	r20,r20,r2
   47848:	90a5c83a 	sub	r18,r18,r2
   4784c:	1885c83a 	sub	r2,r3,r2
   47850:	98800215 	stw	r2,8(r19)
   47854:	103ff01e 	bne	r2,zero,47818 <__sfvwrite_r+0x6c>
   47858:	0005883a 	mov	r2,zero
   4785c:	dfc00b17 	ldw	ra,44(sp)
   47860:	df000a17 	ldw	fp,40(sp)
   47864:	ddc00917 	ldw	r23,36(sp)
   47868:	dd800817 	ldw	r22,32(sp)
   4786c:	dd400717 	ldw	r21,28(sp)
   47870:	dd000617 	ldw	r20,24(sp)
   47874:	dcc00517 	ldw	r19,20(sp)
   47878:	dc800417 	ldw	r18,16(sp)
   4787c:	dc400317 	ldw	r17,12(sp)
   47880:	dc000217 	ldw	r16,8(sp)
   47884:	dec00c04 	addi	sp,sp,48
   47888:	f800283a 	ret
   4788c:	a809883a 	mov	r4,r21
   47890:	800b883a 	mov	r5,r16
   47894:	00454240 	call	45424 <__swsetup_r>
   47898:	1000e81e 	bne	r2,zero,47c3c <__sfvwrite_r+0x490>
   4789c:	8080030b 	ldhu	r2,12(r16)
   478a0:	9c400017 	ldw	r17,0(r19)
   478a4:	10c0008c 	andi	r3,r2,2
   478a8:	183fd81e 	bne	r3,zero,4780c <__sfvwrite_r+0x60>
   478ac:	10c0004c 	andi	r3,r2,1
   478b0:	002d883a 	mov	r22,zero
   478b4:	1800331e 	bne	r3,zero,47984 <__sfvwrite_r+0x1d8>
   478b8:	0025883a 	mov	r18,zero
   478bc:	90001c26 	beq	r18,zero,47930 <__sfvwrite_r+0x184>
   478c0:	10c0800c 	andi	r3,r2,512
   478c4:	85000217 	ldw	r20,8(r16)
   478c8:	18006f26 	beq	r3,zero,47a88 <__sfvwrite_r+0x2dc>
   478cc:	95008936 	bltu	r18,r20,47af4 <__sfvwrite_r+0x348>
   478d0:	10c1200c 	andi	r3,r2,1152
   478d4:	1800a11e 	bne	r3,zero,47b5c <__sfvwrite_r+0x3b0>
   478d8:	81000017 	ldw	r4,0(r16)
   478dc:	a02f883a 	mov	r23,r20
   478e0:	a039883a 	mov	fp,r20
   478e4:	9029883a 	mov	r20,r18
   478e8:	b00b883a 	mov	r5,r22
   478ec:	b80d883a 	mov	r6,r23
   478f0:	00488ec0 	call	488ec <memmove>
   478f4:	81400217 	ldw	r5,8(r16)
   478f8:	81000017 	ldw	r4,0(r16)
   478fc:	9005883a 	mov	r2,r18
   47900:	2f39c83a 	sub	fp,r5,fp
   47904:	25c7883a 	add	r3,r4,r23
   47908:	87000215 	stw	fp,8(r16)
   4790c:	80c00015 	stw	r3,0(r16)
   47910:	98c00217 	ldw	r3,8(r19)
   47914:	b0ad883a 	add	r22,r22,r2
   47918:	90a5c83a 	sub	r18,r18,r2
   4791c:	1d29c83a 	sub	r20,r3,r20
   47920:	9d000215 	stw	r20,8(r19)
   47924:	a03fcc26 	beq	r20,zero,47858 <__sfvwrite_r+0xac>
   47928:	8080030b 	ldhu	r2,12(r16)
   4792c:	903fe41e 	bne	r18,zero,478c0 <__sfvwrite_r+0x114>
   47930:	8d800017 	ldw	r22,0(r17)
   47934:	8c800117 	ldw	r18,4(r17)
   47938:	8c400204 	addi	r17,r17,8
   4793c:	003fdf06 	br	478bc <__sfvwrite_r+0x110>
   47940:	8d000017 	ldw	r20,0(r17)
   47944:	8c800117 	ldw	r18,4(r17)
   47948:	8c400204 	addi	r17,r17,8
   4794c:	003fb206 	br	47818 <__sfvwrite_r+0x6c>
   47950:	0049c200 	call	49c20 <_realloc_r>
   47954:	1039883a 	mov	fp,r2
   47958:	10009d1e 	bne	r2,zero,47bd0 <__sfvwrite_r+0x424>
   4795c:	81400417 	ldw	r5,16(r16)
   47960:	a809883a 	mov	r4,r21
   47964:	00474dc0 	call	474dc <_free_r>
   47968:	00800304 	movi	r2,12
   4796c:	a8800015 	stw	r2,0(r21)
   47970:	80c0030b 	ldhu	r3,12(r16)
   47974:	00bfffc4 	movi	r2,-1
   47978:	18c01014 	ori	r3,r3,64
   4797c:	80c0030d 	sth	r3,12(r16)
   47980:	003fb606 	br	4785c <__sfvwrite_r+0xb0>
   47984:	0007883a 	mov	r3,zero
   47988:	0039883a 	mov	fp,zero
   4798c:	0025883a 	mov	r18,zero
   47990:	90001f26 	beq	r18,zero,47a10 <__sfvwrite_r+0x264>
   47994:	18006826 	beq	r3,zero,47b38 <__sfvwrite_r+0x38c>
   47998:	b02f883a 	mov	r23,r22
   4799c:	9580012e 	bgeu	r18,r22,479a4 <__sfvwrite_r+0x1f8>
   479a0:	902f883a 	mov	r23,r18
   479a4:	81000017 	ldw	r4,0(r16)
   479a8:	80800417 	ldw	r2,16(r16)
   479ac:	b829883a 	mov	r20,r23
   479b0:	81800217 	ldw	r6,8(r16)
   479b4:	81c00517 	ldw	r7,20(r16)
   479b8:	1100022e 	bgeu	r2,r4,479c4 <__sfvwrite_r+0x218>
   479bc:	31d1883a 	add	r8,r6,r7
   479c0:	45c01816 	blt	r8,r23,47a24 <__sfvwrite_r+0x278>
   479c4:	b9c03f16 	blt	r23,r7,47ac4 <__sfvwrite_r+0x318>
   479c8:	80800917 	ldw	r2,36(r16)
   479cc:	81400717 	ldw	r5,28(r16)
   479d0:	a809883a 	mov	r4,r21
   479d4:	d8c00115 	stw	r3,4(sp)
   479d8:	e00d883a 	mov	r6,fp
   479dc:	103ee83a 	callr	r2
   479e0:	1029883a 	mov	r20,r2
   479e4:	d8c00117 	ldw	r3,4(sp)
   479e8:	00bfe10e 	bge	zero,r2,47970 <__sfvwrite_r+0x1c4>
   479ec:	b52dc83a 	sub	r22,r22,r20
   479f0:	b0001f26 	beq	r22,zero,47a70 <__sfvwrite_r+0x2c4>
   479f4:	98800217 	ldw	r2,8(r19)
   479f8:	e539883a 	add	fp,fp,r20
   479fc:	9525c83a 	sub	r18,r18,r20
   47a00:	1529c83a 	sub	r20,r2,r20
   47a04:	9d000215 	stw	r20,8(r19)
   47a08:	a03f9326 	beq	r20,zero,47858 <__sfvwrite_r+0xac>
   47a0c:	903fe11e 	bne	r18,zero,47994 <__sfvwrite_r+0x1e8>
   47a10:	8f000017 	ldw	fp,0(r17)
   47a14:	8c800117 	ldw	r18,4(r17)
   47a18:	0007883a 	mov	r3,zero
   47a1c:	8c400204 	addi	r17,r17,8
   47a20:	003fdb06 	br	47990 <__sfvwrite_r+0x1e4>
   47a24:	400d883a 	mov	r6,r8
   47a28:	e00b883a 	mov	r5,fp
   47a2c:	d8c00115 	stw	r3,4(sp)
   47a30:	da000015 	stw	r8,0(sp)
   47a34:	00488ec0 	call	488ec <memmove>
   47a38:	da000017 	ldw	r8,0(sp)
   47a3c:	80800017 	ldw	r2,0(r16)
   47a40:	a809883a 	mov	r4,r21
   47a44:	800b883a 	mov	r5,r16
   47a48:	1205883a 	add	r2,r2,r8
   47a4c:	80800015 	stw	r2,0(r16)
   47a50:	da000015 	stw	r8,0(sp)
   47a54:	0046d9c0 	call	46d9c <_fflush_r>
   47a58:	d8c00117 	ldw	r3,4(sp)
   47a5c:	da000017 	ldw	r8,0(sp)
   47a60:	103fc31e 	bne	r2,zero,47970 <__sfvwrite_r+0x1c4>
   47a64:	4029883a 	mov	r20,r8
   47a68:	b52dc83a 	sub	r22,r22,r20
   47a6c:	b03fe11e 	bne	r22,zero,479f4 <__sfvwrite_r+0x248>
   47a70:	a809883a 	mov	r4,r21
   47a74:	800b883a 	mov	r5,r16
   47a78:	0046d9c0 	call	46d9c <_fflush_r>
   47a7c:	103fbc1e 	bne	r2,zero,47970 <__sfvwrite_r+0x1c4>
   47a80:	0007883a 	mov	r3,zero
   47a84:	003fdb06 	br	479f4 <__sfvwrite_r+0x248>
   47a88:	81000017 	ldw	r4,0(r16)
   47a8c:	80800417 	ldw	r2,16(r16)
   47a90:	1100012e 	bgeu	r2,r4,47a98 <__sfvwrite_r+0x2ec>
   47a94:	a4805836 	bltu	r20,r18,47bf8 <__sfvwrite_r+0x44c>
   47a98:	81c00517 	ldw	r7,20(r16)
   47a9c:	91c01a36 	bltu	r18,r7,47b08 <__sfvwrite_r+0x35c>
   47aa0:	80800917 	ldw	r2,36(r16)
   47aa4:	81400717 	ldw	r5,28(r16)
   47aa8:	a809883a 	mov	r4,r21
   47aac:	b00d883a 	mov	r6,r22
   47ab0:	103ee83a 	callr	r2
   47ab4:	1029883a 	mov	r20,r2
   47ab8:	00bfad0e 	bge	zero,r2,47970 <__sfvwrite_r+0x1c4>
   47abc:	a005883a 	mov	r2,r20
   47ac0:	003f9306 	br	47910 <__sfvwrite_r+0x164>
   47ac4:	b80d883a 	mov	r6,r23
   47ac8:	e00b883a 	mov	r5,fp
   47acc:	d8c00115 	stw	r3,4(sp)
   47ad0:	00488ec0 	call	488ec <memmove>
   47ad4:	80800217 	ldw	r2,8(r16)
   47ad8:	81000017 	ldw	r4,0(r16)
   47adc:	d8c00117 	ldw	r3,4(sp)
   47ae0:	15c5c83a 	sub	r2,r2,r23
   47ae4:	25ef883a 	add	r23,r4,r23
   47ae8:	80800215 	stw	r2,8(r16)
   47aec:	85c00015 	stw	r23,0(r16)
   47af0:	003fbe06 	br	479ec <__sfvwrite_r+0x240>
   47af4:	81000017 	ldw	r4,0(r16)
   47af8:	9039883a 	mov	fp,r18
   47afc:	9029883a 	mov	r20,r18
   47b00:	902f883a 	mov	r23,r18
   47b04:	003f7806 	br	478e8 <__sfvwrite_r+0x13c>
   47b08:	b00b883a 	mov	r5,r22
   47b0c:	900d883a 	mov	r6,r18
   47b10:	00488ec0 	call	488ec <memmove>
   47b14:	80c00217 	ldw	r3,8(r16)
   47b18:	80800017 	ldw	r2,0(r16)
   47b1c:	9029883a 	mov	r20,r18
   47b20:	1c87c83a 	sub	r3,r3,r18
   47b24:	1485883a 	add	r2,r2,r18
   47b28:	80800015 	stw	r2,0(r16)
   47b2c:	80c00215 	stw	r3,8(r16)
   47b30:	9005883a 	mov	r2,r18
   47b34:	003f7606 	br	47910 <__sfvwrite_r+0x164>
   47b38:	e009883a 	mov	r4,fp
   47b3c:	01400284 	movi	r5,10
   47b40:	900d883a 	mov	r6,r18
   47b44:	00488040 	call	48804 <memchr>
   47b48:	10003926 	beq	r2,zero,47c30 <__sfvwrite_r+0x484>
   47b4c:	15800044 	addi	r22,r2,1
   47b50:	b72dc83a 	sub	r22,r22,fp
   47b54:	00c00044 	movi	r3,1
   47b58:	003f8f06 	br	47998 <__sfvwrite_r+0x1ec>
   47b5c:	81000517 	ldw	r4,20(r16)
   47b60:	81400417 	ldw	r5,16(r16)
   47b64:	80c00017 	ldw	r3,0(r16)
   47b68:	210d883a 	add	r6,r4,r4
   47b6c:	3109883a 	add	r4,r6,r4
   47b70:	2028d7fa 	srli	r20,r4,31
   47b74:	196fc83a 	sub	r23,r3,r5
   47b78:	b9800044 	addi	r6,r23,1
   47b7c:	a109883a 	add	r4,r20,r4
   47b80:	2029d07a 	srai	r20,r4,1
   47b84:	348d883a 	add	r6,r6,r18
   47b88:	a180272e 	bgeu	r20,r6,47c28 <__sfvwrite_r+0x47c>
   47b8c:	3029883a 	mov	r20,r6
   47b90:	1081000c 	andi	r2,r2,1024
   47b94:	a809883a 	mov	r4,r21
   47b98:	103f6d26 	beq	r2,zero,47950 <__sfvwrite_r+0x1a4>
   47b9c:	300b883a 	mov	r5,r6
   47ba0:	00480400 	call	48040 <_malloc_r>
   47ba4:	1039883a 	mov	fp,r2
   47ba8:	103f6f26 	beq	r2,zero,47968 <__sfvwrite_r+0x1bc>
   47bac:	81400417 	ldw	r5,16(r16)
   47bb0:	1009883a 	mov	r4,r2
   47bb4:	b80d883a 	mov	r6,r23
   47bb8:	00431340 	call	43134 <memcpy>
   47bbc:	8080030b 	ldhu	r2,12(r16)
   47bc0:	00fedfc4 	movi	r3,-1153
   47bc4:	10c4703a 	and	r2,r2,r3
   47bc8:	10802014 	ori	r2,r2,128
   47bcc:	8080030d 	sth	r2,12(r16)
   47bd0:	e5c9883a 	add	r4,fp,r23
   47bd4:	a5c7c83a 	sub	r3,r20,r23
   47bd8:	87000415 	stw	fp,16(r16)
   47bdc:	85000515 	stw	r20,20(r16)
   47be0:	81000015 	stw	r4,0(r16)
   47be4:	9039883a 	mov	fp,r18
   47be8:	80c00215 	stw	r3,8(r16)
   47bec:	9029883a 	mov	r20,r18
   47bf0:	902f883a 	mov	r23,r18
   47bf4:	003f3c06 	br	478e8 <__sfvwrite_r+0x13c>
   47bf8:	b00b883a 	mov	r5,r22
   47bfc:	a00d883a 	mov	r6,r20
   47c00:	00488ec0 	call	488ec <memmove>
   47c04:	80800017 	ldw	r2,0(r16)
   47c08:	a809883a 	mov	r4,r21
   47c0c:	800b883a 	mov	r5,r16
   47c10:	1505883a 	add	r2,r2,r20
   47c14:	80800015 	stw	r2,0(r16)
   47c18:	0046d9c0 	call	46d9c <_fflush_r>
   47c1c:	103f541e 	bne	r2,zero,47970 <__sfvwrite_r+0x1c4>
   47c20:	a005883a 	mov	r2,r20
   47c24:	003f3a06 	br	47910 <__sfvwrite_r+0x164>
   47c28:	a00d883a 	mov	r6,r20
   47c2c:	003fd806 	br	47b90 <__sfvwrite_r+0x3e4>
   47c30:	95800044 	addi	r22,r18,1
   47c34:	00c00044 	movi	r3,1
   47c38:	003f5706 	br	47998 <__sfvwrite_r+0x1ec>
   47c3c:	80c0030b 	ldhu	r3,12(r16)
   47c40:	00bfffc4 	movi	r2,-1
   47c44:	18c01014 	ori	r3,r3,64
   47c48:	80c0030d 	sth	r3,12(r16)
   47c4c:	00c00244 	movi	r3,9
   47c50:	a8c00015 	stw	r3,0(r21)
   47c54:	003f0106 	br	4785c <__sfvwrite_r+0xb0>

00047c58 <_fwalk>:
   47c58:	defff904 	addi	sp,sp,-28
   47c5c:	dcc00315 	stw	r19,12(sp)
   47c60:	24c0b804 	addi	r19,r4,736
   47c64:	dd400515 	stw	r21,20(sp)
   47c68:	dd000415 	stw	r20,16(sp)
   47c6c:	dfc00615 	stw	ra,24(sp)
   47c70:	dc800215 	stw	r18,8(sp)
   47c74:	dc400115 	stw	r17,4(sp)
   47c78:	dc000015 	stw	r16,0(sp)
   47c7c:	282b883a 	mov	r21,r5
   47c80:	0029883a 	mov	r20,zero
   47c84:	00473600 	call	47360 <__sfp_lock_acquire>
   47c88:	98001226 	beq	r19,zero,47cd4 <_fwalk+0x7c>
   47c8c:	04bfffc4 	movi	r18,-1
   47c90:	9c400117 	ldw	r17,4(r19)
   47c94:	9c000217 	ldw	r16,8(r19)
   47c98:	8c7fffc4 	addi	r17,r17,-1
   47c9c:	88000b16 	blt	r17,zero,47ccc <_fwalk+0x74>
   47ca0:	84000304 	addi	r16,r16,12
   47ca4:	80c0000f 	ldh	r3,0(r16)
   47ca8:	8c7fffc4 	addi	r17,r17,-1
   47cac:	813ffd04 	addi	r4,r16,-12
   47cb0:	18000426 	beq	r3,zero,47cc4 <_fwalk+0x6c>
   47cb4:	80c0008f 	ldh	r3,2(r16)
   47cb8:	1c800226 	beq	r3,r18,47cc4 <_fwalk+0x6c>
   47cbc:	a83ee83a 	callr	r21
   47cc0:	a0a8b03a 	or	r20,r20,r2
   47cc4:	84001a04 	addi	r16,r16,104
   47cc8:	8cbff61e 	bne	r17,r18,47ca4 <_fwalk+0x4c>
   47ccc:	9cc00017 	ldw	r19,0(r19)
   47cd0:	983fef1e 	bne	r19,zero,47c90 <_fwalk+0x38>
   47cd4:	00473640 	call	47364 <__sfp_lock_release>
   47cd8:	a005883a 	mov	r2,r20
   47cdc:	dfc00617 	ldw	ra,24(sp)
   47ce0:	dd400517 	ldw	r21,20(sp)
   47ce4:	dd000417 	ldw	r20,16(sp)
   47ce8:	dcc00317 	ldw	r19,12(sp)
   47cec:	dc800217 	ldw	r18,8(sp)
   47cf0:	dc400117 	ldw	r17,4(sp)
   47cf4:	dc000017 	ldw	r16,0(sp)
   47cf8:	dec00704 	addi	sp,sp,28
   47cfc:	f800283a 	ret

00047d00 <_fwalk_reent>:
   47d00:	defff804 	addi	sp,sp,-32
   47d04:	dcc00315 	stw	r19,12(sp)
   47d08:	24c0b804 	addi	r19,r4,736
   47d0c:	dd800615 	stw	r22,24(sp)
   47d10:	dd400515 	stw	r21,20(sp)
   47d14:	dd000415 	stw	r20,16(sp)
   47d18:	dfc00715 	stw	ra,28(sp)
   47d1c:	dc800215 	stw	r18,8(sp)
   47d20:	dc400115 	stw	r17,4(sp)
   47d24:	dc000015 	stw	r16,0(sp)
   47d28:	2029883a 	mov	r20,r4
   47d2c:	282b883a 	mov	r21,r5
   47d30:	002d883a 	mov	r22,zero
   47d34:	00473600 	call	47360 <__sfp_lock_acquire>
   47d38:	98001326 	beq	r19,zero,47d88 <_fwalk_reent+0x88>
   47d3c:	04bfffc4 	movi	r18,-1
   47d40:	9c400117 	ldw	r17,4(r19)
   47d44:	9c000217 	ldw	r16,8(r19)
   47d48:	8c7fffc4 	addi	r17,r17,-1
   47d4c:	88000c16 	blt	r17,zero,47d80 <_fwalk_reent+0x80>
   47d50:	84000304 	addi	r16,r16,12
   47d54:	80c0000f 	ldh	r3,0(r16)
   47d58:	8c7fffc4 	addi	r17,r17,-1
   47d5c:	817ffd04 	addi	r5,r16,-12
   47d60:	18000526 	beq	r3,zero,47d78 <_fwalk_reent+0x78>
   47d64:	80c0008f 	ldh	r3,2(r16)
   47d68:	a009883a 	mov	r4,r20
   47d6c:	1c800226 	beq	r3,r18,47d78 <_fwalk_reent+0x78>
   47d70:	a83ee83a 	callr	r21
   47d74:	b0acb03a 	or	r22,r22,r2
   47d78:	84001a04 	addi	r16,r16,104
   47d7c:	8cbff51e 	bne	r17,r18,47d54 <_fwalk_reent+0x54>
   47d80:	9cc00017 	ldw	r19,0(r19)
   47d84:	983fee1e 	bne	r19,zero,47d40 <_fwalk_reent+0x40>
   47d88:	00473640 	call	47364 <__sfp_lock_release>
   47d8c:	b005883a 	mov	r2,r22
   47d90:	dfc00717 	ldw	ra,28(sp)
   47d94:	dd800617 	ldw	r22,24(sp)
   47d98:	dd400517 	ldw	r21,20(sp)
   47d9c:	dd000417 	ldw	r20,16(sp)
   47da0:	dcc00317 	ldw	r19,12(sp)
   47da4:	dc800217 	ldw	r18,8(sp)
   47da8:	dc400117 	ldw	r17,4(sp)
   47dac:	dc000017 	ldw	r16,0(sp)
   47db0:	dec00804 	addi	sp,sp,32
   47db4:	f800283a 	ret

00047db8 <_setlocale_r>:
   47db8:	defffe04 	addi	sp,sp,-8
   47dbc:	dc000015 	stw	r16,0(sp)
   47dc0:	dfc00115 	stw	ra,4(sp)
   47dc4:	3021883a 	mov	r16,r6
   47dc8:	30000526 	beq	r6,zero,47de0 <_setlocale_r+0x28>
   47dcc:	3009883a 	mov	r4,r6
   47dd0:	01400174 	movhi	r5,5
   47dd4:	297fb504 	addi	r5,r5,-300
   47dd8:	004a38c0 	call	4a38c <strcmp>
   47ddc:	1000061e 	bne	r2,zero,47df8 <_setlocale_r+0x40>
   47de0:	00800174 	movhi	r2,5
   47de4:	10bfb404 	addi	r2,r2,-304
   47de8:	dfc00117 	ldw	ra,4(sp)
   47dec:	dc000017 	ldw	r16,0(sp)
   47df0:	dec00204 	addi	sp,sp,8
   47df4:	f800283a 	ret
   47df8:	8009883a 	mov	r4,r16
   47dfc:	01400174 	movhi	r5,5
   47e00:	297fb404 	addi	r5,r5,-304
   47e04:	004a38c0 	call	4a38c <strcmp>
   47e08:	103ff526 	beq	r2,zero,47de0 <_setlocale_r+0x28>
   47e0c:	8009883a 	mov	r4,r16
   47e10:	01400174 	movhi	r5,5
   47e14:	297f9f04 	addi	r5,r5,-388
   47e18:	004a38c0 	call	4a38c <strcmp>
   47e1c:	103ff026 	beq	r2,zero,47de0 <_setlocale_r+0x28>
   47e20:	0005883a 	mov	r2,zero
   47e24:	003ff006 	br	47de8 <_setlocale_r+0x30>

00047e28 <__locale_charset>:
   47e28:	00800174 	movhi	r2,5
   47e2c:	10816504 	addi	r2,r2,1428
   47e30:	f800283a 	ret

00047e34 <__locale_mb_cur_max>:
   47e34:	00800174 	movhi	r2,5
   47e38:	10870104 	addi	r2,r2,7172
   47e3c:	10800017 	ldw	r2,0(r2)
   47e40:	f800283a 	ret

00047e44 <__locale_msgcharset>:
   47e44:	00800174 	movhi	r2,5
   47e48:	10815d04 	addi	r2,r2,1396
   47e4c:	f800283a 	ret

00047e50 <__locale_cjk_lang>:
   47e50:	0005883a 	mov	r2,zero
   47e54:	f800283a 	ret

00047e58 <_localeconv_r>:
   47e58:	00800174 	movhi	r2,5
   47e5c:	10816d04 	addi	r2,r2,1460
   47e60:	f800283a 	ret

00047e64 <setlocale>:
   47e64:	00c00174 	movhi	r3,5
   47e68:	18c70004 	addi	r3,r3,7168
   47e6c:	2005883a 	mov	r2,r4
   47e70:	19000017 	ldw	r4,0(r3)
   47e74:	280d883a 	mov	r6,r5
   47e78:	100b883a 	mov	r5,r2
   47e7c:	0047db81 	jmpi	47db8 <_setlocale_r>

00047e80 <localeconv>:
   47e80:	00800174 	movhi	r2,5
   47e84:	10816d04 	addi	r2,r2,1460
   47e88:	f800283a 	ret

00047e8c <__smakebuf_r>:
   47e8c:	2880030b 	ldhu	r2,12(r5)
   47e90:	deffec04 	addi	sp,sp,-80
   47e94:	dc000f15 	stw	r16,60(sp)
   47e98:	dfc01315 	stw	ra,76(sp)
   47e9c:	dcc01215 	stw	r19,72(sp)
   47ea0:	dc801115 	stw	r18,68(sp)
   47ea4:	dc401015 	stw	r17,64(sp)
   47ea8:	10c0008c 	andi	r3,r2,2
   47eac:	2821883a 	mov	r16,r5
   47eb0:	18003a1e 	bne	r3,zero,47f9c <__smakebuf_r+0x110>
   47eb4:	2940038f 	ldh	r5,14(r5)
   47eb8:	2023883a 	mov	r17,r4
   47ebc:	28001b16 	blt	r5,zero,47f2c <__smakebuf_r+0xa0>
   47ec0:	d80d883a 	mov	r6,sp
   47ec4:	004be400 	call	4be40 <_fstat_r>
   47ec8:	10001716 	blt	r2,zero,47f28 <__smakebuf_r+0x9c>
   47ecc:	d8800117 	ldw	r2,4(sp)
   47ed0:	00e00014 	movui	r3,32768
   47ed4:	10bc000c 	andi	r2,r2,61440
   47ed8:	10c03e26 	beq	r2,r3,47fd4 <__smakebuf_r+0x148>
   47edc:	80c0030b 	ldhu	r3,12(r16)
   47ee0:	18c20014 	ori	r3,r3,2048
   47ee4:	80c0030d 	sth	r3,12(r16)
   47ee8:	00c80004 	movi	r3,8192
   47eec:	10c0431e 	bne	r2,r3,47ffc <__smakebuf_r+0x170>
   47ef0:	8140038f 	ldh	r5,14(r16)
   47ef4:	8809883a 	mov	r4,r17
   47ef8:	004bea80 	call	4bea8 <_isatty_r>
   47efc:	10004d26 	beq	r2,zero,48034 <__smakebuf_r+0x1a8>
   47f00:	80c0030b 	ldhu	r3,12(r16)
   47f04:	04c00044 	movi	r19,1
   47f08:	808010c4 	addi	r2,r16,67
   47f0c:	1cc6b03a 	or	r3,r3,r19
   47f10:	80c0030d 	sth	r3,12(r16)
   47f14:	80800015 	stw	r2,0(r16)
   47f18:	80800415 	stw	r2,16(r16)
   47f1c:	84c00515 	stw	r19,20(r16)
   47f20:	04810004 	movi	r18,1024
   47f24:	00000706 	br	47f44 <__smakebuf_r+0xb8>
   47f28:	8080030b 	ldhu	r2,12(r16)
   47f2c:	10c0200c 	andi	r3,r2,128
   47f30:	1800261e 	bne	r3,zero,47fcc <__smakebuf_r+0x140>
   47f34:	04810004 	movi	r18,1024
   47f38:	10820014 	ori	r2,r2,2048
   47f3c:	8080030d 	sth	r2,12(r16)
   47f40:	0027883a 	mov	r19,zero
   47f44:	8809883a 	mov	r4,r17
   47f48:	900b883a 	mov	r5,r18
   47f4c:	00480400 	call	48040 <_malloc_r>
   47f50:	10002d26 	beq	r2,zero,48008 <__smakebuf_r+0x17c>
   47f54:	80c0030b 	ldhu	r3,12(r16)
   47f58:	01000134 	movhi	r4,4
   47f5c:	211c0804 	addi	r4,r4,28704
   47f60:	89000f15 	stw	r4,60(r17)
   47f64:	18c02014 	ori	r3,r3,128
   47f68:	80c0030d 	sth	r3,12(r16)
   47f6c:	80800015 	stw	r2,0(r16)
   47f70:	80800415 	stw	r2,16(r16)
   47f74:	84800515 	stw	r18,20(r16)
   47f78:	98000d26 	beq	r19,zero,47fb0 <__smakebuf_r+0x124>
   47f7c:	8140038f 	ldh	r5,14(r16)
   47f80:	8809883a 	mov	r4,r17
   47f84:	004bea80 	call	4bea8 <_isatty_r>
   47f88:	10000926 	beq	r2,zero,47fb0 <__smakebuf_r+0x124>
   47f8c:	8080030b 	ldhu	r2,12(r16)
   47f90:	10800054 	ori	r2,r2,1
   47f94:	8080030d 	sth	r2,12(r16)
   47f98:	00000506 	br	47fb0 <__smakebuf_r+0x124>
   47f9c:	288010c4 	addi	r2,r5,67
   47fa0:	28800015 	stw	r2,0(r5)
   47fa4:	28800415 	stw	r2,16(r5)
   47fa8:	00800044 	movi	r2,1
   47fac:	28800515 	stw	r2,20(r5)
   47fb0:	dfc01317 	ldw	ra,76(sp)
   47fb4:	dcc01217 	ldw	r19,72(sp)
   47fb8:	dc801117 	ldw	r18,68(sp)
   47fbc:	dc401017 	ldw	r17,64(sp)
   47fc0:	dc000f17 	ldw	r16,60(sp)
   47fc4:	dec01404 	addi	sp,sp,80
   47fc8:	f800283a 	ret
   47fcc:	04801004 	movi	r18,64
   47fd0:	003fd906 	br	47f38 <__smakebuf_r+0xac>
   47fd4:	81000a17 	ldw	r4,40(r16)
   47fd8:	00c00174 	movhi	r3,5
   47fdc:	18e8ca04 	addi	r3,r3,-23768
   47fe0:	20ffbe1e 	bne	r4,r3,47edc <__smakebuf_r+0x50>
   47fe4:	80c0030b 	ldhu	r3,12(r16)
   47fe8:	01010004 	movi	r4,1024
   47fec:	81001315 	stw	r4,76(r16)
   47ff0:	1906b03a 	or	r3,r3,r4
   47ff4:	80c0030d 	sth	r3,12(r16)
   47ff8:	003fbb06 	br	47ee8 <__smakebuf_r+0x5c>
   47ffc:	0027883a 	mov	r19,zero
   48000:	04810004 	movi	r18,1024
   48004:	003fcf06 	br	47f44 <__smakebuf_r+0xb8>
   48008:	8080030b 	ldhu	r2,12(r16)
   4800c:	10c0800c 	andi	r3,r2,512
   48010:	183fe71e 	bne	r3,zero,47fb0 <__smakebuf_r+0x124>
   48014:	10800094 	ori	r2,r2,2
   48018:	80c010c4 	addi	r3,r16,67
   4801c:	8080030d 	sth	r2,12(r16)
   48020:	00800044 	movi	r2,1
   48024:	80c00015 	stw	r3,0(r16)
   48028:	80c00415 	stw	r3,16(r16)
   4802c:	80800515 	stw	r2,20(r16)
   48030:	003fdf06 	br	47fb0 <__smakebuf_r+0x124>
   48034:	04c00044 	movi	r19,1
   48038:	04810004 	movi	r18,1024
   4803c:	003fc106 	br	47f44 <__smakebuf_r+0xb8>

00048040 <_malloc_r>:
   48040:	defff504 	addi	sp,sp,-44
   48044:	dc800315 	stw	r18,12(sp)
   48048:	dfc00a15 	stw	ra,40(sp)
   4804c:	df000915 	stw	fp,36(sp)
   48050:	ddc00815 	stw	r23,32(sp)
   48054:	dd800715 	stw	r22,28(sp)
   48058:	dd400615 	stw	r21,24(sp)
   4805c:	dd000515 	stw	r20,20(sp)
   48060:	dcc00415 	stw	r19,16(sp)
   48064:	dc400215 	stw	r17,8(sp)
   48068:	dc000115 	stw	r16,4(sp)
   4806c:	288002c4 	addi	r2,r5,11
   48070:	00c00584 	movi	r3,22
   48074:	2025883a 	mov	r18,r4
   48078:	18802b2e 	bgeu	r3,r2,48128 <_malloc_r+0xe8>
   4807c:	047ffe04 	movi	r17,-8
   48080:	1462703a 	and	r17,r2,r17
   48084:	88002a16 	blt	r17,zero,48130 <_malloc_r+0xf0>
   48088:	89402936 	bltu	r17,r5,48130 <_malloc_r+0xf0>
   4808c:	9009883a 	mov	r4,r18
   48090:	004d6400 	call	4d640 <__malloc_lock>
   48094:	00807dc4 	movi	r2,503
   48098:	14402936 	bltu	r2,r17,48140 <_malloc_r+0x100>
   4809c:	8808d0fa 	srli	r4,r17,3
   480a0:	04c00174 	movhi	r19,5
   480a4:	9cc17b04 	addi	r19,r19,1516
   480a8:	2105883a 	add	r2,r4,r4
   480ac:	1085883a 	add	r2,r2,r2
   480b0:	1085883a 	add	r2,r2,r2
   480b4:	9885883a 	add	r2,r19,r2
   480b8:	14000317 	ldw	r16,12(r2)
   480bc:	80815226 	beq	r16,r2,48608 <_malloc_r+0x5c8>
   480c0:	81000117 	ldw	r4,4(r16)
   480c4:	00bfff04 	movi	r2,-4
   480c8:	80c00317 	ldw	r3,12(r16)
   480cc:	2084703a 	and	r2,r4,r2
   480d0:	8085883a 	add	r2,r16,r2
   480d4:	81000217 	ldw	r4,8(r16)
   480d8:	11400117 	ldw	r5,4(r2)
   480dc:	20c00315 	stw	r3,12(r4)
   480e0:	19000215 	stw	r4,8(r3)
   480e4:	28c00054 	ori	r3,r5,1
   480e8:	10c00115 	stw	r3,4(r2)
   480ec:	9009883a 	mov	r4,r18
   480f0:	004d6600 	call	4d660 <__malloc_unlock>
   480f4:	80800204 	addi	r2,r16,8
   480f8:	dfc00a17 	ldw	ra,40(sp)
   480fc:	df000917 	ldw	fp,36(sp)
   48100:	ddc00817 	ldw	r23,32(sp)
   48104:	dd800717 	ldw	r22,28(sp)
   48108:	dd400617 	ldw	r21,24(sp)
   4810c:	dd000517 	ldw	r20,20(sp)
   48110:	dcc00417 	ldw	r19,16(sp)
   48114:	dc800317 	ldw	r18,12(sp)
   48118:	dc400217 	ldw	r17,8(sp)
   4811c:	dc000117 	ldw	r16,4(sp)
   48120:	dec00b04 	addi	sp,sp,44
   48124:	f800283a 	ret
   48128:	04400404 	movi	r17,16
   4812c:	897fd72e 	bgeu	r17,r5,4808c <_malloc_r+0x4c>
   48130:	00800304 	movi	r2,12
   48134:	90800015 	stw	r2,0(r18)
   48138:	0005883a 	mov	r2,zero
   4813c:	003fee06 	br	480f8 <_malloc_r+0xb8>
   48140:	8808d27a 	srli	r4,r17,9
   48144:	20007126 	beq	r4,zero,4830c <_malloc_r+0x2cc>
   48148:	00800104 	movi	r2,4
   4814c:	1100f536 	bltu	r2,r4,48524 <_malloc_r+0x4e4>
   48150:	8808d1ba 	srli	r4,r17,6
   48154:	21000e04 	addi	r4,r4,56
   48158:	210b883a 	add	r5,r4,r4
   4815c:	294b883a 	add	r5,r5,r5
   48160:	294b883a 	add	r5,r5,r5
   48164:	04c00174 	movhi	r19,5
   48168:	9cc17b04 	addi	r19,r19,1516
   4816c:	994b883a 	add	r5,r19,r5
   48170:	2c000317 	ldw	r16,12(r5)
   48174:	2c000e26 	beq	r5,r16,481b0 <_malloc_r+0x170>
   48178:	80c00117 	ldw	r3,4(r16)
   4817c:	01ffff04 	movi	r7,-4
   48180:	018003c4 	movi	r6,15
   48184:	19c6703a 	and	r3,r3,r7
   48188:	1c45c83a 	sub	r2,r3,r17
   4818c:	30800716 	blt	r6,r2,481ac <_malloc_r+0x16c>
   48190:	1000610e 	bge	r2,zero,48318 <_malloc_r+0x2d8>
   48194:	84000317 	ldw	r16,12(r16)
   48198:	2c000526 	beq	r5,r16,481b0 <_malloc_r+0x170>
   4819c:	80c00117 	ldw	r3,4(r16)
   481a0:	19c6703a 	and	r3,r3,r7
   481a4:	1c45c83a 	sub	r2,r3,r17
   481a8:	30bff90e 	bge	r6,r2,48190 <_malloc_r+0x150>
   481ac:	213fffc4 	addi	r4,r4,-1
   481b0:	21000044 	addi	r4,r4,1
   481b4:	9c000417 	ldw	r16,16(r19)
   481b8:	00c00174 	movhi	r3,5
   481bc:	18c17b04 	addi	r3,r3,1516
   481c0:	1a400204 	addi	r9,r3,8
   481c4:	82410926 	beq	r16,r9,485ec <_malloc_r+0x5ac>
   481c8:	81400117 	ldw	r5,4(r16)
   481cc:	00bfff04 	movi	r2,-4
   481d0:	018003c4 	movi	r6,15
   481d4:	2884703a 	and	r2,r5,r2
   481d8:	144bc83a 	sub	r5,r2,r17
   481dc:	3140f416 	blt	r6,r5,485b0 <_malloc_r+0x570>
   481e0:	1a400515 	stw	r9,20(r3)
   481e4:	1a400415 	stw	r9,16(r3)
   481e8:	2800570e 	bge	r5,zero,48348 <_malloc_r+0x308>
   481ec:	01407fc4 	movi	r5,511
   481f0:	2880d436 	bltu	r5,r2,48544 <_malloc_r+0x504>
   481f4:	1004d0fa 	srli	r2,r2,3
   481f8:	02000044 	movi	r8,1
   481fc:	19c00117 	ldw	r7,4(r3)
   48200:	108b883a 	add	r5,r2,r2
   48204:	294b883a 	add	r5,r5,r5
   48208:	1005d0ba 	srai	r2,r2,2
   4820c:	294b883a 	add	r5,r5,r5
   48210:	28cb883a 	add	r5,r5,r3
   48214:	29800217 	ldw	r6,8(r5)
   48218:	4084983a 	sll	r2,r8,r2
   4821c:	81400315 	stw	r5,12(r16)
   48220:	81800215 	stw	r6,8(r16)
   48224:	11c4b03a 	or	r2,r2,r7
   48228:	2c000215 	stw	r16,8(r5)
   4822c:	18800115 	stw	r2,4(r3)
   48230:	34000315 	stw	r16,12(r6)
   48234:	2007d0ba 	srai	r3,r4,2
   48238:	01400044 	movi	r5,1
   4823c:	28ca983a 	sll	r5,r5,r3
   48240:	11404936 	bltu	r2,r5,48368 <_malloc_r+0x328>
   48244:	1146703a 	and	r3,r2,r5
   48248:	18000a1e 	bne	r3,zero,48274 <_malloc_r+0x234>
   4824c:	00ffff04 	movi	r3,-4
   48250:	294b883a 	add	r5,r5,r5
   48254:	20c8703a 	and	r4,r4,r3
   48258:	1146703a 	and	r3,r2,r5
   4825c:	21000104 	addi	r4,r4,4
   48260:	1800041e 	bne	r3,zero,48274 <_malloc_r+0x234>
   48264:	294b883a 	add	r5,r5,r5
   48268:	1146703a 	and	r3,r2,r5
   4826c:	21000104 	addi	r4,r4,4
   48270:	183ffc26 	beq	r3,zero,48264 <_malloc_r+0x224>
   48274:	023fff04 	movi	r8,-4
   48278:	01c003c4 	movi	r7,15
   4827c:	2105883a 	add	r2,r4,r4
   48280:	1085883a 	add	r2,r2,r2
   48284:	1085883a 	add	r2,r2,r2
   48288:	9897883a 	add	r11,r19,r2
   4828c:	5a800304 	addi	r10,r11,12
   48290:	2019883a 	mov	r12,r4
   48294:	54000017 	ldw	r16,0(r10)
   48298:	51bffd04 	addi	r6,r10,-12
   4829c:	8180041e 	bne	r16,r6,482b0 <_malloc_r+0x270>
   482a0:	0000d406 	br	485f4 <_malloc_r+0x5b4>
   482a4:	1000dd0e 	bge	r2,zero,4861c <_malloc_r+0x5dc>
   482a8:	84000317 	ldw	r16,12(r16)
   482ac:	8180d126 	beq	r16,r6,485f4 <_malloc_r+0x5b4>
   482b0:	80c00117 	ldw	r3,4(r16)
   482b4:	1a06703a 	and	r3,r3,r8
   482b8:	1c45c83a 	sub	r2,r3,r17
   482bc:	38bff90e 	bge	r7,r2,482a4 <_malloc_r+0x264>
   482c0:	80c00317 	ldw	r3,12(r16)
   482c4:	81000217 	ldw	r4,8(r16)
   482c8:	89400054 	ori	r5,r17,1
   482cc:	81400115 	stw	r5,4(r16)
   482d0:	20c00315 	stw	r3,12(r4)
   482d4:	19000215 	stw	r4,8(r3)
   482d8:	8463883a 	add	r17,r16,r17
   482dc:	9c400515 	stw	r17,20(r19)
   482e0:	9c400415 	stw	r17,16(r19)
   482e4:	10c00054 	ori	r3,r2,1
   482e8:	8a400315 	stw	r9,12(r17)
   482ec:	8a400215 	stw	r9,8(r17)
   482f0:	88c00115 	stw	r3,4(r17)
   482f4:	88a3883a 	add	r17,r17,r2
   482f8:	88800015 	stw	r2,0(r17)
   482fc:	9009883a 	mov	r4,r18
   48300:	004d6600 	call	4d660 <__malloc_unlock>
   48304:	80800204 	addi	r2,r16,8
   48308:	003f7b06 	br	480f8 <_malloc_r+0xb8>
   4830c:	01401f84 	movi	r5,126
   48310:	01000fc4 	movi	r4,63
   48314:	003f9106 	br	4815c <_malloc_r+0x11c>
   48318:	80800317 	ldw	r2,12(r16)
   4831c:	81000217 	ldw	r4,8(r16)
   48320:	80c7883a 	add	r3,r16,r3
   48324:	19400117 	ldw	r5,4(r3)
   48328:	20800315 	stw	r2,12(r4)
   4832c:	11000215 	stw	r4,8(r2)
   48330:	28800054 	ori	r2,r5,1
   48334:	18800115 	stw	r2,4(r3)
   48338:	9009883a 	mov	r4,r18
   4833c:	004d6600 	call	4d660 <__malloc_unlock>
   48340:	80800204 	addi	r2,r16,8
   48344:	003f6c06 	br	480f8 <_malloc_r+0xb8>
   48348:	8085883a 	add	r2,r16,r2
   4834c:	10c00117 	ldw	r3,4(r2)
   48350:	9009883a 	mov	r4,r18
   48354:	18c00054 	ori	r3,r3,1
   48358:	10c00115 	stw	r3,4(r2)
   4835c:	004d6600 	call	4d660 <__malloc_unlock>
   48360:	80800204 	addi	r2,r16,8
   48364:	003f6406 	br	480f8 <_malloc_r+0xb8>
   48368:	9c000217 	ldw	r16,8(r19)
   4836c:	00bfff04 	movi	r2,-4
   48370:	85400117 	ldw	r21,4(r16)
   48374:	a8aa703a 	and	r21,r21,r2
   48378:	ac400336 	bltu	r21,r17,48388 <_malloc_r+0x348>
   4837c:	ac45c83a 	sub	r2,r21,r17
   48380:	00c003c4 	movi	r3,15
   48384:	18805d16 	blt	r3,r2,484fc <_malloc_r+0x4bc>
   48388:	00800174 	movhi	r2,5
   4838c:	10871404 	addi	r2,r2,7248
   48390:	00c00174 	movhi	r3,5
   48394:	18c70204 	addi	r3,r3,7176
   48398:	15c00017 	ldw	r23,0(r2)
   4839c:	19000017 	ldw	r4,0(r3)
   483a0:	00bfffc4 	movi	r2,-1
   483a4:	8579883a 	add	fp,r16,r21
   483a8:	8def883a 	add	r23,r17,r23
   483ac:	2080e426 	beq	r4,r2,48740 <_malloc_r+0x700>
   483b0:	bdc403c4 	addi	r23,r23,4111
   483b4:	00bc0004 	movi	r2,-4096
   483b8:	b8ae703a 	and	r23,r23,r2
   483bc:	9009883a 	mov	r4,r18
   483c0:	b80b883a 	mov	r5,r23
   483c4:	d8c00015 	stw	r3,0(sp)
   483c8:	004a1ec0 	call	4a1ec <_sbrk_r>
   483cc:	1029883a 	mov	r20,r2
   483d0:	00bfffc4 	movi	r2,-1
   483d4:	d8c00017 	ldw	r3,0(sp)
   483d8:	a080a426 	beq	r20,r2,4866c <_malloc_r+0x62c>
   483dc:	a700a236 	bltu	r20,fp,48668 <_malloc_r+0x628>
   483e0:	05800174 	movhi	r22,5
   483e4:	b5871e04 	addi	r22,r22,7288
   483e8:	b0800017 	ldw	r2,0(r22)
   483ec:	b885883a 	add	r2,r23,r2
   483f0:	b0800015 	stw	r2,0(r22)
   483f4:	e500da26 	beq	fp,r20,48760 <_malloc_r+0x720>
   483f8:	19000017 	ldw	r4,0(r3)
   483fc:	00ffffc4 	movi	r3,-1
   48400:	20c0e426 	beq	r4,r3,48794 <_malloc_r+0x754>
   48404:	a739c83a 	sub	fp,r20,fp
   48408:	1705883a 	add	r2,r2,fp
   4840c:	b0800015 	stw	r2,0(r22)
   48410:	a08001cc 	andi	r2,r20,7
   48414:	1000b526 	beq	r2,zero,486ec <_malloc_r+0x6ac>
   48418:	a0a9c83a 	sub	r20,r20,r2
   4841c:	00c40204 	movi	r3,4104
   48420:	a5000204 	addi	r20,r20,8
   48424:	1885c83a 	sub	r2,r3,r2
   48428:	a5c7883a 	add	r3,r20,r23
   4842c:	18c3ffcc 	andi	r3,r3,4095
   48430:	10efc83a 	sub	r23,r2,r3
   48434:	9009883a 	mov	r4,r18
   48438:	b80b883a 	mov	r5,r23
   4843c:	004a1ec0 	call	4a1ec <_sbrk_r>
   48440:	00ffffc4 	movi	r3,-1
   48444:	10c0d026 	beq	r2,r3,48788 <_malloc_r+0x748>
   48448:	1505c83a 	sub	r2,r2,r20
   4844c:	b887883a 	add	r3,r23,r2
   48450:	18c00054 	ori	r3,r3,1
   48454:	b0800017 	ldw	r2,0(r22)
   48458:	9d000215 	stw	r20,8(r19)
   4845c:	a0c00115 	stw	r3,4(r20)
   48460:	b885883a 	add	r2,r23,r2
   48464:	b0800015 	stw	r2,0(r22)
   48468:	84c00e26 	beq	r16,r19,484a4 <_malloc_r+0x464>
   4846c:	00c003c4 	movi	r3,15
   48470:	1d40a02e 	bgeu	r3,r21,486f4 <_malloc_r+0x6b4>
   48474:	81400117 	ldw	r5,4(r16)
   48478:	ad7ffd04 	addi	r21,r21,-12
   4847c:	013ffe04 	movi	r4,-8
   48480:	a908703a 	and	r4,r21,r4
   48484:	2940004c 	andi	r5,r5,1
   48488:	214ab03a 	or	r5,r4,r5
   4848c:	81400115 	stw	r5,4(r16)
   48490:	01800144 	movi	r6,5
   48494:	810b883a 	add	r5,r16,r4
   48498:	29800115 	stw	r6,4(r5)
   4849c:	29800215 	stw	r6,8(r5)
   484a0:	1900c036 	bltu	r3,r4,487a4 <_malloc_r+0x764>
   484a4:	00c00174 	movhi	r3,5
   484a8:	18c71304 	addi	r3,r3,7244
   484ac:	19000017 	ldw	r4,0(r3)
   484b0:	2080012e 	bgeu	r4,r2,484b8 <_malloc_r+0x478>
   484b4:	18800015 	stw	r2,0(r3)
   484b8:	00c00174 	movhi	r3,5
   484bc:	18c71204 	addi	r3,r3,7240
   484c0:	19000017 	ldw	r4,0(r3)
   484c4:	9c000217 	ldw	r16,8(r19)
   484c8:	2080012e 	bgeu	r4,r2,484d0 <_malloc_r+0x490>
   484cc:	18800015 	stw	r2,0(r3)
   484d0:	80c00117 	ldw	r3,4(r16)
   484d4:	00bfff04 	movi	r2,-4
   484d8:	1886703a 	and	r3,r3,r2
   484dc:	1c45c83a 	sub	r2,r3,r17
   484e0:	1c400236 	bltu	r3,r17,484ec <_malloc_r+0x4ac>
   484e4:	00c003c4 	movi	r3,15
   484e8:	18800416 	blt	r3,r2,484fc <_malloc_r+0x4bc>
   484ec:	9009883a 	mov	r4,r18
   484f0:	004d6600 	call	4d660 <__malloc_unlock>
   484f4:	0005883a 	mov	r2,zero
   484f8:	003eff06 	br	480f8 <_malloc_r+0xb8>
   484fc:	88c00054 	ori	r3,r17,1
   48500:	80c00115 	stw	r3,4(r16)
   48504:	8463883a 	add	r17,r16,r17
   48508:	10800054 	ori	r2,r2,1
   4850c:	9c400215 	stw	r17,8(r19)
   48510:	88800115 	stw	r2,4(r17)
   48514:	9009883a 	mov	r4,r18
   48518:	004d6600 	call	4d660 <__malloc_unlock>
   4851c:	80800204 	addi	r2,r16,8
   48520:	003ef506 	br	480f8 <_malloc_r+0xb8>
   48524:	00800504 	movi	r2,20
   48528:	1100482e 	bgeu	r2,r4,4864c <_malloc_r+0x60c>
   4852c:	00801504 	movi	r2,84
   48530:	11006836 	bltu	r2,r4,486d4 <_malloc_r+0x694>
   48534:	8808d33a 	srli	r4,r17,12
   48538:	21001b84 	addi	r4,r4,110
   4853c:	210b883a 	add	r5,r4,r4
   48540:	003f0606 	br	4815c <_malloc_r+0x11c>
   48544:	1006d27a 	srli	r3,r2,9
   48548:	01400104 	movi	r5,4
   4854c:	28c0422e 	bgeu	r5,r3,48658 <_malloc_r+0x618>
   48550:	01400504 	movi	r5,20
   48554:	28c07c36 	bltu	r5,r3,48748 <_malloc_r+0x708>
   48558:	194016c4 	addi	r5,r3,91
   4855c:	294d883a 	add	r6,r5,r5
   48560:	318d883a 	add	r6,r6,r6
   48564:	318d883a 	add	r6,r6,r6
   48568:	998d883a 	add	r6,r19,r6
   4856c:	30c00217 	ldw	r3,8(r6)
   48570:	01c00174 	movhi	r7,5
   48574:	39c17b04 	addi	r7,r7,1516
   48578:	19806326 	beq	r3,r6,48708 <_malloc_r+0x6c8>
   4857c:	01ffff04 	movi	r7,-4
   48580:	19400117 	ldw	r5,4(r3)
   48584:	29ca703a 	and	r5,r5,r7
   48588:	1140022e 	bgeu	r2,r5,48594 <_malloc_r+0x554>
   4858c:	18c00217 	ldw	r3,8(r3)
   48590:	30fffb1e 	bne	r6,r3,48580 <_malloc_r+0x540>
   48594:	19400317 	ldw	r5,12(r3)
   48598:	98800117 	ldw	r2,4(r19)
   4859c:	81400315 	stw	r5,12(r16)
   485a0:	80c00215 	stw	r3,8(r16)
   485a4:	2c000215 	stw	r16,8(r5)
   485a8:	1c000315 	stw	r16,12(r3)
   485ac:	003f2106 	br	48234 <_malloc_r+0x1f4>
   485b0:	88800054 	ori	r2,r17,1
   485b4:	80800115 	stw	r2,4(r16)
   485b8:	8463883a 	add	r17,r16,r17
   485bc:	1c400515 	stw	r17,20(r3)
   485c0:	1c400415 	stw	r17,16(r3)
   485c4:	28800054 	ori	r2,r5,1
   485c8:	88800115 	stw	r2,4(r17)
   485cc:	8a400315 	stw	r9,12(r17)
   485d0:	8a400215 	stw	r9,8(r17)
   485d4:	8963883a 	add	r17,r17,r5
   485d8:	89400015 	stw	r5,0(r17)
   485dc:	9009883a 	mov	r4,r18
   485e0:	004d6600 	call	4d660 <__malloc_unlock>
   485e4:	80800204 	addi	r2,r16,8
   485e8:	003ec306 	br	480f8 <_malloc_r+0xb8>
   485ec:	18800117 	ldw	r2,4(r3)
   485f0:	003f1006 	br	48234 <_malloc_r+0x1f4>
   485f4:	63000044 	addi	r12,r12,1
   485f8:	608000cc 	andi	r2,r12,3
   485fc:	52800204 	addi	r10,r10,8
   48600:	103f241e 	bne	r2,zero,48294 <_malloc_r+0x254>
   48604:	00002106 	br	4868c <_malloc_r+0x64c>
   48608:	80800204 	addi	r2,r16,8
   4860c:	84000517 	ldw	r16,20(r16)
   48610:	143eab1e 	bne	r2,r16,480c0 <_malloc_r+0x80>
   48614:	21000084 	addi	r4,r4,2
   48618:	003ee606 	br	481b4 <_malloc_r+0x174>
   4861c:	80c7883a 	add	r3,r16,r3
   48620:	19400117 	ldw	r5,4(r3)
   48624:	80800317 	ldw	r2,12(r16)
   48628:	81000217 	ldw	r4,8(r16)
   4862c:	29400054 	ori	r5,r5,1
   48630:	19400115 	stw	r5,4(r3)
   48634:	20800315 	stw	r2,12(r4)
   48638:	11000215 	stw	r4,8(r2)
   4863c:	9009883a 	mov	r4,r18
   48640:	004d6600 	call	4d660 <__malloc_unlock>
   48644:	80800204 	addi	r2,r16,8
   48648:	003eab06 	br	480f8 <_malloc_r+0xb8>
   4864c:	210016c4 	addi	r4,r4,91
   48650:	210b883a 	add	r5,r4,r4
   48654:	003ec106 	br	4815c <_malloc_r+0x11c>
   48658:	100ad1ba 	srli	r5,r2,6
   4865c:	29400e04 	addi	r5,r5,56
   48660:	294d883a 	add	r6,r5,r5
   48664:	003fbe06 	br	48560 <_malloc_r+0x520>
   48668:	84ff5d26 	beq	r16,r19,483e0 <_malloc_r+0x3a0>
   4866c:	9c000217 	ldw	r16,8(r19)
   48670:	00bfff04 	movi	r2,-4
   48674:	80c00117 	ldw	r3,4(r16)
   48678:	1886703a 	and	r3,r3,r2
   4867c:	003f9706 	br	484dc <_malloc_r+0x49c>
   48680:	5ac00017 	ldw	r11,0(r11)
   48684:	213fffc4 	addi	r4,r4,-1
   48688:	58805c1e 	bne	r11,r2,487fc <_malloc_r+0x7bc>
   4868c:	20c000cc 	andi	r3,r4,3
   48690:	58bffe04 	addi	r2,r11,-8
   48694:	183ffa1e 	bne	r3,zero,48680 <_malloc_r+0x640>
   48698:	98800117 	ldw	r2,4(r19)
   4869c:	0146303a 	nor	r3,zero,r5
   486a0:	1884703a 	and	r2,r3,r2
   486a4:	98800115 	stw	r2,4(r19)
   486a8:	294b883a 	add	r5,r5,r5
   486ac:	117f2e36 	bltu	r2,r5,48368 <_malloc_r+0x328>
   486b0:	283f2d26 	beq	r5,zero,48368 <_malloc_r+0x328>
   486b4:	1146703a 	and	r3,r2,r5
   486b8:	6009883a 	mov	r4,r12
   486bc:	183eef1e 	bne	r3,zero,4827c <_malloc_r+0x23c>
   486c0:	294b883a 	add	r5,r5,r5
   486c4:	1146703a 	and	r3,r2,r5
   486c8:	21000104 	addi	r4,r4,4
   486cc:	183ffc26 	beq	r3,zero,486c0 <_malloc_r+0x680>
   486d0:	003eea06 	br	4827c <_malloc_r+0x23c>
   486d4:	00805504 	movi	r2,340
   486d8:	11001336 	bltu	r2,r4,48728 <_malloc_r+0x6e8>
   486dc:	8808d3fa 	srli	r4,r17,15
   486e0:	21001dc4 	addi	r4,r4,119
   486e4:	210b883a 	add	r5,r4,r4
   486e8:	003e9c06 	br	4815c <_malloc_r+0x11c>
   486ec:	00840004 	movi	r2,4096
   486f0:	003f4d06 	br	48428 <_malloc_r+0x3e8>
   486f4:	00800044 	movi	r2,1
   486f8:	a0800115 	stw	r2,4(r20)
   486fc:	a021883a 	mov	r16,r20
   48700:	0007883a 	mov	r3,zero
   48704:	003f7506 	br	484dc <_malloc_r+0x49c>
   48708:	280bd0ba 	srai	r5,r5,2
   4870c:	01800044 	movi	r6,1
   48710:	38800117 	ldw	r2,4(r7)
   48714:	314c983a 	sll	r6,r6,r5
   48718:	180b883a 	mov	r5,r3
   4871c:	3084b03a 	or	r2,r6,r2
   48720:	38800115 	stw	r2,4(r7)
   48724:	003f9d06 	br	4859c <_malloc_r+0x55c>
   48728:	00815504 	movi	r2,1364
   4872c:	11001336 	bltu	r2,r4,4877c <_malloc_r+0x73c>
   48730:	8808d4ba 	srli	r4,r17,18
   48734:	21001f04 	addi	r4,r4,124
   48738:	210b883a 	add	r5,r4,r4
   4873c:	003e8706 	br	4815c <_malloc_r+0x11c>
   48740:	bdc00404 	addi	r23,r23,16
   48744:	003f1d06 	br	483bc <_malloc_r+0x37c>
   48748:	01401504 	movi	r5,84
   4874c:	28c01c36 	bltu	r5,r3,487c0 <_malloc_r+0x780>
   48750:	100ad33a 	srli	r5,r2,12
   48754:	29401b84 	addi	r5,r5,110
   48758:	294d883a 	add	r6,r5,r5
   4875c:	003f8006 	br	48560 <_malloc_r+0x520>
   48760:	e103ffcc 	andi	r4,fp,4095
   48764:	203f241e 	bne	r4,zero,483f8 <_malloc_r+0x3b8>
   48768:	98c00217 	ldw	r3,8(r19)
   4876c:	bd49883a 	add	r4,r23,r21
   48770:	21000054 	ori	r4,r4,1
   48774:	19000115 	stw	r4,4(r3)
   48778:	003f4a06 	br	484a4 <_malloc_r+0x464>
   4877c:	01403f04 	movi	r5,252
   48780:	01001f84 	movi	r4,126
   48784:	003e7506 	br	4815c <_malloc_r+0x11c>
   48788:	00c00044 	movi	r3,1
   4878c:	002f883a 	mov	r23,zero
   48790:	003f3006 	br	48454 <_malloc_r+0x414>
   48794:	00800174 	movhi	r2,5
   48798:	10870204 	addi	r2,r2,7176
   4879c:	15000015 	stw	r20,0(r2)
   487a0:	003f1b06 	br	48410 <_malloc_r+0x3d0>
   487a4:	9009883a 	mov	r4,r18
   487a8:	81400204 	addi	r5,r16,8
   487ac:	00474dc0 	call	474dc <_free_r>
   487b0:	00800174 	movhi	r2,5
   487b4:	10871e04 	addi	r2,r2,7288
   487b8:	10800017 	ldw	r2,0(r2)
   487bc:	003f3906 	br	484a4 <_malloc_r+0x464>
   487c0:	01405504 	movi	r5,340
   487c4:	28c00436 	bltu	r5,r3,487d8 <_malloc_r+0x798>
   487c8:	100ad3fa 	srli	r5,r2,15
   487cc:	29401dc4 	addi	r5,r5,119
   487d0:	294d883a 	add	r6,r5,r5
   487d4:	003f6206 	br	48560 <_malloc_r+0x520>
   487d8:	01415504 	movi	r5,1364
   487dc:	28c00436 	bltu	r5,r3,487f0 <_malloc_r+0x7b0>
   487e0:	100ad4ba 	srli	r5,r2,18
   487e4:	29401f04 	addi	r5,r5,124
   487e8:	294d883a 	add	r6,r5,r5
   487ec:	003f5c06 	br	48560 <_malloc_r+0x520>
   487f0:	01803f04 	movi	r6,252
   487f4:	01401f84 	movi	r5,126
   487f8:	003f5906 	br	48560 <_malloc_r+0x520>
   487fc:	98800117 	ldw	r2,4(r19)
   48800:	003fa906 	br	486a8 <_malloc_r+0x668>

00048804 <memchr>:
   48804:	208000cc 	andi	r2,r4,3
   48808:	2811883a 	mov	r8,r5
   4880c:	10003526 	beq	r2,zero,488e4 <memchr+0xe0>
   48810:	30bfffc4 	addi	r2,r6,-1
   48814:	30001b26 	beq	r6,zero,48884 <memchr+0x80>
   48818:	21800003 	ldbu	r6,0(r4)
   4881c:	28c03fcc 	andi	r3,r5,255
   48820:	30c01a26 	beq	r6,r3,4888c <memchr+0x88>
   48824:	180d883a 	mov	r6,r3
   48828:	00000406 	br	4883c <memchr+0x38>
   4882c:	10001526 	beq	r2,zero,48884 <memchr+0x80>
   48830:	20c00003 	ldbu	r3,0(r4)
   48834:	10bfffc4 	addi	r2,r2,-1
   48838:	19801426 	beq	r3,r6,4888c <memchr+0x88>
   4883c:	21000044 	addi	r4,r4,1
   48840:	20c000cc 	andi	r3,r4,3
   48844:	183ff91e 	bne	r3,zero,4882c <memchr+0x28>
   48848:	02c000c4 	movi	r11,3
   4884c:	58801136 	bltu	r11,r2,48894 <memchr+0x90>
   48850:	10000c26 	beq	r2,zero,48884 <memchr+0x80>
   48854:	20c00003 	ldbu	r3,0(r4)
   48858:	29403fcc 	andi	r5,r5,255
   4885c:	19400b26 	beq	r3,r5,4888c <memchr+0x88>
   48860:	20c00044 	addi	r3,r4,1
   48864:	2085883a 	add	r2,r4,r2
   48868:	41803fcc 	andi	r6,r8,255
   4886c:	00000306 	br	4887c <memchr+0x78>
   48870:	18c00044 	addi	r3,r3,1
   48874:	197fffc3 	ldbu	r5,-1(r3)
   48878:	29800426 	beq	r5,r6,4888c <memchr+0x88>
   4887c:	1809883a 	mov	r4,r3
   48880:	18bffb1e 	bne	r3,r2,48870 <memchr+0x6c>
   48884:	0005883a 	mov	r2,zero
   48888:	f800283a 	ret
   4888c:	2005883a 	mov	r2,r4
   48890:	f800283a 	ret
   48894:	28c03fcc 	andi	r3,r5,255
   48898:	180c923a 	slli	r6,r3,8
   4889c:	02bfbff4 	movhi	r10,65279
   488a0:	52bfbfc4 	addi	r10,r10,-257
   488a4:	02602074 	movhi	r9,32897
   488a8:	4a602004 	addi	r9,r9,-32640
   488ac:	30c6b03a 	or	r3,r6,r3
   488b0:	180c943a 	slli	r6,r3,16
   488b4:	30ccb03a 	or	r6,r6,r3
   488b8:	20c00017 	ldw	r3,0(r4)
   488bc:	30c6f03a 	xor	r3,r6,r3
   488c0:	1a8f883a 	add	r7,r3,r10
   488c4:	00c6303a 	nor	r3,zero,r3
   488c8:	38c6703a 	and	r3,r7,r3
   488cc:	1a46703a 	and	r3,r3,r9
   488d0:	183fdf1e 	bne	r3,zero,48850 <memchr+0x4c>
   488d4:	10bfff04 	addi	r2,r2,-4
   488d8:	21000104 	addi	r4,r4,4
   488dc:	58bff636 	bltu	r11,r2,488b8 <memchr+0xb4>
   488e0:	003fdb06 	br	48850 <memchr+0x4c>
   488e4:	3005883a 	mov	r2,r6
   488e8:	003fd706 	br	48848 <memchr+0x44>

000488ec <memmove>:
   488ec:	2005883a 	mov	r2,r4
   488f0:	29000b2e 	bgeu	r5,r4,48920 <memmove+0x34>
   488f4:	298f883a 	add	r7,r5,r6
   488f8:	21c0092e 	bgeu	r4,r7,48920 <memmove+0x34>
   488fc:	2187883a 	add	r3,r4,r6
   48900:	198bc83a 	sub	r5,r3,r6
   48904:	30003e26 	beq	r6,zero,48a00 <memmove+0x114>
   48908:	39ffffc4 	addi	r7,r7,-1
   4890c:	39000003 	ldbu	r4,0(r7)
   48910:	18ffffc4 	addi	r3,r3,-1
   48914:	19000005 	stb	r4,0(r3)
   48918:	197ffb1e 	bne	r3,r5,48908 <memmove+0x1c>
   4891c:	f800283a 	ret
   48920:	00c003c4 	movi	r3,15
   48924:	1980372e 	bgeu	r3,r6,48a04 <memmove+0x118>
   48928:	1146b03a 	or	r3,r2,r5
   4892c:	18c000cc 	andi	r3,r3,3
   48930:	1800371e 	bne	r3,zero,48a10 <memmove+0x124>
   48934:	327ffc04 	addi	r9,r6,-16
   48938:	4812d13a 	srli	r9,r9,4
   4893c:	280f883a 	mov	r7,r5
   48940:	1007883a 	mov	r3,r2
   48944:	4810913a 	slli	r8,r9,4
   48948:	1211883a 	add	r8,r2,r8
   4894c:	42000404 	addi	r8,r8,16
   48950:	39000017 	ldw	r4,0(r7)
   48954:	18c00404 	addi	r3,r3,16
   48958:	39c00404 	addi	r7,r7,16
   4895c:	193ffc15 	stw	r4,-16(r3)
   48960:	393ffd17 	ldw	r4,-12(r7)
   48964:	193ffd15 	stw	r4,-12(r3)
   48968:	393ffe17 	ldw	r4,-8(r7)
   4896c:	193ffe15 	stw	r4,-8(r3)
   48970:	393fff17 	ldw	r4,-4(r7)
   48974:	193fff15 	stw	r4,-4(r3)
   48978:	1a3ff51e 	bne	r3,r8,48950 <memmove+0x64>
   4897c:	49000044 	addi	r4,r9,1
   48980:	2008913a 	slli	r4,r4,4
   48984:	328003cc 	andi	r10,r6,15
   48988:	1107883a 	add	r3,r2,r4
   4898c:	290b883a 	add	r5,r5,r4
   48990:	010000c4 	movi	r4,3
   48994:	2280212e 	bgeu	r4,r10,48a1c <memmove+0x130>
   48998:	52bfff04 	addi	r10,r10,-4
   4899c:	5014d0ba 	srli	r10,r10,2
   489a0:	180f883a 	mov	r7,r3
   489a4:	2809883a 	mov	r4,r5
   489a8:	5291883a 	add	r8,r10,r10
   489ac:	4211883a 	add	r8,r8,r8
   489b0:	42400104 	addi	r9,r8,4
   489b4:	1a53883a 	add	r9,r3,r9
   489b8:	22000017 	ldw	r8,0(r4)
   489bc:	39c00104 	addi	r7,r7,4
   489c0:	21000104 	addi	r4,r4,4
   489c4:	3a3fff15 	stw	r8,-4(r7)
   489c8:	3a7ffb1e 	bne	r7,r9,489b8 <memmove+0xcc>
   489cc:	51000044 	addi	r4,r10,1
   489d0:	2109883a 	add	r4,r4,r4
   489d4:	2109883a 	add	r4,r4,r4
   489d8:	318000cc 	andi	r6,r6,3
   489dc:	1907883a 	add	r3,r3,r4
   489e0:	290b883a 	add	r5,r5,r4
   489e4:	30000c26 	beq	r6,zero,48a18 <memmove+0x12c>
   489e8:	198d883a 	add	r6,r3,r6
   489ec:	29c00003 	ldbu	r7,0(r5)
   489f0:	18c00044 	addi	r3,r3,1
   489f4:	29400044 	addi	r5,r5,1
   489f8:	19ffffc5 	stb	r7,-1(r3)
   489fc:	19bffb1e 	bne	r3,r6,489ec <memmove+0x100>
   48a00:	f800283a 	ret
   48a04:	1007883a 	mov	r3,r2
   48a08:	303ff71e 	bne	r6,zero,489e8 <memmove+0xfc>
   48a0c:	00000206 	br	48a18 <memmove+0x12c>
   48a10:	1007883a 	mov	r3,r2
   48a14:	003ff406 	br	489e8 <memmove+0xfc>
   48a18:	f800283a 	ret
   48a1c:	500d883a 	mov	r6,r10
   48a20:	303ff11e 	bne	r6,zero,489e8 <memmove+0xfc>
   48a24:	003ffc06 	br	48a18 <memmove+0x12c>

00048a28 <memset>:
   48a28:	20c000cc 	andi	r3,r4,3
   48a2c:	2005883a 	mov	r2,r4
   48a30:	18003f26 	beq	r3,zero,48b30 <memset+0x108>
   48a34:	31ffffc4 	addi	r7,r6,-1
   48a38:	30003b26 	beq	r6,zero,48b28 <memset+0x100>
   48a3c:	2813883a 	mov	r9,r5
   48a40:	200d883a 	mov	r6,r4
   48a44:	2007883a 	mov	r3,r4
   48a48:	00000406 	br	48a5c <memset+0x34>
   48a4c:	3a3fffc4 	addi	r8,r7,-1
   48a50:	31800044 	addi	r6,r6,1
   48a54:	38003426 	beq	r7,zero,48b28 <memset+0x100>
   48a58:	400f883a 	mov	r7,r8
   48a5c:	18c00044 	addi	r3,r3,1
   48a60:	32400005 	stb	r9,0(r6)
   48a64:	1a0000cc 	andi	r8,r3,3
   48a68:	403ff81e 	bne	r8,zero,48a4c <memset+0x24>
   48a6c:	010000c4 	movi	r4,3
   48a70:	21c0282e 	bgeu	r4,r7,48b14 <memset+0xec>
   48a74:	29003fcc 	andi	r4,r5,255
   48a78:	2010923a 	slli	r8,r4,8
   48a7c:	4108b03a 	or	r4,r8,r4
   48a80:	2010943a 	slli	r8,r4,16
   48a84:	4110b03a 	or	r8,r8,r4
   48a88:	010003c4 	movi	r4,15
   48a8c:	21c0122e 	bgeu	r4,r7,48ad8 <memset+0xb0>
   48a90:	3a7ffc04 	addi	r9,r7,-16
   48a94:	4812d13a 	srli	r9,r9,4
   48a98:	19000404 	addi	r4,r3,16
   48a9c:	180d883a 	mov	r6,r3
   48aa0:	4814913a 	slli	r10,r9,4
   48aa4:	2289883a 	add	r4,r4,r10
   48aa8:	32000015 	stw	r8,0(r6)
   48aac:	32000115 	stw	r8,4(r6)
   48ab0:	32000215 	stw	r8,8(r6)
   48ab4:	32000315 	stw	r8,12(r6)
   48ab8:	31800404 	addi	r6,r6,16
   48abc:	313ffa1e 	bne	r6,r4,48aa8 <memset+0x80>
   48ac0:	4a400044 	addi	r9,r9,1
   48ac4:	4812913a 	slli	r9,r9,4
   48ac8:	39c003cc 	andi	r7,r7,15
   48acc:	010000c4 	movi	r4,3
   48ad0:	1a47883a 	add	r3,r3,r9
   48ad4:	21c00f2e 	bgeu	r4,r7,48b14 <memset+0xec>
   48ad8:	3a7fff04 	addi	r9,r7,-4
   48adc:	4812d0ba 	srli	r9,r9,2
   48ae0:	19000104 	addi	r4,r3,4
   48ae4:	180d883a 	mov	r6,r3
   48ae8:	4a55883a 	add	r10,r9,r9
   48aec:	5295883a 	add	r10,r10,r10
   48af0:	2289883a 	add	r4,r4,r10
   48af4:	32000015 	stw	r8,0(r6)
   48af8:	31800104 	addi	r6,r6,4
   48afc:	313ffd1e 	bne	r6,r4,48af4 <memset+0xcc>
   48b00:	4a400044 	addi	r9,r9,1
   48b04:	4a53883a 	add	r9,r9,r9
   48b08:	4a53883a 	add	r9,r9,r9
   48b0c:	1a47883a 	add	r3,r3,r9
   48b10:	39c000cc 	andi	r7,r7,3
   48b14:	38000526 	beq	r7,zero,48b2c <memset+0x104>
   48b18:	19cf883a 	add	r7,r3,r7
   48b1c:	19400005 	stb	r5,0(r3)
   48b20:	18c00044 	addi	r3,r3,1
   48b24:	19fffd1e 	bne	r3,r7,48b1c <memset+0xf4>
   48b28:	f800283a 	ret
   48b2c:	f800283a 	ret
   48b30:	2007883a 	mov	r3,r4
   48b34:	300f883a 	mov	r7,r6
   48b38:	003fcc06 	br	48a6c <memset+0x44>

00048b3c <_Balloc>:
   48b3c:	20801317 	ldw	r2,76(r4)
   48b40:	defffc04 	addi	sp,sp,-16
   48b44:	dc400115 	stw	r17,4(sp)
   48b48:	dc000015 	stw	r16,0(sp)
   48b4c:	dfc00315 	stw	ra,12(sp)
   48b50:	dc800215 	stw	r18,8(sp)
   48b54:	2023883a 	mov	r17,r4
   48b58:	2821883a 	mov	r16,r5
   48b5c:	10000f26 	beq	r2,zero,48b9c <_Balloc+0x60>
   48b60:	8407883a 	add	r3,r16,r16
   48b64:	18c7883a 	add	r3,r3,r3
   48b68:	10c7883a 	add	r3,r2,r3
   48b6c:	18800017 	ldw	r2,0(r3)
   48b70:	10001126 	beq	r2,zero,48bb8 <_Balloc+0x7c>
   48b74:	11000017 	ldw	r4,0(r2)
   48b78:	19000015 	stw	r4,0(r3)
   48b7c:	10000415 	stw	zero,16(r2)
   48b80:	10000315 	stw	zero,12(r2)
   48b84:	dfc00317 	ldw	ra,12(sp)
   48b88:	dc800217 	ldw	r18,8(sp)
   48b8c:	dc400117 	ldw	r17,4(sp)
   48b90:	dc000017 	ldw	r16,0(sp)
   48b94:	dec00404 	addi	sp,sp,16
   48b98:	f800283a 	ret
   48b9c:	01400104 	movi	r5,4
   48ba0:	01800844 	movi	r6,33
   48ba4:	004ba440 	call	4ba44 <_calloc_r>
   48ba8:	88801315 	stw	r2,76(r17)
   48bac:	103fec1e 	bne	r2,zero,48b60 <_Balloc+0x24>
   48bb0:	0005883a 	mov	r2,zero
   48bb4:	003ff306 	br	48b84 <_Balloc+0x48>
   48bb8:	01400044 	movi	r5,1
   48bbc:	2c24983a 	sll	r18,r5,r16
   48bc0:	8809883a 	mov	r4,r17
   48bc4:	91800144 	addi	r6,r18,5
   48bc8:	318d883a 	add	r6,r6,r6
   48bcc:	318d883a 	add	r6,r6,r6
   48bd0:	004ba440 	call	4ba44 <_calloc_r>
   48bd4:	103ff626 	beq	r2,zero,48bb0 <_Balloc+0x74>
   48bd8:	14000115 	stw	r16,4(r2)
   48bdc:	14800215 	stw	r18,8(r2)
   48be0:	003fe606 	br	48b7c <_Balloc+0x40>

00048be4 <_Bfree>:
   48be4:	28000826 	beq	r5,zero,48c08 <_Bfree+0x24>
   48be8:	28c00117 	ldw	r3,4(r5)
   48bec:	20801317 	ldw	r2,76(r4)
   48bf0:	18c7883a 	add	r3,r3,r3
   48bf4:	18c7883a 	add	r3,r3,r3
   48bf8:	10c5883a 	add	r2,r2,r3
   48bfc:	10c00017 	ldw	r3,0(r2)
   48c00:	28c00015 	stw	r3,0(r5)
   48c04:	11400015 	stw	r5,0(r2)
   48c08:	f800283a 	ret

00048c0c <__multadd>:
   48c0c:	defffa04 	addi	sp,sp,-24
   48c10:	dc000115 	stw	r16,4(sp)
   48c14:	2c000417 	ldw	r16,16(r5)
   48c18:	dc800315 	stw	r18,12(sp)
   48c1c:	dc400215 	stw	r17,8(sp)
   48c20:	dfc00515 	stw	ra,20(sp)
   48c24:	dcc00415 	stw	r19,16(sp)
   48c28:	2823883a 	mov	r17,r5
   48c2c:	2025883a 	mov	r18,r4
   48c30:	28c00504 	addi	r3,r5,20
   48c34:	0011883a 	mov	r8,zero
   48c38:	1a800017 	ldw	r10,0(r3)
   48c3c:	18c00104 	addi	r3,r3,4
   48c40:	42000044 	addi	r8,r8,1
   48c44:	527fffcc 	andi	r9,r10,65535
   48c48:	4993383a 	mul	r9,r9,r6
   48c4c:	5014d43a 	srli	r10,r10,16
   48c50:	49d3883a 	add	r9,r9,r7
   48c54:	480ed43a 	srli	r7,r9,16
   48c58:	5195383a 	mul	r10,r10,r6
   48c5c:	4a7fffcc 	andi	r9,r9,65535
   48c60:	3a8f883a 	add	r7,r7,r10
   48c64:	3814943a 	slli	r10,r7,16
   48c68:	380ed43a 	srli	r7,r7,16
   48c6c:	5253883a 	add	r9,r10,r9
   48c70:	1a7fff15 	stw	r9,-4(r3)
   48c74:	443ff016 	blt	r8,r16,48c38 <__multadd+0x2c>
   48c78:	38000926 	beq	r7,zero,48ca0 <__multadd+0x94>
   48c7c:	88800217 	ldw	r2,8(r17)
   48c80:	80800f0e 	bge	r16,r2,48cc0 <__multadd+0xb4>
   48c84:	80800144 	addi	r2,r16,5
   48c88:	1085883a 	add	r2,r2,r2
   48c8c:	1085883a 	add	r2,r2,r2
   48c90:	8885883a 	add	r2,r17,r2
   48c94:	11c00015 	stw	r7,0(r2)
   48c98:	84000044 	addi	r16,r16,1
   48c9c:	8c000415 	stw	r16,16(r17)
   48ca0:	8805883a 	mov	r2,r17
   48ca4:	dfc00517 	ldw	ra,20(sp)
   48ca8:	dcc00417 	ldw	r19,16(sp)
   48cac:	dc800317 	ldw	r18,12(sp)
   48cb0:	dc400217 	ldw	r17,8(sp)
   48cb4:	dc000117 	ldw	r16,4(sp)
   48cb8:	dec00604 	addi	sp,sp,24
   48cbc:	f800283a 	ret
   48cc0:	89400117 	ldw	r5,4(r17)
   48cc4:	9009883a 	mov	r4,r18
   48cc8:	d9c00015 	stw	r7,0(sp)
   48ccc:	29400044 	addi	r5,r5,1
   48cd0:	0048b3c0 	call	48b3c <_Balloc>
   48cd4:	89800417 	ldw	r6,16(r17)
   48cd8:	89400304 	addi	r5,r17,12
   48cdc:	11000304 	addi	r4,r2,12
   48ce0:	31800084 	addi	r6,r6,2
   48ce4:	318d883a 	add	r6,r6,r6
   48ce8:	318d883a 	add	r6,r6,r6
   48cec:	1027883a 	mov	r19,r2
   48cf0:	00431340 	call	43134 <memcpy>
   48cf4:	88c00117 	ldw	r3,4(r17)
   48cf8:	90801317 	ldw	r2,76(r18)
   48cfc:	d9c00017 	ldw	r7,0(sp)
   48d00:	18c7883a 	add	r3,r3,r3
   48d04:	18c7883a 	add	r3,r3,r3
   48d08:	10c5883a 	add	r2,r2,r3
   48d0c:	10c00017 	ldw	r3,0(r2)
   48d10:	88c00015 	stw	r3,0(r17)
   48d14:	14400015 	stw	r17,0(r2)
   48d18:	9823883a 	mov	r17,r19
   48d1c:	003fd906 	br	48c84 <__multadd+0x78>

00048d20 <__s2b>:
   48d20:	defff904 	addi	sp,sp,-28
   48d24:	dd000415 	stw	r20,16(sp)
   48d28:	dc400115 	stw	r17,4(sp)
   48d2c:	2829883a 	mov	r20,r5
   48d30:	2023883a 	mov	r17,r4
   48d34:	01400244 	movi	r5,9
   48d38:	39000204 	addi	r4,r7,8
   48d3c:	dcc00315 	stw	r19,12(sp)
   48d40:	dc800215 	stw	r18,8(sp)
   48d44:	dfc00615 	stw	ra,24(sp)
   48d48:	dd400515 	stw	r21,20(sp)
   48d4c:	dc000015 	stw	r16,0(sp)
   48d50:	3827883a 	mov	r19,r7
   48d54:	3025883a 	mov	r18,r6
   48d58:	0040f200 	call	40f20 <__divsi3>
   48d5c:	00c00044 	movi	r3,1
   48d60:	000b883a 	mov	r5,zero
   48d64:	1880030e 	bge	r3,r2,48d74 <__s2b+0x54>
   48d68:	18c7883a 	add	r3,r3,r3
   48d6c:	29400044 	addi	r5,r5,1
   48d70:	18bffd16 	blt	r3,r2,48d68 <__s2b+0x48>
   48d74:	8809883a 	mov	r4,r17
   48d78:	0048b3c0 	call	48b3c <_Balloc>
   48d7c:	d8c00717 	ldw	r3,28(sp)
   48d80:	10c00515 	stw	r3,20(r2)
   48d84:	00c00044 	movi	r3,1
   48d88:	10c00415 	stw	r3,16(r2)
   48d8c:	00c00244 	movi	r3,9
   48d90:	1c80210e 	bge	r3,r18,48e18 <__s2b+0xf8>
   48d94:	a0eb883a 	add	r21,r20,r3
   48d98:	a821883a 	mov	r16,r21
   48d9c:	a4a9883a 	add	r20,r20,r18
   48da0:	81c00007 	ldb	r7,0(r16)
   48da4:	8809883a 	mov	r4,r17
   48da8:	84000044 	addi	r16,r16,1
   48dac:	100b883a 	mov	r5,r2
   48db0:	01800284 	movi	r6,10
   48db4:	39fff404 	addi	r7,r7,-48
   48db8:	0048c0c0 	call	48c0c <__multadd>
   48dbc:	853ff81e 	bne	r16,r20,48da0 <__s2b+0x80>
   48dc0:	aca1883a 	add	r16,r21,r18
   48dc4:	843ffe04 	addi	r16,r16,-8
   48dc8:	94c00a0e 	bge	r18,r19,48df4 <__s2b+0xd4>
   48dcc:	84e7883a 	add	r19,r16,r19
   48dd0:	9ca5c83a 	sub	r18,r19,r18
   48dd4:	81c00007 	ldb	r7,0(r16)
   48dd8:	8809883a 	mov	r4,r17
   48ddc:	84000044 	addi	r16,r16,1
   48de0:	100b883a 	mov	r5,r2
   48de4:	01800284 	movi	r6,10
   48de8:	39fff404 	addi	r7,r7,-48
   48dec:	0048c0c0 	call	48c0c <__multadd>
   48df0:	84bff81e 	bne	r16,r18,48dd4 <__s2b+0xb4>
   48df4:	dfc00617 	ldw	ra,24(sp)
   48df8:	dd400517 	ldw	r21,20(sp)
   48dfc:	dd000417 	ldw	r20,16(sp)
   48e00:	dcc00317 	ldw	r19,12(sp)
   48e04:	dc800217 	ldw	r18,8(sp)
   48e08:	dc400117 	ldw	r17,4(sp)
   48e0c:	dc000017 	ldw	r16,0(sp)
   48e10:	dec00704 	addi	sp,sp,28
   48e14:	f800283a 	ret
   48e18:	a4000284 	addi	r16,r20,10
   48e1c:	1825883a 	mov	r18,r3
   48e20:	003fe906 	br	48dc8 <__s2b+0xa8>

00048e24 <__hi0bits>:
   48e24:	20bfffec 	andhi	r2,r4,65535
   48e28:	1000141e 	bne	r2,zero,48e7c <__hi0bits+0x58>
   48e2c:	2008943a 	slli	r4,r4,16
   48e30:	00800404 	movi	r2,16
   48e34:	20ffc02c 	andhi	r3,r4,65280
   48e38:	1800021e 	bne	r3,zero,48e44 <__hi0bits+0x20>
   48e3c:	2008923a 	slli	r4,r4,8
   48e40:	10800204 	addi	r2,r2,8
   48e44:	20fc002c 	andhi	r3,r4,61440
   48e48:	1800021e 	bne	r3,zero,48e54 <__hi0bits+0x30>
   48e4c:	2008913a 	slli	r4,r4,4
   48e50:	10800104 	addi	r2,r2,4
   48e54:	20f0002c 	andhi	r3,r4,49152
   48e58:	1800031e 	bne	r3,zero,48e68 <__hi0bits+0x44>
   48e5c:	2109883a 	add	r4,r4,r4
   48e60:	10800084 	addi	r2,r2,2
   48e64:	2109883a 	add	r4,r4,r4
   48e68:	20000316 	blt	r4,zero,48e78 <__hi0bits+0x54>
   48e6c:	2110002c 	andhi	r4,r4,16384
   48e70:	2000041e 	bne	r4,zero,48e84 <__hi0bits+0x60>
   48e74:	00800804 	movi	r2,32
   48e78:	f800283a 	ret
   48e7c:	0005883a 	mov	r2,zero
   48e80:	003fec06 	br	48e34 <__hi0bits+0x10>
   48e84:	10800044 	addi	r2,r2,1
   48e88:	f800283a 	ret

00048e8c <__lo0bits>:
   48e8c:	20c00017 	ldw	r3,0(r4)
   48e90:	188001cc 	andi	r2,r3,7
   48e94:	10000826 	beq	r2,zero,48eb8 <__lo0bits+0x2c>
   48e98:	1880004c 	andi	r2,r3,1
   48e9c:	1000211e 	bne	r2,zero,48f24 <__lo0bits+0x98>
   48ea0:	1880008c 	andi	r2,r3,2
   48ea4:	1000211e 	bne	r2,zero,48f2c <__lo0bits+0xa0>
   48ea8:	1806d0ba 	srli	r3,r3,2
   48eac:	00800084 	movi	r2,2
   48eb0:	20c00015 	stw	r3,0(r4)
   48eb4:	f800283a 	ret
   48eb8:	18bfffcc 	andi	r2,r3,65535
   48ebc:	10001326 	beq	r2,zero,48f0c <__lo0bits+0x80>
   48ec0:	0005883a 	mov	r2,zero
   48ec4:	19403fcc 	andi	r5,r3,255
   48ec8:	2800021e 	bne	r5,zero,48ed4 <__lo0bits+0x48>
   48ecc:	1806d23a 	srli	r3,r3,8
   48ed0:	10800204 	addi	r2,r2,8
   48ed4:	194003cc 	andi	r5,r3,15
   48ed8:	2800021e 	bne	r5,zero,48ee4 <__lo0bits+0x58>
   48edc:	1806d13a 	srli	r3,r3,4
   48ee0:	10800104 	addi	r2,r2,4
   48ee4:	194000cc 	andi	r5,r3,3
   48ee8:	2800021e 	bne	r5,zero,48ef4 <__lo0bits+0x68>
   48eec:	1806d0ba 	srli	r3,r3,2
   48ef0:	10800084 	addi	r2,r2,2
   48ef4:	1940004c 	andi	r5,r3,1
   48ef8:	2800081e 	bne	r5,zero,48f1c <__lo0bits+0x90>
   48efc:	1806d07a 	srli	r3,r3,1
   48f00:	1800051e 	bne	r3,zero,48f18 <__lo0bits+0x8c>
   48f04:	00800804 	movi	r2,32
   48f08:	f800283a 	ret
   48f0c:	1806d43a 	srli	r3,r3,16
   48f10:	00800404 	movi	r2,16
   48f14:	003feb06 	br	48ec4 <__lo0bits+0x38>
   48f18:	10800044 	addi	r2,r2,1
   48f1c:	20c00015 	stw	r3,0(r4)
   48f20:	f800283a 	ret
   48f24:	0005883a 	mov	r2,zero
   48f28:	f800283a 	ret
   48f2c:	1806d07a 	srli	r3,r3,1
   48f30:	00800044 	movi	r2,1
   48f34:	20c00015 	stw	r3,0(r4)
   48f38:	f800283a 	ret

00048f3c <__i2b>:
   48f3c:	defffd04 	addi	sp,sp,-12
   48f40:	dc000015 	stw	r16,0(sp)
   48f44:	04000044 	movi	r16,1
   48f48:	dc400115 	stw	r17,4(sp)
   48f4c:	2823883a 	mov	r17,r5
   48f50:	800b883a 	mov	r5,r16
   48f54:	dfc00215 	stw	ra,8(sp)
   48f58:	0048b3c0 	call	48b3c <_Balloc>
   48f5c:	14400515 	stw	r17,20(r2)
   48f60:	14000415 	stw	r16,16(r2)
   48f64:	dfc00217 	ldw	ra,8(sp)
   48f68:	dc400117 	ldw	r17,4(sp)
   48f6c:	dc000017 	ldw	r16,0(sp)
   48f70:	dec00304 	addi	sp,sp,12
   48f74:	f800283a 	ret

00048f78 <__multiply>:
   48f78:	defffa04 	addi	sp,sp,-24
   48f7c:	dcc00315 	stw	r19,12(sp)
   48f80:	dc800215 	stw	r18,8(sp)
   48f84:	34c00417 	ldw	r19,16(r6)
   48f88:	2c800417 	ldw	r18,16(r5)
   48f8c:	dd000415 	stw	r20,16(sp)
   48f90:	dc400115 	stw	r17,4(sp)
   48f94:	dfc00515 	stw	ra,20(sp)
   48f98:	dc000015 	stw	r16,0(sp)
   48f9c:	2823883a 	mov	r17,r5
   48fa0:	3029883a 	mov	r20,r6
   48fa4:	94c0050e 	bge	r18,r19,48fbc <__multiply+0x44>
   48fa8:	9007883a 	mov	r3,r18
   48fac:	3023883a 	mov	r17,r6
   48fb0:	9825883a 	mov	r18,r19
   48fb4:	2829883a 	mov	r20,r5
   48fb8:	1827883a 	mov	r19,r3
   48fbc:	88800217 	ldw	r2,8(r17)
   48fc0:	94e1883a 	add	r16,r18,r19
   48fc4:	89400117 	ldw	r5,4(r17)
   48fc8:	1400010e 	bge	r2,r16,48fd0 <__multiply+0x58>
   48fcc:	29400044 	addi	r5,r5,1
   48fd0:	0048b3c0 	call	48b3c <_Balloc>
   48fd4:	841b883a 	add	r13,r16,r16
   48fd8:	13000504 	addi	r12,r2,20
   48fdc:	6b5b883a 	add	r13,r13,r13
   48fe0:	635b883a 	add	r13,r12,r13
   48fe4:	6007883a 	mov	r3,r12
   48fe8:	6340032e 	bgeu	r12,r13,48ff8 <__multiply+0x80>
   48fec:	18000015 	stw	zero,0(r3)
   48ff0:	18c00104 	addi	r3,r3,4
   48ff4:	1b7ffd36 	bltu	r3,r13,48fec <__multiply+0x74>
   48ff8:	9ce7883a 	add	r19,r19,r19
   48ffc:	94a5883a 	add	r18,r18,r18
   49000:	a2c00504 	addi	r11,r20,20
   49004:	9ce7883a 	add	r19,r19,r19
   49008:	8bc00504 	addi	r15,r17,20
   4900c:	94a5883a 	add	r18,r18,r18
   49010:	5cdd883a 	add	r14,r11,r19
   49014:	7c95883a 	add	r10,r15,r18
   49018:	5b803f2e 	bgeu	r11,r14,49118 <__multiply+0x1a0>
   4901c:	5a000017 	ldw	r8,0(r11)
   49020:	427fffcc 	andi	r9,r8,65535
   49024:	48001b26 	beq	r9,zero,49094 <__multiply+0x11c>
   49028:	6007883a 	mov	r3,r12
   4902c:	7809883a 	mov	r4,r15
   49030:	000b883a 	mov	r5,zero
   49034:	22000017 	ldw	r8,0(r4)
   49038:	19c00017 	ldw	r7,0(r3)
   4903c:	21000104 	addi	r4,r4,4
   49040:	41bfffcc 	andi	r6,r8,65535
   49044:	324d383a 	mul	r6,r6,r9
   49048:	4010d43a 	srli	r8,r8,16
   4904c:	3fffffcc 	andi	ra,r7,65535
   49050:	f98d883a 	add	r6,ra,r6
   49054:	314d883a 	add	r6,r6,r5
   49058:	380ed43a 	srli	r7,r7,16
   4905c:	4251383a 	mul	r8,r8,r9
   49060:	303ed43a 	srli	ra,r6,16
   49064:	31bfffcc 	andi	r6,r6,65535
   49068:	3a0b883a 	add	r5,r7,r8
   4906c:	2fcb883a 	add	r5,r5,ra
   49070:	280e943a 	slli	r7,r5,16
   49074:	1811883a 	mov	r8,r3
   49078:	280ad43a 	srli	r5,r5,16
   4907c:	398cb03a 	or	r6,r7,r6
   49080:	19800015 	stw	r6,0(r3)
   49084:	18c00104 	addi	r3,r3,4
   49088:	22bfea36 	bltu	r4,r10,49034 <__multiply+0xbc>
   4908c:	41400115 	stw	r5,4(r8)
   49090:	5a000017 	ldw	r8,0(r11)
   49094:	4010d43a 	srli	r8,r8,16
   49098:	40001c26 	beq	r8,zero,4910c <__multiply+0x194>
   4909c:	61400017 	ldw	r5,0(r12)
   490a0:	7809883a 	mov	r4,r15
   490a4:	6007883a 	mov	r3,r12
   490a8:	280d883a 	mov	r6,r5
   490ac:	0013883a 	mov	r9,zero
   490b0:	21c0000b 	ldhu	r7,0(r4)
   490b4:	303ed43a 	srli	ra,r6,16
   490b8:	297fffcc 	andi	r5,r5,65535
   490bc:	3a0f383a 	mul	r7,r7,r8
   490c0:	21000104 	addi	r4,r4,4
   490c4:	19800117 	ldw	r6,4(r3)
   490c8:	3fcf883a 	add	r7,r7,ra
   490cc:	3a4f883a 	add	r7,r7,r9
   490d0:	383e943a 	slli	ra,r7,16
   490d4:	380ed43a 	srli	r7,r7,16
   490d8:	327fffcc 	andi	r9,r6,65535
   490dc:	f94ab03a 	or	r5,ra,r5
   490e0:	19400015 	stw	r5,0(r3)
   490e4:	217fff17 	ldw	r5,-4(r4)
   490e8:	183f883a 	mov	ra,r3
   490ec:	18c00104 	addi	r3,r3,4
   490f0:	280ad43a 	srli	r5,r5,16
   490f4:	2a0b383a 	mul	r5,r5,r8
   490f8:	2a4b883a 	add	r5,r5,r9
   490fc:	29cb883a 	add	r5,r5,r7
   49100:	2812d43a 	srli	r9,r5,16
   49104:	22bfea36 	bltu	r4,r10,490b0 <__multiply+0x138>
   49108:	f9400115 	stw	r5,4(ra)
   4910c:	5ac00104 	addi	r11,r11,4
   49110:	63000104 	addi	r12,r12,4
   49114:	5bbfc136 	bltu	r11,r14,4901c <__multiply+0xa4>
   49118:	0400090e 	bge	zero,r16,49140 <__multiply+0x1c8>
   4911c:	68ffff17 	ldw	r3,-4(r13)
   49120:	6b7fff04 	addi	r13,r13,-4
   49124:	18000326 	beq	r3,zero,49134 <__multiply+0x1bc>
   49128:	00000506 	br	49140 <__multiply+0x1c8>
   4912c:	68c00017 	ldw	r3,0(r13)
   49130:	1800031e 	bne	r3,zero,49140 <__multiply+0x1c8>
   49134:	843fffc4 	addi	r16,r16,-1
   49138:	6b7fff04 	addi	r13,r13,-4
   4913c:	803ffb1e 	bne	r16,zero,4912c <__multiply+0x1b4>
   49140:	14000415 	stw	r16,16(r2)
   49144:	dfc00517 	ldw	ra,20(sp)
   49148:	dd000417 	ldw	r20,16(sp)
   4914c:	dcc00317 	ldw	r19,12(sp)
   49150:	dc800217 	ldw	r18,8(sp)
   49154:	dc400117 	ldw	r17,4(sp)
   49158:	dc000017 	ldw	r16,0(sp)
   4915c:	dec00604 	addi	sp,sp,24
   49160:	f800283a 	ret

00049164 <__pow5mult>:
   49164:	defffa04 	addi	sp,sp,-24
   49168:	dcc00315 	stw	r19,12(sp)
   4916c:	dc800215 	stw	r18,8(sp)
   49170:	dc000015 	stw	r16,0(sp)
   49174:	dfc00515 	stw	ra,20(sp)
   49178:	dd000415 	stw	r20,16(sp)
   4917c:	dc400115 	stw	r17,4(sp)
   49180:	308000cc 	andi	r2,r6,3
   49184:	3021883a 	mov	r16,r6
   49188:	2027883a 	mov	r19,r4
   4918c:	2825883a 	mov	r18,r5
   49190:	1000301e 	bne	r2,zero,49254 <__pow5mult+0xf0>
   49194:	8021d0ba 	srai	r16,r16,2
   49198:	80001b26 	beq	r16,zero,49208 <__pow5mult+0xa4>
   4919c:	9c401217 	ldw	r17,72(r19)
   491a0:	88003726 	beq	r17,zero,49280 <__pow5mult+0x11c>
   491a4:	80c0004c 	andi	r3,r16,1
   491a8:	1800071e 	bne	r3,zero,491c8 <__pow5mult+0x64>
   491ac:	8021d07a 	srai	r16,r16,1
   491b0:	80001526 	beq	r16,zero,49208 <__pow5mult+0xa4>
   491b4:	88800017 	ldw	r2,0(r17)
   491b8:	10001c26 	beq	r2,zero,4922c <__pow5mult+0xc8>
   491bc:	1023883a 	mov	r17,r2
   491c0:	80c0004c 	andi	r3,r16,1
   491c4:	183ff926 	beq	r3,zero,491ac <__pow5mult+0x48>
   491c8:	900b883a 	mov	r5,r18
   491cc:	880d883a 	mov	r6,r17
   491d0:	9809883a 	mov	r4,r19
   491d4:	0048f780 	call	48f78 <__multiply>
   491d8:	90001c26 	beq	r18,zero,4924c <__pow5mult+0xe8>
   491dc:	91000117 	ldw	r4,4(r18)
   491e0:	98c01317 	ldw	r3,76(r19)
   491e4:	8021d07a 	srai	r16,r16,1
   491e8:	2109883a 	add	r4,r4,r4
   491ec:	2109883a 	add	r4,r4,r4
   491f0:	1907883a 	add	r3,r3,r4
   491f4:	19000017 	ldw	r4,0(r3)
   491f8:	91000015 	stw	r4,0(r18)
   491fc:	1c800015 	stw	r18,0(r3)
   49200:	1025883a 	mov	r18,r2
   49204:	803feb1e 	bne	r16,zero,491b4 <__pow5mult+0x50>
   49208:	9005883a 	mov	r2,r18
   4920c:	dfc00517 	ldw	ra,20(sp)
   49210:	dd000417 	ldw	r20,16(sp)
   49214:	dcc00317 	ldw	r19,12(sp)
   49218:	dc800217 	ldw	r18,8(sp)
   4921c:	dc400117 	ldw	r17,4(sp)
   49220:	dc000017 	ldw	r16,0(sp)
   49224:	dec00604 	addi	sp,sp,24
   49228:	f800283a 	ret
   4922c:	880b883a 	mov	r5,r17
   49230:	880d883a 	mov	r6,r17
   49234:	9809883a 	mov	r4,r19
   49238:	0048f780 	call	48f78 <__multiply>
   4923c:	88800015 	stw	r2,0(r17)
   49240:	10000015 	stw	zero,0(r2)
   49244:	1023883a 	mov	r17,r2
   49248:	003fdd06 	br	491c0 <__pow5mult+0x5c>
   4924c:	1025883a 	mov	r18,r2
   49250:	003fd606 	br	491ac <__pow5mult+0x48>
   49254:	10bfffc4 	addi	r2,r2,-1
   49258:	1085883a 	add	r2,r2,r2
   4925c:	00c00174 	movhi	r3,5
   49260:	18ffb804 	addi	r3,r3,-288
   49264:	1085883a 	add	r2,r2,r2
   49268:	1885883a 	add	r2,r3,r2
   4926c:	11800017 	ldw	r6,0(r2)
   49270:	000f883a 	mov	r7,zero
   49274:	0048c0c0 	call	48c0c <__multadd>
   49278:	1025883a 	mov	r18,r2
   4927c:	003fc506 	br	49194 <__pow5mult+0x30>
   49280:	05000044 	movi	r20,1
   49284:	9809883a 	mov	r4,r19
   49288:	a00b883a 	mov	r5,r20
   4928c:	0048b3c0 	call	48b3c <_Balloc>
   49290:	1023883a 	mov	r17,r2
   49294:	00809c44 	movi	r2,625
   49298:	88800515 	stw	r2,20(r17)
   4929c:	8d000415 	stw	r20,16(r17)
   492a0:	9c401215 	stw	r17,72(r19)
   492a4:	88000015 	stw	zero,0(r17)
   492a8:	003fbe06 	br	491a4 <__pow5mult+0x40>

000492ac <__lshift>:
   492ac:	defff904 	addi	sp,sp,-28
   492b0:	dd000415 	stw	r20,16(sp)
   492b4:	dc400115 	stw	r17,4(sp)
   492b8:	2d000417 	ldw	r20,16(r5)
   492bc:	3023d17a 	srai	r17,r6,5
   492c0:	28800217 	ldw	r2,8(r5)
   492c4:	dd400515 	stw	r21,20(sp)
   492c8:	8d29883a 	add	r20,r17,r20
   492cc:	dcc00315 	stw	r19,12(sp)
   492d0:	dc800215 	stw	r18,8(sp)
   492d4:	dc000015 	stw	r16,0(sp)
   492d8:	dfc00615 	stw	ra,24(sp)
   492dc:	a4000044 	addi	r16,r20,1
   492e0:	2825883a 	mov	r18,r5
   492e4:	302b883a 	mov	r21,r6
   492e8:	2027883a 	mov	r19,r4
   492ec:	29400117 	ldw	r5,4(r5)
   492f0:	1400030e 	bge	r2,r16,49300 <__lshift+0x54>
   492f4:	1085883a 	add	r2,r2,r2
   492f8:	29400044 	addi	r5,r5,1
   492fc:	143ffd16 	blt	r2,r16,492f4 <__lshift+0x48>
   49300:	9809883a 	mov	r4,r19
   49304:	0048b3c0 	call	48b3c <_Balloc>
   49308:	11000504 	addi	r4,r2,20
   4930c:	0440090e 	bge	zero,r17,49334 <__lshift+0x88>
   49310:	200f883a 	mov	r7,r4
   49314:	0007883a 	mov	r3,zero
   49318:	38000015 	stw	zero,0(r7)
   4931c:	18c00044 	addi	r3,r3,1
   49320:	39c00104 	addi	r7,r7,4
   49324:	1c7ffc1e 	bne	r3,r17,49318 <__lshift+0x6c>
   49328:	18c7883a 	add	r3,r3,r3
   4932c:	18c7883a 	add	r3,r3,r3
   49330:	20c9883a 	add	r4,r4,r3
   49334:	92400417 	ldw	r9,16(r18)
   49338:	90c00504 	addi	r3,r18,20
   4933c:	a98007cc 	andi	r6,r21,31
   49340:	4a53883a 	add	r9,r9,r9
   49344:	4a53883a 	add	r9,r9,r9
   49348:	1a53883a 	add	r9,r3,r9
   4934c:	30002426 	beq	r6,zero,493e0 <__lshift+0x134>
   49350:	01400804 	movi	r5,32
   49354:	298bc83a 	sub	r5,r5,r6
   49358:	200f883a 	mov	r7,r4
   4935c:	0011883a 	mov	r8,zero
   49360:	1a800017 	ldw	r10,0(r3)
   49364:	3809883a 	mov	r4,r7
   49368:	39c00104 	addi	r7,r7,4
   4936c:	5194983a 	sll	r10,r10,r6
   49370:	18c00104 	addi	r3,r3,4
   49374:	4290b03a 	or	r8,r8,r10
   49378:	3a3fff15 	stw	r8,-4(r7)
   4937c:	1a3fff17 	ldw	r8,-4(r3)
   49380:	4150d83a 	srl	r8,r8,r5
   49384:	1a7ff636 	bltu	r3,r9,49360 <__lshift+0xb4>
   49388:	22000115 	stw	r8,4(r4)
   4938c:	40000126 	beq	r8,zero,49394 <__lshift+0xe8>
   49390:	a4000084 	addi	r16,r20,2
   49394:	91000117 	ldw	r4,4(r18)
   49398:	98c01317 	ldw	r3,76(r19)
   4939c:	843fffc4 	addi	r16,r16,-1
   493a0:	2109883a 	add	r4,r4,r4
   493a4:	2109883a 	add	r4,r4,r4
   493a8:	1907883a 	add	r3,r3,r4
   493ac:	19000017 	ldw	r4,0(r3)
   493b0:	14000415 	stw	r16,16(r2)
   493b4:	91000015 	stw	r4,0(r18)
   493b8:	1c800015 	stw	r18,0(r3)
   493bc:	dfc00617 	ldw	ra,24(sp)
   493c0:	dd400517 	ldw	r21,20(sp)
   493c4:	dd000417 	ldw	r20,16(sp)
   493c8:	dcc00317 	ldw	r19,12(sp)
   493cc:	dc800217 	ldw	r18,8(sp)
   493d0:	dc400117 	ldw	r17,4(sp)
   493d4:	dc000017 	ldw	r16,0(sp)
   493d8:	dec00704 	addi	sp,sp,28
   493dc:	f800283a 	ret
   493e0:	200f883a 	mov	r7,r4
   493e4:	19800017 	ldw	r6,0(r3)
   493e8:	39c00104 	addi	r7,r7,4
   493ec:	18c00104 	addi	r3,r3,4
   493f0:	39bfff15 	stw	r6,-4(r7)
   493f4:	1a7ffb36 	bltu	r3,r9,493e4 <__lshift+0x138>
   493f8:	003fe606 	br	49394 <__lshift+0xe8>

000493fc <__mcmp>:
   493fc:	20800417 	ldw	r2,16(r4)
   49400:	28c00417 	ldw	r3,16(r5)
   49404:	10c5c83a 	sub	r2,r2,r3
   49408:	1000111e 	bne	r2,zero,49450 <__mcmp+0x54>
   4940c:	18c7883a 	add	r3,r3,r3
   49410:	18c7883a 	add	r3,r3,r3
   49414:	21000504 	addi	r4,r4,20
   49418:	29400504 	addi	r5,r5,20
   4941c:	20c5883a 	add	r2,r4,r3
   49420:	28cb883a 	add	r5,r5,r3
   49424:	00000106 	br	4942c <__mcmp+0x30>
   49428:	2080082e 	bgeu	r4,r2,4944c <__mcmp+0x50>
   4942c:	10bfff04 	addi	r2,r2,-4
   49430:	297fff04 	addi	r5,r5,-4
   49434:	11800017 	ldw	r6,0(r2)
   49438:	28c00017 	ldw	r3,0(r5)
   4943c:	30fffa26 	beq	r6,r3,49428 <__mcmp+0x2c>
   49440:	30c00436 	bltu	r6,r3,49454 <__mcmp+0x58>
   49444:	00800044 	movi	r2,1
   49448:	f800283a 	ret
   4944c:	0005883a 	mov	r2,zero
   49450:	f800283a 	ret
   49454:	00bfffc4 	movi	r2,-1
   49458:	f800283a 	ret

0004945c <__mdiff>:
   4945c:	defffc04 	addi	sp,sp,-16
   49460:	dc000015 	stw	r16,0(sp)
   49464:	2821883a 	mov	r16,r5
   49468:	200f883a 	mov	r7,r4
   4946c:	300b883a 	mov	r5,r6
   49470:	8009883a 	mov	r4,r16
   49474:	dc400115 	stw	r17,4(sp)
   49478:	dfc00315 	stw	ra,12(sp)
   4947c:	dc800215 	stw	r18,8(sp)
   49480:	3023883a 	mov	r17,r6
   49484:	00493fc0 	call	493fc <__mcmp>
   49488:	10005226 	beq	r2,zero,495d4 <__mdiff+0x178>
   4948c:	10004c16 	blt	r2,zero,495c0 <__mdiff+0x164>
   49490:	0025883a 	mov	r18,zero
   49494:	81400117 	ldw	r5,4(r16)
   49498:	3809883a 	mov	r4,r7
   4949c:	0048b3c0 	call	48b3c <_Balloc>
   494a0:	82800417 	ldw	r10,16(r16)
   494a4:	8b400417 	ldw	r13,16(r17)
   494a8:	81000504 	addi	r4,r16,20
   494ac:	5299883a 	add	r12,r10,r10
   494b0:	6b5b883a 	add	r13,r13,r13
   494b4:	6319883a 	add	r12,r12,r12
   494b8:	89800504 	addi	r6,r17,20
   494bc:	6b5b883a 	add	r13,r13,r13
   494c0:	14800315 	stw	r18,12(r2)
   494c4:	2319883a 	add	r12,r4,r12
   494c8:	335b883a 	add	r13,r6,r13
   494cc:	11400504 	addi	r5,r2,20
   494d0:	0007883a 	mov	r3,zero
   494d4:	00000106 	br	494dc <__mdiff+0x80>
   494d8:	400b883a 	mov	r5,r8
   494dc:	22400017 	ldw	r9,0(r4)
   494e0:	32000017 	ldw	r8,0(r6)
   494e4:	31800104 	addi	r6,r6,4
   494e8:	49ffffcc 	andi	r7,r9,65535
   494ec:	42ffffcc 	andi	r11,r8,65535
   494f0:	38c7883a 	add	r3,r7,r3
   494f4:	1acfc83a 	sub	r7,r3,r11
   494f8:	4010d43a 	srli	r8,r8,16
   494fc:	4806d43a 	srli	r3,r9,16
   49500:	3817d43a 	srai	r11,r7,16
   49504:	39ffffcc 	andi	r7,r7,65535
   49508:	1a07c83a 	sub	r3,r3,r8
   4950c:	1ac7883a 	add	r3,r3,r11
   49510:	1812943a 	slli	r9,r3,16
   49514:	2a000104 	addi	r8,r5,4
   49518:	21000104 	addi	r4,r4,4
   4951c:	49ceb03a 	or	r7,r9,r7
   49520:	29c00015 	stw	r7,0(r5)
   49524:	1807d43a 	srai	r3,r3,16
   49528:	337feb36 	bltu	r6,r13,494d8 <__mdiff+0x7c>
   4952c:	2013883a 	mov	r9,r4
   49530:	2300342e 	bgeu	r4,r12,49604 <__mdiff+0x1a8>
   49534:	400b883a 	mov	r5,r8
   49538:	21c00017 	ldw	r7,0(r4)
   4953c:	29400104 	addi	r5,r5,4
   49540:	21000104 	addi	r4,r4,4
   49544:	39bfffcc 	andi	r6,r7,65535
   49548:	30cd883a 	add	r6,r6,r3
   4954c:	3007d43a 	srai	r3,r6,16
   49550:	380ed43a 	srli	r7,r7,16
   49554:	31bfffcc 	andi	r6,r6,65535
   49558:	19c7883a 	add	r3,r3,r7
   4955c:	180e943a 	slli	r7,r3,16
   49560:	1807d43a 	srai	r3,r3,16
   49564:	398cb03a 	or	r6,r7,r6
   49568:	29bfff15 	stw	r6,-4(r5)
   4956c:	233ff236 	bltu	r4,r12,49538 <__mdiff+0xdc>
   49570:	0248303a 	nor	r4,zero,r9
   49574:	2309883a 	add	r4,r4,r12
   49578:	2008d0ba 	srli	r4,r4,2
   4957c:	21000044 	addi	r4,r4,1
   49580:	2109883a 	add	r4,r4,r4
   49584:	2109883a 	add	r4,r4,r4
   49588:	4111883a 	add	r8,r8,r4
   4958c:	413fff04 	addi	r4,r8,-4
   49590:	3000041e 	bne	r6,zero,495a4 <__mdiff+0x148>
   49594:	213fff04 	addi	r4,r4,-4
   49598:	20c00017 	ldw	r3,0(r4)
   4959c:	52bfffc4 	addi	r10,r10,-1
   495a0:	183ffc26 	beq	r3,zero,49594 <__mdiff+0x138>
   495a4:	12800415 	stw	r10,16(r2)
   495a8:	dfc00317 	ldw	ra,12(sp)
   495ac:	dc800217 	ldw	r18,8(sp)
   495b0:	dc400117 	ldw	r17,4(sp)
   495b4:	dc000017 	ldw	r16,0(sp)
   495b8:	dec00404 	addi	sp,sp,16
   495bc:	f800283a 	ret
   495c0:	8005883a 	mov	r2,r16
   495c4:	04800044 	movi	r18,1
   495c8:	8821883a 	mov	r16,r17
   495cc:	1023883a 	mov	r17,r2
   495d0:	003fb006 	br	49494 <__mdiff+0x38>
   495d4:	3809883a 	mov	r4,r7
   495d8:	000b883a 	mov	r5,zero
   495dc:	0048b3c0 	call	48b3c <_Balloc>
   495e0:	00c00044 	movi	r3,1
   495e4:	10c00415 	stw	r3,16(r2)
   495e8:	10000515 	stw	zero,20(r2)
   495ec:	dfc00317 	ldw	ra,12(sp)
   495f0:	dc800217 	ldw	r18,8(sp)
   495f4:	dc400117 	ldw	r17,4(sp)
   495f8:	dc000017 	ldw	r16,0(sp)
   495fc:	dec00404 	addi	sp,sp,16
   49600:	f800283a 	ret
   49604:	380d883a 	mov	r6,r7
   49608:	003fe006 	br	4958c <__mdiff+0x130>

0004960c <__ulp>:
   4960c:	295ffc2c 	andhi	r5,r5,32752
   49610:	00bf3034 	movhi	r2,64704
   49614:	2887883a 	add	r3,r5,r2
   49618:	00c0020e 	bge	zero,r3,49624 <__ulp+0x18>
   4961c:	0005883a 	mov	r2,zero
   49620:	f800283a 	ret
   49624:	00c7c83a 	sub	r3,zero,r3
   49628:	1805d53a 	srai	r2,r3,20
   4962c:	00c004c4 	movi	r3,19
   49630:	18800a0e 	bge	r3,r2,4965c <__ulp+0x50>
   49634:	01000c84 	movi	r4,50
   49638:	0007883a 	mov	r3,zero
   4963c:	20800516 	blt	r4,r2,49654 <__ulp+0x48>
   49640:	01000cc4 	movi	r4,51
   49644:	2085c83a 	sub	r2,r4,r2
   49648:	01000044 	movi	r4,1
   4964c:	2084983a 	sll	r2,r4,r2
   49650:	f800283a 	ret
   49654:	00800044 	movi	r2,1
   49658:	f800283a 	ret
   4965c:	00c00234 	movhi	r3,8
   49660:	1887d83a 	sra	r3,r3,r2
   49664:	0005883a 	mov	r2,zero
   49668:	f800283a 	ret

0004966c <__b2d>:
   4966c:	21800417 	ldw	r6,16(r4)
   49670:	22000504 	addi	r8,r4,20
   49674:	deffff04 	addi	sp,sp,-4
   49678:	318d883a 	add	r6,r6,r6
   4967c:	318d883a 	add	r6,r6,r6
   49680:	418d883a 	add	r6,r8,r6
   49684:	31ffff17 	ldw	r7,-4(r6)
   49688:	327fff04 	addi	r9,r6,-4
   4968c:	dfc00015 	stw	ra,0(sp)
   49690:	3809883a 	mov	r4,r7
   49694:	0048e240 	call	48e24 <__hi0bits>
   49698:	00c00804 	movi	r3,32
   4969c:	1887c83a 	sub	r3,r3,r2
   496a0:	28c00015 	stw	r3,0(r5)
   496a4:	00c00284 	movi	r3,10
   496a8:	18800d16 	blt	r3,r2,496e0 <__b2d+0x74>
   496ac:	010002c4 	movi	r4,11
   496b0:	2089c83a 	sub	r4,r4,r2
   496b4:	3906d83a 	srl	r3,r7,r4
   496b8:	18cffc34 	orhi	r3,r3,16368
   496bc:	4240232e 	bgeu	r8,r9,4974c <__b2d+0xe0>
   496c0:	317ffe17 	ldw	r5,-8(r6)
   496c4:	2908d83a 	srl	r4,r5,r4
   496c8:	10800544 	addi	r2,r2,21
   496cc:	388e983a 	sll	r7,r7,r2
   496d0:	21c4b03a 	or	r2,r4,r7
   496d4:	dfc00017 	ldw	ra,0(sp)
   496d8:	dec00104 	addi	sp,sp,4
   496dc:	f800283a 	ret
   496e0:	42401136 	bltu	r8,r9,49728 <__b2d+0xbc>
   496e4:	113ffd44 	addi	r4,r2,-11
   496e8:	000b883a 	mov	r5,zero
   496ec:	20001226 	beq	r4,zero,49738 <__b2d+0xcc>
   496f0:	00c00ac4 	movi	r3,43
   496f4:	1885c83a 	sub	r2,r3,r2
   496f8:	3906983a 	sll	r3,r7,r4
   496fc:	288cd83a 	srl	r6,r5,r2
   49700:	18cffc34 	orhi	r3,r3,16368
   49704:	1986b03a 	or	r3,r3,r6
   49708:	4240122e 	bgeu	r8,r9,49754 <__b2d+0xe8>
   4970c:	49bfff17 	ldw	r6,-4(r9)
   49710:	3084d83a 	srl	r2,r6,r2
   49714:	2908983a 	sll	r4,r5,r4
   49718:	1104b03a 	or	r2,r2,r4
   4971c:	dfc00017 	ldw	ra,0(sp)
   49720:	dec00104 	addi	sp,sp,4
   49724:	f800283a 	ret
   49728:	113ffd44 	addi	r4,r2,-11
   4972c:	327ffe04 	addi	r9,r6,-8
   49730:	317ffe17 	ldw	r5,-8(r6)
   49734:	203fee1e 	bne	r4,zero,496f0 <__b2d+0x84>
   49738:	38cffc34 	orhi	r3,r7,16368
   4973c:	2805883a 	mov	r2,r5
   49740:	dfc00017 	ldw	ra,0(sp)
   49744:	dec00104 	addi	sp,sp,4
   49748:	f800283a 	ret
   4974c:	0009883a 	mov	r4,zero
   49750:	003fdd06 	br	496c8 <__b2d+0x5c>
   49754:	0005883a 	mov	r2,zero
   49758:	003fee06 	br	49714 <__b2d+0xa8>

0004975c <__d2b>:
   4975c:	defffa04 	addi	sp,sp,-24
   49760:	dc400315 	stw	r17,12(sp)
   49764:	2823883a 	mov	r17,r5
   49768:	01400044 	movi	r5,1
   4976c:	dc800415 	stw	r18,16(sp)
   49770:	dc000215 	stw	r16,8(sp)
   49774:	dfc00515 	stw	ra,20(sp)
   49778:	3021883a 	mov	r16,r6
   4977c:	3825883a 	mov	r18,r7
   49780:	0048b3c0 	call	48b3c <_Balloc>
   49784:	8012907a 	slli	r9,r16,1
   49788:	1011883a 	mov	r8,r2
   4978c:	00800434 	movhi	r2,16
   49790:	10bfffc4 	addi	r2,r2,-1
   49794:	4812d57a 	srli	r9,r9,21
   49798:	80a0703a 	and	r16,r16,r2
   4979c:	48000126 	beq	r9,zero,497a4 <__d2b+0x48>
   497a0:	84000434 	orhi	r16,r16,16
   497a4:	dc000015 	stw	r16,0(sp)
   497a8:	88001e26 	beq	r17,zero,49824 <__d2b+0xc8>
   497ac:	d9000104 	addi	r4,sp,4
   497b0:	dc400115 	stw	r17,4(sp)
   497b4:	0048e8c0 	call	48e8c <__lo0bits>
   497b8:	d8c00017 	ldw	r3,0(sp)
   497bc:	10002f1e 	bne	r2,zero,4987c <__d2b+0x120>
   497c0:	d9000117 	ldw	r4,4(sp)
   497c4:	41000515 	stw	r4,20(r8)
   497c8:	180b003a 	cmpeq	r5,r3,zero
   497cc:	01000084 	movi	r4,2
   497d0:	214bc83a 	sub	r5,r4,r5
   497d4:	40c00615 	stw	r3,24(r8)
   497d8:	41400415 	stw	r5,16(r8)
   497dc:	4800191e 	bne	r9,zero,49844 <__d2b+0xe8>
   497e0:	280690ba 	slli	r3,r5,2
   497e4:	10bef384 	addi	r2,r2,-1074
   497e8:	90800015 	stw	r2,0(r18)
   497ec:	40c5883a 	add	r2,r8,r3
   497f0:	11000417 	ldw	r4,16(r2)
   497f4:	0048e240 	call	48e24 <__hi0bits>
   497f8:	280a917a 	slli	r5,r5,5
   497fc:	d8c00617 	ldw	r3,24(sp)
   49800:	2885c83a 	sub	r2,r5,r2
   49804:	18800015 	stw	r2,0(r3)
   49808:	4005883a 	mov	r2,r8
   4980c:	dfc00517 	ldw	ra,20(sp)
   49810:	dc800417 	ldw	r18,16(sp)
   49814:	dc400317 	ldw	r17,12(sp)
   49818:	dc000217 	ldw	r16,8(sp)
   4981c:	dec00604 	addi	sp,sp,24
   49820:	f800283a 	ret
   49824:	d809883a 	mov	r4,sp
   49828:	0048e8c0 	call	48e8c <__lo0bits>
   4982c:	d8c00017 	ldw	r3,0(sp)
   49830:	01400044 	movi	r5,1
   49834:	41400415 	stw	r5,16(r8)
   49838:	40c00515 	stw	r3,20(r8)
   4983c:	10800804 	addi	r2,r2,32
   49840:	483fe726 	beq	r9,zero,497e0 <__d2b+0x84>
   49844:	00c00d44 	movi	r3,53
   49848:	4a7ef344 	addi	r9,r9,-1075
   4984c:	4893883a 	add	r9,r9,r2
   49850:	1885c83a 	sub	r2,r3,r2
   49854:	d8c00617 	ldw	r3,24(sp)
   49858:	92400015 	stw	r9,0(r18)
   4985c:	18800015 	stw	r2,0(r3)
   49860:	4005883a 	mov	r2,r8
   49864:	dfc00517 	ldw	ra,20(sp)
   49868:	dc800417 	ldw	r18,16(sp)
   4986c:	dc400317 	ldw	r17,12(sp)
   49870:	dc000217 	ldw	r16,8(sp)
   49874:	dec00604 	addi	sp,sp,24
   49878:	f800283a 	ret
   4987c:	01000804 	movi	r4,32
   49880:	2089c83a 	sub	r4,r4,r2
   49884:	1908983a 	sll	r4,r3,r4
   49888:	d9400117 	ldw	r5,4(sp)
   4988c:	1886d83a 	srl	r3,r3,r2
   49890:	2148b03a 	or	r4,r4,r5
   49894:	41000515 	stw	r4,20(r8)
   49898:	d8c00015 	stw	r3,0(sp)
   4989c:	003fca06 	br	497c8 <__d2b+0x6c>

000498a0 <__ratio>:
   498a0:	defffd04 	addi	sp,sp,-12
   498a4:	2817883a 	mov	r11,r5
   498a8:	201b883a 	mov	r13,r4
   498ac:	d9400104 	addi	r5,sp,4
   498b0:	dfc00215 	stw	ra,8(sp)
   498b4:	004966c0 	call	4966c <__b2d>
   498b8:	5809883a 	mov	r4,r11
   498bc:	d80b883a 	mov	r5,sp
   498c0:	1019883a 	mov	r12,r2
   498c4:	1815883a 	mov	r10,r3
   498c8:	004966c0 	call	4966c <__b2d>
   498cc:	69400417 	ldw	r5,16(r13)
   498d0:	59000417 	ldw	r4,16(r11)
   498d4:	d9800117 	ldw	r6,4(sp)
   498d8:	2909c83a 	sub	r4,r5,r4
   498dc:	d9400017 	ldw	r5,0(sp)
   498e0:	2008917a 	slli	r4,r4,5
   498e4:	314bc83a 	sub	r5,r6,r5
   498e8:	290b883a 	add	r5,r5,r4
   498ec:	01400a0e 	bge	zero,r5,49918 <__ratio+0x78>
   498f0:	280a953a 	slli	r5,r5,20
   498f4:	6009883a 	mov	r4,r12
   498f8:	100d883a 	mov	r6,r2
   498fc:	2a95883a 	add	r10,r5,r10
   49900:	500b883a 	mov	r5,r10
   49904:	180f883a 	mov	r7,r3
   49908:	00418400 	call	41840 <__divdf3>
   4990c:	dfc00217 	ldw	ra,8(sp)
   49910:	dec00304 	addi	sp,sp,12
   49914:	f800283a 	ret
   49918:	280a953a 	slli	r5,r5,20
   4991c:	6009883a 	mov	r4,r12
   49920:	100d883a 	mov	r6,r2
   49924:	1947c83a 	sub	r3,r3,r5
   49928:	180f883a 	mov	r7,r3
   4992c:	500b883a 	mov	r5,r10
   49930:	00418400 	call	41840 <__divdf3>
   49934:	dfc00217 	ldw	ra,8(sp)
   49938:	dec00304 	addi	sp,sp,12
   4993c:	f800283a 	ret

00049940 <_mprec_log10>:
   49940:	defffe04 	addi	sp,sp,-8
   49944:	dc000015 	stw	r16,0(sp)
   49948:	dfc00115 	stw	ra,4(sp)
   4994c:	008005c4 	movi	r2,23
   49950:	2021883a 	mov	r16,r4
   49954:	11000d0e 	bge	r2,r4,4998c <_mprec_log10+0x4c>
   49958:	0005883a 	mov	r2,zero
   4995c:	00cffc34 	movhi	r3,16368
   49960:	843fffc4 	addi	r16,r16,-1
   49964:	1009883a 	mov	r4,r2
   49968:	180b883a 	mov	r5,r3
   4996c:	000d883a 	mov	r6,zero
   49970:	01d00934 	movhi	r7,16420
   49974:	00421140 	call	42114 <__muldf3>
   49978:	803ff91e 	bne	r16,zero,49960 <_mprec_log10+0x20>
   4997c:	dfc00117 	ldw	ra,4(sp)
   49980:	dc000017 	ldw	r16,0(sp)
   49984:	dec00204 	addi	sp,sp,8
   49988:	f800283a 	ret
   4998c:	202090fa 	slli	r16,r4,3
   49990:	00800174 	movhi	r2,5
   49994:	10bfcf04 	addi	r2,r2,-196
   49998:	1421883a 	add	r16,r2,r16
   4999c:	80800017 	ldw	r2,0(r16)
   499a0:	80c00117 	ldw	r3,4(r16)
   499a4:	dfc00117 	ldw	ra,4(sp)
   499a8:	dc000017 	ldw	r16,0(sp)
   499ac:	dec00204 	addi	sp,sp,8
   499b0:	f800283a 	ret

000499b4 <__copybits>:
   499b4:	297fffc4 	addi	r5,r5,-1
   499b8:	2811d17a 	srai	r8,r5,5
   499bc:	31c00417 	ldw	r7,16(r6)
   499c0:	30800504 	addi	r2,r6,20
   499c4:	42000044 	addi	r8,r8,1
   499c8:	39cf883a 	add	r7,r7,r7
   499cc:	4211883a 	add	r8,r8,r8
   499d0:	39cf883a 	add	r7,r7,r7
   499d4:	4211883a 	add	r8,r8,r8
   499d8:	11cf883a 	add	r7,r2,r7
   499dc:	2211883a 	add	r8,r4,r8
   499e0:	11c00d2e 	bgeu	r2,r7,49a18 <__copybits+0x64>
   499e4:	2007883a 	mov	r3,r4
   499e8:	11400017 	ldw	r5,0(r2)
   499ec:	18c00104 	addi	r3,r3,4
   499f0:	10800104 	addi	r2,r2,4
   499f4:	197fff15 	stw	r5,-4(r3)
   499f8:	11fffb36 	bltu	r2,r7,499e8 <__copybits+0x34>
   499fc:	3985c83a 	sub	r2,r7,r6
   49a00:	10bffac4 	addi	r2,r2,-21
   49a04:	1004d0ba 	srli	r2,r2,2
   49a08:	10800044 	addi	r2,r2,1
   49a0c:	1085883a 	add	r2,r2,r2
   49a10:	1085883a 	add	r2,r2,r2
   49a14:	2089883a 	add	r4,r4,r2
   49a18:	2200032e 	bgeu	r4,r8,49a28 <__copybits+0x74>
   49a1c:	20000015 	stw	zero,0(r4)
   49a20:	21000104 	addi	r4,r4,4
   49a24:	223ffd36 	bltu	r4,r8,49a1c <__copybits+0x68>
   49a28:	f800283a 	ret

00049a2c <__any_on>:
   49a2c:	20800417 	ldw	r2,16(r4)
   49a30:	2807d17a 	srai	r3,r5,5
   49a34:	21000504 	addi	r4,r4,20
   49a38:	10c00d0e 	bge	r2,r3,49a70 <__any_on+0x44>
   49a3c:	1085883a 	add	r2,r2,r2
   49a40:	1085883a 	add	r2,r2,r2
   49a44:	2085883a 	add	r2,r4,r2
   49a48:	2080182e 	bgeu	r4,r2,49aac <__any_on+0x80>
   49a4c:	10ffff17 	ldw	r3,-4(r2)
   49a50:	10bfff04 	addi	r2,r2,-4
   49a54:	1800041e 	bne	r3,zero,49a68 <__any_on+0x3c>
   49a58:	2080142e 	bgeu	r4,r2,49aac <__any_on+0x80>
   49a5c:	10bfff04 	addi	r2,r2,-4
   49a60:	10c00017 	ldw	r3,0(r2)
   49a64:	183ffc26 	beq	r3,zero,49a58 <__any_on+0x2c>
   49a68:	00800044 	movi	r2,1
   49a6c:	f800283a 	ret
   49a70:	18800a0e 	bge	r3,r2,49a9c <__any_on+0x70>
   49a74:	18c7883a 	add	r3,r3,r3
   49a78:	18c7883a 	add	r3,r3,r3
   49a7c:	294007cc 	andi	r5,r5,31
   49a80:	20c5883a 	add	r2,r4,r3
   49a84:	283ff026 	beq	r5,zero,49a48 <__any_on+0x1c>
   49a88:	10c00017 	ldw	r3,0(r2)
   49a8c:	194cd83a 	srl	r6,r3,r5
   49a90:	314a983a 	sll	r5,r6,r5
   49a94:	28fff41e 	bne	r5,r3,49a68 <__any_on+0x3c>
   49a98:	003feb06 	br	49a48 <__any_on+0x1c>
   49a9c:	18c7883a 	add	r3,r3,r3
   49aa0:	18c7883a 	add	r3,r3,r3
   49aa4:	20c5883a 	add	r2,r4,r3
   49aa8:	003fe706 	br	49a48 <__any_on+0x1c>
   49aac:	0005883a 	mov	r2,zero
   49ab0:	f800283a 	ret

00049ab4 <_putc_r>:
   49ab4:	defffc04 	addi	sp,sp,-16
   49ab8:	dc000215 	stw	r16,8(sp)
   49abc:	dfc00315 	stw	ra,12(sp)
   49ac0:	2021883a 	mov	r16,r4
   49ac4:	20000226 	beq	r4,zero,49ad0 <_putc_r+0x1c>
   49ac8:	20800e17 	ldw	r2,56(r4)
   49acc:	10001b26 	beq	r2,zero,49b3c <_putc_r+0x88>
   49ad0:	30800217 	ldw	r2,8(r6)
   49ad4:	10bfffc4 	addi	r2,r2,-1
   49ad8:	30800215 	stw	r2,8(r6)
   49adc:	10000a16 	blt	r2,zero,49b08 <_putc_r+0x54>
   49ae0:	30800017 	ldw	r2,0(r6)
   49ae4:	11400005 	stb	r5,0(r2)
   49ae8:	30800017 	ldw	r2,0(r6)
   49aec:	10c00044 	addi	r3,r2,1
   49af0:	30c00015 	stw	r3,0(r6)
   49af4:	10800003 	ldbu	r2,0(r2)
   49af8:	dfc00317 	ldw	ra,12(sp)
   49afc:	dc000217 	ldw	r16,8(sp)
   49b00:	dec00404 	addi	sp,sp,16
   49b04:	f800283a 	ret
   49b08:	30c00617 	ldw	r3,24(r6)
   49b0c:	10c00616 	blt	r2,r3,49b28 <_putc_r+0x74>
   49b10:	30800017 	ldw	r2,0(r6)
   49b14:	00c00284 	movi	r3,10
   49b18:	11400005 	stb	r5,0(r2)
   49b1c:	30800017 	ldw	r2,0(r6)
   49b20:	11400003 	ldbu	r5,0(r2)
   49b24:	28fff11e 	bne	r5,r3,49aec <_putc_r+0x38>
   49b28:	8009883a 	mov	r4,r16
   49b2c:	dfc00317 	ldw	ra,12(sp)
   49b30:	dc000217 	ldw	r16,8(sp)
   49b34:	dec00404 	addi	sp,sp,16
   49b38:	004b7d81 	jmpi	4b7d8 <__swbuf_r>
   49b3c:	d9400015 	stw	r5,0(sp)
   49b40:	d9800115 	stw	r6,4(sp)
   49b44:	00470a80 	call	470a8 <__sinit>
   49b48:	d9800117 	ldw	r6,4(sp)
   49b4c:	d9400017 	ldw	r5,0(sp)
   49b50:	003fdf06 	br	49ad0 <_putc_r+0x1c>

00049b54 <putc>:
   49b54:	defffc04 	addi	sp,sp,-16
   49b58:	dc400115 	stw	r17,4(sp)
   49b5c:	04400174 	movhi	r17,5
   49b60:	8c470004 	addi	r17,r17,7168
   49b64:	88800017 	ldw	r2,0(r17)
   49b68:	dc800215 	stw	r18,8(sp)
   49b6c:	dc000015 	stw	r16,0(sp)
   49b70:	dfc00315 	stw	ra,12(sp)
   49b74:	2025883a 	mov	r18,r4
   49b78:	2821883a 	mov	r16,r5
   49b7c:	10000226 	beq	r2,zero,49b88 <putc+0x34>
   49b80:	10c00e17 	ldw	r3,56(r2)
   49b84:	18001a26 	beq	r3,zero,49bf0 <putc+0x9c>
   49b88:	80800217 	ldw	r2,8(r16)
   49b8c:	10bfffc4 	addi	r2,r2,-1
   49b90:	80800215 	stw	r2,8(r16)
   49b94:	10000c16 	blt	r2,zero,49bc8 <putc+0x74>
   49b98:	80800017 	ldw	r2,0(r16)
   49b9c:	14800005 	stb	r18,0(r2)
   49ba0:	80800017 	ldw	r2,0(r16)
   49ba4:	10c00044 	addi	r3,r2,1
   49ba8:	80c00015 	stw	r3,0(r16)
   49bac:	10800003 	ldbu	r2,0(r2)
   49bb0:	dfc00317 	ldw	ra,12(sp)
   49bb4:	dc800217 	ldw	r18,8(sp)
   49bb8:	dc400117 	ldw	r17,4(sp)
   49bbc:	dc000017 	ldw	r16,0(sp)
   49bc0:	dec00404 	addi	sp,sp,16
   49bc4:	f800283a 	ret
   49bc8:	80c00617 	ldw	r3,24(r16)
   49bcc:	10c00b16 	blt	r2,r3,49bfc <putc+0xa8>
   49bd0:	80800017 	ldw	r2,0(r16)
   49bd4:	00c00284 	movi	r3,10
   49bd8:	14800005 	stb	r18,0(r2)
   49bdc:	80800017 	ldw	r2,0(r16)
   49be0:	11400003 	ldbu	r5,0(r2)
   49be4:	28ffef1e 	bne	r5,r3,49ba4 <putc+0x50>
   49be8:	89000017 	ldw	r4,0(r17)
   49bec:	00000506 	br	49c04 <putc+0xb0>
   49bf0:	1009883a 	mov	r4,r2
   49bf4:	00470a80 	call	470a8 <__sinit>
   49bf8:	003fe306 	br	49b88 <putc+0x34>
   49bfc:	89000017 	ldw	r4,0(r17)
   49c00:	900b883a 	mov	r5,r18
   49c04:	800d883a 	mov	r6,r16
   49c08:	dfc00317 	ldw	ra,12(sp)
   49c0c:	dc800217 	ldw	r18,8(sp)
   49c10:	dc400117 	ldw	r17,4(sp)
   49c14:	dc000017 	ldw	r16,0(sp)
   49c18:	dec00404 	addi	sp,sp,16
   49c1c:	004b7d81 	jmpi	4b7d8 <__swbuf_r>

00049c20 <_realloc_r>:
   49c20:	defff604 	addi	sp,sp,-40
   49c24:	dd000415 	stw	r20,16(sp)
   49c28:	dc000015 	stw	r16,0(sp)
   49c2c:	dfc00915 	stw	ra,36(sp)
   49c30:	df000815 	stw	fp,32(sp)
   49c34:	ddc00715 	stw	r23,28(sp)
   49c38:	dd800615 	stw	r22,24(sp)
   49c3c:	dd400515 	stw	r21,20(sp)
   49c40:	dcc00315 	stw	r19,12(sp)
   49c44:	dc800215 	stw	r18,8(sp)
   49c48:	dc400115 	stw	r17,4(sp)
   49c4c:	2821883a 	mov	r16,r5
   49c50:	3029883a 	mov	r20,r6
   49c54:	28009a26 	beq	r5,zero,49ec0 <_realloc_r+0x2a0>
   49c58:	202b883a 	mov	r21,r4
   49c5c:	004d6400 	call	4d640 <__malloc_lock>
   49c60:	80ffff17 	ldw	r3,-4(r16)
   49c64:	047fff04 	movi	r17,-4
   49c68:	a08002c4 	addi	r2,r20,11
   49c6c:	01000584 	movi	r4,22
   49c70:	84fffe04 	addi	r19,r16,-8
   49c74:	1c62703a 	and	r17,r3,r17
   49c78:	2080372e 	bgeu	r4,r2,49d58 <_realloc_r+0x138>
   49c7c:	04bffe04 	movi	r18,-8
   49c80:	14a4703a 	and	r18,r2,r18
   49c84:	9005883a 	mov	r2,r18
   49c88:	90005b16 	blt	r18,zero,49df8 <_realloc_r+0x1d8>
   49c8c:	95005a36 	bltu	r18,r20,49df8 <_realloc_r+0x1d8>
   49c90:	8880340e 	bge	r17,r2,49d64 <_realloc_r+0x144>
   49c94:	05c00174 	movhi	r23,5
   49c98:	bdc17b04 	addi	r23,r23,1516
   49c9c:	b9000217 	ldw	r4,8(r23)
   49ca0:	9c4b883a 	add	r5,r19,r17
   49ca4:	21409626 	beq	r4,r5,49f00 <_realloc_r+0x2e0>
   49ca8:	29800117 	ldw	r6,4(r5)
   49cac:	01ffff84 	movi	r7,-2
   49cb0:	31ce703a 	and	r7,r6,r7
   49cb4:	29cf883a 	add	r7,r5,r7
   49cb8:	39c00117 	ldw	r7,4(r7)
   49cbc:	39c0004c 	andi	r7,r7,1
   49cc0:	38004226 	beq	r7,zero,49dcc <_realloc_r+0x1ac>
   49cc4:	000d883a 	mov	r6,zero
   49cc8:	000b883a 	mov	r5,zero
   49ccc:	18c0004c 	andi	r3,r3,1
   49cd0:	18005c1e 	bne	r3,zero,49e44 <_realloc_r+0x224>
   49cd4:	85bffe17 	ldw	r22,-8(r16)
   49cd8:	00ffff04 	movi	r3,-4
   49cdc:	9dadc83a 	sub	r22,r19,r22
   49ce0:	b1c00117 	ldw	r7,4(r22)
   49ce4:	38c6703a 	and	r3,r7,r3
   49ce8:	28005426 	beq	r5,zero,49e3c <_realloc_r+0x21c>
   49cec:	1c47883a 	add	r3,r3,r17
   49cf0:	2900bf26 	beq	r5,r4,49ff0 <_realloc_r+0x3d0>
   49cf4:	30ef883a 	add	r23,r6,r3
   49cf8:	b8807e16 	blt	r23,r2,49ef4 <_realloc_r+0x2d4>
   49cfc:	28800317 	ldw	r2,12(r5)
   49d00:	28c00217 	ldw	r3,8(r5)
   49d04:	89bfff04 	addi	r6,r17,-4
   49d08:	01000904 	movi	r4,36
   49d0c:	18800315 	stw	r2,12(r3)
   49d10:	10c00215 	stw	r3,8(r2)
   49d14:	b1400217 	ldw	r5,8(r22)
   49d18:	b0c00317 	ldw	r3,12(r22)
   49d1c:	b5000204 	addi	r20,r22,8
   49d20:	28c00315 	stw	r3,12(r5)
   49d24:	19400215 	stw	r5,8(r3)
   49d28:	21808536 	bltu	r4,r6,49f40 <_realloc_r+0x320>
   49d2c:	008004c4 	movi	r2,19
   49d30:	1180932e 	bgeu	r2,r6,49f80 <_realloc_r+0x360>
   49d34:	80800017 	ldw	r2,0(r16)
   49d38:	b0800215 	stw	r2,8(r22)
   49d3c:	80800117 	ldw	r2,4(r16)
   49d40:	b0800315 	stw	r2,12(r22)
   49d44:	008006c4 	movi	r2,27
   49d48:	1180df36 	bltu	r2,r6,4a0c8 <_realloc_r+0x4a8>
   49d4c:	b0c00404 	addi	r3,r22,16
   49d50:	84000204 	addi	r16,r16,8
   49d54:	00008b06 	br	49f84 <_realloc_r+0x364>
   49d58:	00800404 	movi	r2,16
   49d5c:	1025883a 	mov	r18,r2
   49d60:	003fca06 	br	49c8c <_realloc_r+0x6c>
   49d64:	8029883a 	mov	r20,r16
   49d68:	8c8dc83a 	sub	r6,r17,r18
   49d6c:	008003c4 	movi	r2,15
   49d70:	18c0004c 	andi	r3,r3,1
   49d74:	11802436 	bltu	r2,r6,49e08 <_realloc_r+0x1e8>
   49d78:	1c46b03a 	or	r3,r3,r17
   49d7c:	98c00115 	stw	r3,4(r19)
   49d80:	9c63883a 	add	r17,r19,r17
   49d84:	88800117 	ldw	r2,4(r17)
   49d88:	10800054 	ori	r2,r2,1
   49d8c:	88800115 	stw	r2,4(r17)
   49d90:	a809883a 	mov	r4,r21
   49d94:	004d6600 	call	4d660 <__malloc_unlock>
   49d98:	a005883a 	mov	r2,r20
   49d9c:	dfc00917 	ldw	ra,36(sp)
   49da0:	df000817 	ldw	fp,32(sp)
   49da4:	ddc00717 	ldw	r23,28(sp)
   49da8:	dd800617 	ldw	r22,24(sp)
   49dac:	dd400517 	ldw	r21,20(sp)
   49db0:	dd000417 	ldw	r20,16(sp)
   49db4:	dcc00317 	ldw	r19,12(sp)
   49db8:	dc800217 	ldw	r18,8(sp)
   49dbc:	dc400117 	ldw	r17,4(sp)
   49dc0:	dc000017 	ldw	r16,0(sp)
   49dc4:	dec00a04 	addi	sp,sp,40
   49dc8:	f800283a 	ret
   49dcc:	01ffff04 	movi	r7,-4
   49dd0:	31cc703a 	and	r6,r6,r7
   49dd4:	344f883a 	add	r7,r6,r17
   49dd8:	38bfbc16 	blt	r7,r2,49ccc <_realloc_r+0xac>
   49ddc:	28800317 	ldw	r2,12(r5)
   49de0:	29000217 	ldw	r4,8(r5)
   49de4:	8029883a 	mov	r20,r16
   49de8:	3823883a 	mov	r17,r7
   49dec:	20800315 	stw	r2,12(r4)
   49df0:	11000215 	stw	r4,8(r2)
   49df4:	003fdc06 	br	49d68 <_realloc_r+0x148>
   49df8:	00800304 	movi	r2,12
   49dfc:	a8800015 	stw	r2,0(r21)
   49e00:	0005883a 	mov	r2,zero
   49e04:	003fe506 	br	49d9c <_realloc_r+0x17c>
   49e08:	1c86b03a 	or	r3,r3,r18
   49e0c:	9c8b883a 	add	r5,r19,r18
   49e10:	98c00115 	stw	r3,4(r19)
   49e14:	30800054 	ori	r2,r6,1
   49e18:	28800115 	stw	r2,4(r5)
   49e1c:	298d883a 	add	r6,r5,r6
   49e20:	30800117 	ldw	r2,4(r6)
   49e24:	a809883a 	mov	r4,r21
   49e28:	29400204 	addi	r5,r5,8
   49e2c:	10800054 	ori	r2,r2,1
   49e30:	30800115 	stw	r2,4(r6)
   49e34:	00474dc0 	call	474dc <_free_r>
   49e38:	003fd506 	br	49d90 <_realloc_r+0x170>
   49e3c:	1c6f883a 	add	r23,r3,r17
   49e40:	b880370e 	bge	r23,r2,49f20 <_realloc_r+0x300>
   49e44:	a00b883a 	mov	r5,r20
   49e48:	a809883a 	mov	r4,r21
   49e4c:	00480400 	call	48040 <_malloc_r>
   49e50:	1029883a 	mov	r20,r2
   49e54:	1000c026 	beq	r2,zero,4a158 <_realloc_r+0x538>
   49e58:	80ffff17 	ldw	r3,-4(r16)
   49e5c:	113ffe04 	addi	r4,r2,-8
   49e60:	00bfff84 	movi	r2,-2
   49e64:	1884703a 	and	r2,r3,r2
   49e68:	9885883a 	add	r2,r19,r2
   49e6c:	20809026 	beq	r4,r2,4a0b0 <_realloc_r+0x490>
   49e70:	89bfff04 	addi	r6,r17,-4
   49e74:	00800904 	movi	r2,36
   49e78:	11805936 	bltu	r2,r6,49fe0 <_realloc_r+0x3c0>
   49e7c:	00c004c4 	movi	r3,19
   49e80:	19803636 	bltu	r3,r6,49f5c <_realloc_r+0x33c>
   49e84:	a005883a 	mov	r2,r20
   49e88:	8007883a 	mov	r3,r16
   49e8c:	19000017 	ldw	r4,0(r3)
   49e90:	11000015 	stw	r4,0(r2)
   49e94:	19000117 	ldw	r4,4(r3)
   49e98:	11000115 	stw	r4,4(r2)
   49e9c:	18c00217 	ldw	r3,8(r3)
   49ea0:	10c00215 	stw	r3,8(r2)
   49ea4:	800b883a 	mov	r5,r16
   49ea8:	a809883a 	mov	r4,r21
   49eac:	00474dc0 	call	474dc <_free_r>
   49eb0:	a809883a 	mov	r4,r21
   49eb4:	004d6600 	call	4d660 <__malloc_unlock>
   49eb8:	a005883a 	mov	r2,r20
   49ebc:	003fb706 	br	49d9c <_realloc_r+0x17c>
   49ec0:	300b883a 	mov	r5,r6
   49ec4:	dfc00917 	ldw	ra,36(sp)
   49ec8:	df000817 	ldw	fp,32(sp)
   49ecc:	ddc00717 	ldw	r23,28(sp)
   49ed0:	dd800617 	ldw	r22,24(sp)
   49ed4:	dd400517 	ldw	r21,20(sp)
   49ed8:	dd000417 	ldw	r20,16(sp)
   49edc:	dcc00317 	ldw	r19,12(sp)
   49ee0:	dc800217 	ldw	r18,8(sp)
   49ee4:	dc400117 	ldw	r17,4(sp)
   49ee8:	dc000017 	ldw	r16,0(sp)
   49eec:	dec00a04 	addi	sp,sp,40
   49ef0:	00480401 	jmpi	48040 <_malloc_r>
   49ef4:	182f883a 	mov	r23,r3
   49ef8:	b8bfd216 	blt	r23,r2,49e44 <_realloc_r+0x224>
   49efc:	00000806 	br	49f20 <_realloc_r+0x300>
   49f00:	21800117 	ldw	r6,4(r4)
   49f04:	017fff04 	movi	r5,-4
   49f08:	91c00404 	addi	r7,r18,16
   49f0c:	314c703a 	and	r6,r6,r5
   49f10:	344b883a 	add	r5,r6,r17
   49f14:	29c0250e 	bge	r5,r7,49fac <_realloc_r+0x38c>
   49f18:	200b883a 	mov	r5,r4
   49f1c:	003f6b06 	br	49ccc <_realloc_r+0xac>
   49f20:	b0800317 	ldw	r2,12(r22)
   49f24:	b0c00217 	ldw	r3,8(r22)
   49f28:	89bfff04 	addi	r6,r17,-4
   49f2c:	01000904 	movi	r4,36
   49f30:	18800315 	stw	r2,12(r3)
   49f34:	10c00215 	stw	r3,8(r2)
   49f38:	b5000204 	addi	r20,r22,8
   49f3c:	21bf7b2e 	bgeu	r4,r6,49d2c <_realloc_r+0x10c>
   49f40:	a009883a 	mov	r4,r20
   49f44:	800b883a 	mov	r5,r16
   49f48:	00488ec0 	call	488ec <memmove>
   49f4c:	b0c00117 	ldw	r3,4(r22)
   49f50:	b823883a 	mov	r17,r23
   49f54:	b027883a 	mov	r19,r22
   49f58:	003f8306 	br	49d68 <_realloc_r+0x148>
   49f5c:	80c00017 	ldw	r3,0(r16)
   49f60:	a0c00015 	stw	r3,0(r20)
   49f64:	80c00117 	ldw	r3,4(r16)
   49f68:	a0c00115 	stw	r3,4(r20)
   49f6c:	00c006c4 	movi	r3,27
   49f70:	19804736 	bltu	r3,r6,4a090 <_realloc_r+0x470>
   49f74:	a0800204 	addi	r2,r20,8
   49f78:	80c00204 	addi	r3,r16,8
   49f7c:	003fc306 	br	49e8c <_realloc_r+0x26c>
   49f80:	a007883a 	mov	r3,r20
   49f84:	80800017 	ldw	r2,0(r16)
   49f88:	b823883a 	mov	r17,r23
   49f8c:	b027883a 	mov	r19,r22
   49f90:	18800015 	stw	r2,0(r3)
   49f94:	80800117 	ldw	r2,4(r16)
   49f98:	18800115 	stw	r2,4(r3)
   49f9c:	80800217 	ldw	r2,8(r16)
   49fa0:	18800215 	stw	r2,8(r3)
   49fa4:	b0c00117 	ldw	r3,4(r22)
   49fa8:	003f6f06 	br	49d68 <_realloc_r+0x148>
   49fac:	9ca7883a 	add	r19,r19,r18
   49fb0:	2c85c83a 	sub	r2,r5,r18
   49fb4:	bcc00215 	stw	r19,8(r23)
   49fb8:	10800054 	ori	r2,r2,1
   49fbc:	98800115 	stw	r2,4(r19)
   49fc0:	80bfff17 	ldw	r2,-4(r16)
   49fc4:	a809883a 	mov	r4,r21
   49fc8:	1080004c 	andi	r2,r2,1
   49fcc:	90a4b03a 	or	r18,r18,r2
   49fd0:	84bfff15 	stw	r18,-4(r16)
   49fd4:	004d6600 	call	4d660 <__malloc_unlock>
   49fd8:	8005883a 	mov	r2,r16
   49fdc:	003f6f06 	br	49d9c <_realloc_r+0x17c>
   49fe0:	a009883a 	mov	r4,r20
   49fe4:	800b883a 	mov	r5,r16
   49fe8:	00488ec0 	call	488ec <memmove>
   49fec:	003fad06 	br	49ea4 <_realloc_r+0x284>
   49ff0:	30f9883a 	add	fp,r6,r3
   49ff4:	91000404 	addi	r4,r18,16
   49ff8:	e13fbe16 	blt	fp,r4,49ef4 <_realloc_r+0x2d4>
   49ffc:	b0800317 	ldw	r2,12(r22)
   4a000:	b0c00217 	ldw	r3,8(r22)
   4a004:	89bfff04 	addi	r6,r17,-4
   4a008:	01000904 	movi	r4,36
   4a00c:	18800315 	stw	r2,12(r3)
   4a010:	10c00215 	stw	r3,8(r2)
   4a014:	b4400204 	addi	r17,r22,8
   4a018:	21804336 	bltu	r4,r6,4a128 <_realloc_r+0x508>
   4a01c:	008004c4 	movi	r2,19
   4a020:	11803f2e 	bgeu	r2,r6,4a120 <_realloc_r+0x500>
   4a024:	80800017 	ldw	r2,0(r16)
   4a028:	b0800215 	stw	r2,8(r22)
   4a02c:	80800117 	ldw	r2,4(r16)
   4a030:	b0800315 	stw	r2,12(r22)
   4a034:	008006c4 	movi	r2,27
   4a038:	11803f36 	bltu	r2,r6,4a138 <_realloc_r+0x518>
   4a03c:	b0c00404 	addi	r3,r22,16
   4a040:	84000204 	addi	r16,r16,8
   4a044:	80800017 	ldw	r2,0(r16)
   4a048:	18800015 	stw	r2,0(r3)
   4a04c:	80800117 	ldw	r2,4(r16)
   4a050:	18800115 	stw	r2,4(r3)
   4a054:	80800217 	ldw	r2,8(r16)
   4a058:	18800215 	stw	r2,8(r3)
   4a05c:	b487883a 	add	r3,r22,r18
   4a060:	e485c83a 	sub	r2,fp,r18
   4a064:	b8c00215 	stw	r3,8(r23)
   4a068:	10800054 	ori	r2,r2,1
   4a06c:	18800115 	stw	r2,4(r3)
   4a070:	b0800117 	ldw	r2,4(r22)
   4a074:	a809883a 	mov	r4,r21
   4a078:	1080004c 	andi	r2,r2,1
   4a07c:	90a4b03a 	or	r18,r18,r2
   4a080:	b4800115 	stw	r18,4(r22)
   4a084:	004d6600 	call	4d660 <__malloc_unlock>
   4a088:	8805883a 	mov	r2,r17
   4a08c:	003f4306 	br	49d9c <_realloc_r+0x17c>
   4a090:	80c00217 	ldw	r3,8(r16)
   4a094:	a0c00215 	stw	r3,8(r20)
   4a098:	80c00317 	ldw	r3,12(r16)
   4a09c:	a0c00315 	stw	r3,12(r20)
   4a0a0:	30801126 	beq	r6,r2,4a0e8 <_realloc_r+0x4c8>
   4a0a4:	a0800404 	addi	r2,r20,16
   4a0a8:	80c00404 	addi	r3,r16,16
   4a0ac:	003f7706 	br	49e8c <_realloc_r+0x26c>
   4a0b0:	a13fff17 	ldw	r4,-4(r20)
   4a0b4:	00bfff04 	movi	r2,-4
   4a0b8:	8029883a 	mov	r20,r16
   4a0bc:	2084703a 	and	r2,r4,r2
   4a0c0:	88a3883a 	add	r17,r17,r2
   4a0c4:	003f2806 	br	49d68 <_realloc_r+0x148>
   4a0c8:	80800217 	ldw	r2,8(r16)
   4a0cc:	b0800415 	stw	r2,16(r22)
   4a0d0:	80800317 	ldw	r2,12(r16)
   4a0d4:	b0800515 	stw	r2,20(r22)
   4a0d8:	31000a26 	beq	r6,r4,4a104 <_realloc_r+0x4e4>
   4a0dc:	b0c00604 	addi	r3,r22,24
   4a0e0:	84000404 	addi	r16,r16,16
   4a0e4:	003fa706 	br	49f84 <_realloc_r+0x364>
   4a0e8:	81000417 	ldw	r4,16(r16)
   4a0ec:	a0800604 	addi	r2,r20,24
   4a0f0:	80c00604 	addi	r3,r16,24
   4a0f4:	a1000415 	stw	r4,16(r20)
   4a0f8:	81000517 	ldw	r4,20(r16)
   4a0fc:	a1000515 	stw	r4,20(r20)
   4a100:	003f6206 	br	49e8c <_realloc_r+0x26c>
   4a104:	80800417 	ldw	r2,16(r16)
   4a108:	84000604 	addi	r16,r16,24
   4a10c:	b0c00804 	addi	r3,r22,32
   4a110:	b0800615 	stw	r2,24(r22)
   4a114:	80bfff17 	ldw	r2,-4(r16)
   4a118:	b0800715 	stw	r2,28(r22)
   4a11c:	003f9906 	br	49f84 <_realloc_r+0x364>
   4a120:	8807883a 	mov	r3,r17
   4a124:	003fc706 	br	4a044 <_realloc_r+0x424>
   4a128:	8809883a 	mov	r4,r17
   4a12c:	800b883a 	mov	r5,r16
   4a130:	00488ec0 	call	488ec <memmove>
   4a134:	003fc906 	br	4a05c <_realloc_r+0x43c>
   4a138:	80800217 	ldw	r2,8(r16)
   4a13c:	b0800415 	stw	r2,16(r22)
   4a140:	80800317 	ldw	r2,12(r16)
   4a144:	b0800515 	stw	r2,20(r22)
   4a148:	31000726 	beq	r6,r4,4a168 <_realloc_r+0x548>
   4a14c:	b0c00604 	addi	r3,r22,24
   4a150:	84000404 	addi	r16,r16,16
   4a154:	003fbb06 	br	4a044 <_realloc_r+0x424>
   4a158:	a809883a 	mov	r4,r21
   4a15c:	004d6600 	call	4d660 <__malloc_unlock>
   4a160:	0005883a 	mov	r2,zero
   4a164:	003f0d06 	br	49d9c <_realloc_r+0x17c>
   4a168:	80800417 	ldw	r2,16(r16)
   4a16c:	84000604 	addi	r16,r16,24
   4a170:	b0c00804 	addi	r3,r22,32
   4a174:	b0800615 	stw	r2,24(r22)
   4a178:	80bfff17 	ldw	r2,-4(r16)
   4a17c:	b0800715 	stw	r2,28(r22)
   4a180:	003fb006 	br	4a044 <_realloc_r+0x424>

0004a184 <__fpclassifyd>:
   4a184:	00a00034 	movhi	r2,32768
   4a188:	10bfffc4 	addi	r2,r2,-1
   4a18c:	288a703a 	and	r5,r5,r2
   4a190:	28000726 	beq	r5,zero,4a1b0 <__fpclassifyd+0x2c>
   4a194:	00bffc34 	movhi	r2,65520
   4a198:	2885883a 	add	r2,r5,r2
   4a19c:	00dff834 	movhi	r3,32736
   4a1a0:	18ffffc4 	addi	r3,r3,-1
   4a1a4:	18800636 	bltu	r3,r2,4a1c0 <__fpclassifyd+0x3c>
   4a1a8:	00800104 	movi	r2,4
   4a1ac:	f800283a 	ret
   4a1b0:	2005003a 	cmpeq	r2,r4,zero
   4a1b4:	00c000c4 	movi	r3,3
   4a1b8:	1885c83a 	sub	r2,r3,r2
   4a1bc:	f800283a 	ret
   4a1c0:	00800434 	movhi	r2,16
   4a1c4:	10bfffc4 	addi	r2,r2,-1
   4a1c8:	11400236 	bltu	r2,r5,4a1d4 <__fpclassifyd+0x50>
   4a1cc:	008000c4 	movi	r2,3
   4a1d0:	f800283a 	ret
   4a1d4:	009ffc34 	movhi	r2,32752
   4a1d8:	28800226 	beq	r5,r2,4a1e4 <__fpclassifyd+0x60>
   4a1dc:	0005883a 	mov	r2,zero
   4a1e0:	f800283a 	ret
   4a1e4:	2005003a 	cmpeq	r2,r4,zero
   4a1e8:	f800283a 	ret

0004a1ec <_sbrk_r>:
   4a1ec:	defffd04 	addi	sp,sp,-12
   4a1f0:	dc400115 	stw	r17,4(sp)
   4a1f4:	dc000015 	stw	r16,0(sp)
   4a1f8:	2023883a 	mov	r17,r4
   4a1fc:	04000174 	movhi	r16,5
   4a200:	84071504 	addi	r16,r16,7252
   4a204:	2809883a 	mov	r4,r5
   4a208:	dfc00215 	stw	ra,8(sp)
   4a20c:	80000015 	stw	zero,0(r16)
   4a210:	004d8200 	call	4d820 <sbrk>
   4a214:	00ffffc4 	movi	r3,-1
   4a218:	10c00526 	beq	r2,r3,4a230 <_sbrk_r+0x44>
   4a21c:	dfc00217 	ldw	ra,8(sp)
   4a220:	dc400117 	ldw	r17,4(sp)
   4a224:	dc000017 	ldw	r16,0(sp)
   4a228:	dec00304 	addi	sp,sp,12
   4a22c:	f800283a 	ret
   4a230:	80c00017 	ldw	r3,0(r16)
   4a234:	183ff926 	beq	r3,zero,4a21c <_sbrk_r+0x30>
   4a238:	88c00015 	stw	r3,0(r17)
   4a23c:	dfc00217 	ldw	ra,8(sp)
   4a240:	dc400117 	ldw	r17,4(sp)
   4a244:	dc000017 	ldw	r16,0(sp)
   4a248:	dec00304 	addi	sp,sp,12
   4a24c:	f800283a 	ret

0004a250 <__sread>:
   4a250:	defffe04 	addi	sp,sp,-8
   4a254:	dc000015 	stw	r16,0(sp)
   4a258:	2821883a 	mov	r16,r5
   4a25c:	2940038f 	ldh	r5,14(r5)
   4a260:	dfc00115 	stw	ra,4(sp)
   4a264:	004bf780 	call	4bf78 <_read_r>
   4a268:	10000716 	blt	r2,zero,4a288 <__sread+0x38>
   4a26c:	80c01417 	ldw	r3,80(r16)
   4a270:	1887883a 	add	r3,r3,r2
   4a274:	80c01415 	stw	r3,80(r16)
   4a278:	dfc00117 	ldw	ra,4(sp)
   4a27c:	dc000017 	ldw	r16,0(sp)
   4a280:	dec00204 	addi	sp,sp,8
   4a284:	f800283a 	ret
   4a288:	80c0030b 	ldhu	r3,12(r16)
   4a28c:	18fbffcc 	andi	r3,r3,61439
   4a290:	80c0030d 	sth	r3,12(r16)
   4a294:	dfc00117 	ldw	ra,4(sp)
   4a298:	dc000017 	ldw	r16,0(sp)
   4a29c:	dec00204 	addi	sp,sp,8
   4a2a0:	f800283a 	ret

0004a2a4 <__seofread>:
   4a2a4:	0005883a 	mov	r2,zero
   4a2a8:	f800283a 	ret

0004a2ac <__swrite>:
   4a2ac:	2880030b 	ldhu	r2,12(r5)
   4a2b0:	defffb04 	addi	sp,sp,-20
   4a2b4:	dcc00315 	stw	r19,12(sp)
   4a2b8:	dc800215 	stw	r18,8(sp)
   4a2bc:	dc400115 	stw	r17,4(sp)
   4a2c0:	dc000015 	stw	r16,0(sp)
   4a2c4:	dfc00415 	stw	ra,16(sp)
   4a2c8:	10c0400c 	andi	r3,r2,256
   4a2cc:	2821883a 	mov	r16,r5
   4a2d0:	2027883a 	mov	r19,r4
   4a2d4:	3025883a 	mov	r18,r6
   4a2d8:	3823883a 	mov	r17,r7
   4a2dc:	18000526 	beq	r3,zero,4a2f4 <__swrite+0x48>
   4a2e0:	2940038f 	ldh	r5,14(r5)
   4a2e4:	000d883a 	mov	r6,zero
   4a2e8:	01c00084 	movi	r7,2
   4a2ec:	004bf0c0 	call	4bf0c <_lseek_r>
   4a2f0:	8080030b 	ldhu	r2,12(r16)
   4a2f4:	8140038f 	ldh	r5,14(r16)
   4a2f8:	10bbffcc 	andi	r2,r2,61439
   4a2fc:	9809883a 	mov	r4,r19
   4a300:	900d883a 	mov	r6,r18
   4a304:	880f883a 	mov	r7,r17
   4a308:	8080030d 	sth	r2,12(r16)
   4a30c:	dfc00417 	ldw	ra,16(sp)
   4a310:	dcc00317 	ldw	r19,12(sp)
   4a314:	dc800217 	ldw	r18,8(sp)
   4a318:	dc400117 	ldw	r17,4(sp)
   4a31c:	dc000017 	ldw	r16,0(sp)
   4a320:	dec00504 	addi	sp,sp,20
   4a324:	004b9741 	jmpi	4b974 <_write_r>

0004a328 <__sseek>:
   4a328:	defffe04 	addi	sp,sp,-8
   4a32c:	dc000015 	stw	r16,0(sp)
   4a330:	2821883a 	mov	r16,r5
   4a334:	2940038f 	ldh	r5,14(r5)
   4a338:	dfc00115 	stw	ra,4(sp)
   4a33c:	004bf0c0 	call	4bf0c <_lseek_r>
   4a340:	00ffffc4 	movi	r3,-1
   4a344:	10c00826 	beq	r2,r3,4a368 <__sseek+0x40>
   4a348:	80c0030b 	ldhu	r3,12(r16)
   4a34c:	80801415 	stw	r2,80(r16)
   4a350:	18c40014 	ori	r3,r3,4096
   4a354:	80c0030d 	sth	r3,12(r16)
   4a358:	dfc00117 	ldw	ra,4(sp)
   4a35c:	dc000017 	ldw	r16,0(sp)
   4a360:	dec00204 	addi	sp,sp,8
   4a364:	f800283a 	ret
   4a368:	80c0030b 	ldhu	r3,12(r16)
   4a36c:	18fbffcc 	andi	r3,r3,61439
   4a370:	80c0030d 	sth	r3,12(r16)
   4a374:	dfc00117 	ldw	ra,4(sp)
   4a378:	dc000017 	ldw	r16,0(sp)
   4a37c:	dec00204 	addi	sp,sp,8
   4a380:	f800283a 	ret

0004a384 <__sclose>:
   4a384:	2940038f 	ldh	r5,14(r5)
   4a388:	004b9e01 	jmpi	4b9e0 <_close_r>

0004a38c <strcmp>:
   4a38c:	2144b03a 	or	r2,r4,r5
   4a390:	108000cc 	andi	r2,r2,3
   4a394:	1000171e 	bne	r2,zero,4a3f4 <strcmp+0x68>
   4a398:	20800017 	ldw	r2,0(r4)
   4a39c:	28c00017 	ldw	r3,0(r5)
   4a3a0:	10c0141e 	bne	r2,r3,4a3f4 <strcmp+0x68>
   4a3a4:	027fbff4 	movhi	r9,65279
   4a3a8:	4a7fbfc4 	addi	r9,r9,-257
   4a3ac:	1247883a 	add	r3,r2,r9
   4a3b0:	0084303a 	nor	r2,zero,r2
   4a3b4:	1884703a 	and	r2,r3,r2
   4a3b8:	02202074 	movhi	r8,32897
   4a3bc:	42202004 	addi	r8,r8,-32640
   4a3c0:	1204703a 	and	r2,r2,r8
   4a3c4:	10000226 	beq	r2,zero,4a3d0 <strcmp+0x44>
   4a3c8:	00001706 	br	4a428 <strcmp+0x9c>
   4a3cc:	3000161e 	bne	r6,zero,4a428 <strcmp+0x9c>
   4a3d0:	21000104 	addi	r4,r4,4
   4a3d4:	20800017 	ldw	r2,0(r4)
   4a3d8:	29400104 	addi	r5,r5,4
   4a3dc:	28c00017 	ldw	r3,0(r5)
   4a3e0:	124f883a 	add	r7,r2,r9
   4a3e4:	008c303a 	nor	r6,zero,r2
   4a3e8:	398c703a 	and	r6,r7,r6
   4a3ec:	320c703a 	and	r6,r6,r8
   4a3f0:	10fff626 	beq	r2,r3,4a3cc <strcmp+0x40>
   4a3f4:	20800007 	ldb	r2,0(r4)
   4a3f8:	1000051e 	bne	r2,zero,4a410 <strcmp+0x84>
   4a3fc:	00000606 	br	4a418 <strcmp+0x8c>
   4a400:	21000044 	addi	r4,r4,1
   4a404:	20800007 	ldb	r2,0(r4)
   4a408:	29400044 	addi	r5,r5,1
   4a40c:	10000226 	beq	r2,zero,4a418 <strcmp+0x8c>
   4a410:	28c00007 	ldb	r3,0(r5)
   4a414:	10fffa26 	beq	r2,r3,4a400 <strcmp+0x74>
   4a418:	20c00003 	ldbu	r3,0(r4)
   4a41c:	28800003 	ldbu	r2,0(r5)
   4a420:	1885c83a 	sub	r2,r3,r2
   4a424:	f800283a 	ret
   4a428:	0005883a 	mov	r2,zero
   4a42c:	f800283a 	ret

0004a430 <__sprint_r.part.0>:
   4a430:	28801917 	ldw	r2,100(r5)
   4a434:	defff604 	addi	sp,sp,-40
   4a438:	dd800615 	stw	r22,24(sp)
   4a43c:	dcc00315 	stw	r19,12(sp)
   4a440:	dfc00915 	stw	ra,36(sp)
   4a444:	df000815 	stw	fp,32(sp)
   4a448:	ddc00715 	stw	r23,28(sp)
   4a44c:	dd400515 	stw	r21,20(sp)
   4a450:	dd000415 	stw	r20,16(sp)
   4a454:	dc800215 	stw	r18,8(sp)
   4a458:	dc400115 	stw	r17,4(sp)
   4a45c:	dc000015 	stw	r16,0(sp)
   4a460:	1088000c 	andi	r2,r2,8192
   4a464:	2827883a 	mov	r19,r5
   4a468:	302d883a 	mov	r22,r6
   4a46c:	10002d26 	beq	r2,zero,4a524 <__sprint_r.part.0+0xf4>
   4a470:	30800217 	ldw	r2,8(r6)
   4a474:	35c00017 	ldw	r23,0(r6)
   4a478:	10002826 	beq	r2,zero,4a51c <__sprint_r.part.0+0xec>
   4a47c:	202b883a 	mov	r21,r4
   4a480:	bf000104 	addi	fp,r23,4
   4a484:	053fffc4 	movi	r20,-1
   4a488:	e4800017 	ldw	r18,0(fp)
   4a48c:	bc400017 	ldw	r17,0(r23)
   4a490:	0021883a 	mov	r16,zero
   4a494:	9024d0ba 	srli	r18,r18,2
   4a498:	04800316 	blt	zero,r18,4a4a8 <__sprint_r.part.0+0x78>
   4a49c:	00001806 	br	4a500 <__sprint_r.part.0+0xd0>
   4a4a0:	8c400104 	addi	r17,r17,4
   4a4a4:	94001526 	beq	r18,r16,4a4fc <__sprint_r.part.0+0xcc>
   4a4a8:	89400017 	ldw	r5,0(r17)
   4a4ac:	a809883a 	mov	r4,r21
   4a4b0:	980d883a 	mov	r6,r19
   4a4b4:	004bc440 	call	4bc44 <_fputwc_r>
   4a4b8:	84000044 	addi	r16,r16,1
   4a4bc:	153ff81e 	bne	r2,r20,4a4a0 <__sprint_r.part.0+0x70>
   4a4c0:	a005883a 	mov	r2,r20
   4a4c4:	b0000215 	stw	zero,8(r22)
   4a4c8:	b0000115 	stw	zero,4(r22)
   4a4cc:	dfc00917 	ldw	ra,36(sp)
   4a4d0:	df000817 	ldw	fp,32(sp)
   4a4d4:	ddc00717 	ldw	r23,28(sp)
   4a4d8:	dd800617 	ldw	r22,24(sp)
   4a4dc:	dd400517 	ldw	r21,20(sp)
   4a4e0:	dd000417 	ldw	r20,16(sp)
   4a4e4:	dcc00317 	ldw	r19,12(sp)
   4a4e8:	dc800217 	ldw	r18,8(sp)
   4a4ec:	dc400117 	ldw	r17,4(sp)
   4a4f0:	dc000017 	ldw	r16,0(sp)
   4a4f4:	dec00a04 	addi	sp,sp,40
   4a4f8:	f800283a 	ret
   4a4fc:	b0800217 	ldw	r2,8(r22)
   4a500:	94a5883a 	add	r18,r18,r18
   4a504:	94a5883a 	add	r18,r18,r18
   4a508:	1485c83a 	sub	r2,r2,r18
   4a50c:	b0800215 	stw	r2,8(r22)
   4a510:	bdc00204 	addi	r23,r23,8
   4a514:	e7000204 	addi	fp,fp,8
   4a518:	103fdb1e 	bne	r2,zero,4a488 <__sprint_r.part.0+0x58>
   4a51c:	0005883a 	mov	r2,zero
   4a520:	003fe806 	br	4a4c4 <__sprint_r.part.0+0x94>
   4a524:	00477ac0 	call	477ac <__sfvwrite_r>
   4a528:	003fe606 	br	4a4c4 <__sprint_r.part.0+0x94>

0004a52c <__sprint_r>:
   4a52c:	30c00217 	ldw	r3,8(r6)
   4a530:	18000126 	beq	r3,zero,4a538 <__sprint_r+0xc>
   4a534:	004a4301 	jmpi	4a430 <__sprint_r.part.0>
   4a538:	30000115 	stw	zero,4(r6)
   4a53c:	0005883a 	mov	r2,zero
   4a540:	f800283a 	ret

0004a544 <___vfiprintf_internal_r>:
   4a544:	defeca04 	addi	sp,sp,-1240
   4a548:	dd813215 	stw	r22,1224(sp)
   4a54c:	dcc12f15 	stw	r19,1212(sp)
   4a550:	dfc13515 	stw	ra,1236(sp)
   4a554:	df013415 	stw	fp,1232(sp)
   4a558:	ddc13315 	stw	r23,1228(sp)
   4a55c:	dd413115 	stw	r21,1220(sp)
   4a560:	dd013015 	stw	r20,1216(sp)
   4a564:	dc812e15 	stw	r18,1208(sp)
   4a568:	dc412d15 	stw	r17,1204(sp)
   4a56c:	dc012c15 	stw	r16,1200(sp)
   4a570:	d9012115 	stw	r4,1156(sp)
   4a574:	d9c12315 	stw	r7,1164(sp)
   4a578:	2827883a 	mov	r19,r5
   4a57c:	302d883a 	mov	r22,r6
   4a580:	20000226 	beq	r4,zero,4a58c <___vfiprintf_internal_r+0x48>
   4a584:	20800e17 	ldw	r2,56(r4)
   4a588:	1001ca26 	beq	r2,zero,4acb4 <___vfiprintf_internal_r+0x770>
   4a58c:	9880030b 	ldhu	r2,12(r19)
   4a590:	1108000c 	andi	r4,r2,8192
   4a594:	1007883a 	mov	r3,r2
   4a598:	2000071e 	bne	r4,zero,4a5b8 <___vfiprintf_internal_r+0x74>
   4a59c:	99001917 	ldw	r4,100(r19)
   4a5a0:	10c80014 	ori	r3,r2,8192
   4a5a4:	00b7ffc4 	movi	r2,-8193
   4a5a8:	2088703a 	and	r4,r4,r2
   4a5ac:	98c0030d 	sth	r3,12(r19)
   4a5b0:	1805883a 	mov	r2,r3
   4a5b4:	99001915 	stw	r4,100(r19)
   4a5b8:	1900020c 	andi	r4,r3,8
   4a5bc:	20018026 	beq	r4,zero,4abc0 <___vfiprintf_internal_r+0x67c>
   4a5c0:	99000417 	ldw	r4,16(r19)
   4a5c4:	20017e26 	beq	r4,zero,4abc0 <___vfiprintf_internal_r+0x67c>
   4a5c8:	18c0068c 	andi	r3,r3,26
   4a5cc:	01000284 	movi	r4,10
   4a5d0:	19018426 	beq	r3,r4,4abe4 <___vfiprintf_internal_r+0x6a0>
   4a5d4:	da4109c4 	addi	r9,sp,1063
   4a5d8:	da411e15 	stw	r9,1144(sp)
   4a5dc:	d8811e17 	ldw	r2,1144(sp)
   4a5e0:	da410a04 	addi	r9,sp,1064
   4a5e4:	da411f15 	stw	r9,1148(sp)
   4a5e8:	4893c83a 	sub	r9,r9,r2
   4a5ec:	dec11a15 	stw	sp,1128(sp)
   4a5f0:	d8011c15 	stw	zero,1136(sp)
   4a5f4:	d8011b15 	stw	zero,1132(sp)
   4a5f8:	d8012615 	stw	zero,1176(sp)
   4a5fc:	d8012415 	stw	zero,1168(sp)
   4a600:	d821883a 	mov	r16,sp
   4a604:	05000174 	movhi	r20,5
   4a608:	a5000504 	addi	r20,r20,20
   4a60c:	05c00174 	movhi	r23,5
   4a610:	bdc00104 	addi	r23,r23,4
   4a614:	da412715 	stw	r9,1180(sp)
   4a618:	dcc12215 	stw	r19,1160(sp)
   4a61c:	b02b883a 	mov	r21,r22
   4a620:	a8800007 	ldb	r2,0(r21)
   4a624:	1003b926 	beq	r2,zero,4b50c <___vfiprintf_internal_r+0xfc8>
   4a628:	00c00944 	movi	r3,37
   4a62c:	a823883a 	mov	r17,r21
   4a630:	10c0021e 	bne	r2,r3,4a63c <___vfiprintf_internal_r+0xf8>
   4a634:	00001606 	br	4a690 <___vfiprintf_internal_r+0x14c>
   4a638:	10c00326 	beq	r2,r3,4a648 <___vfiprintf_internal_r+0x104>
   4a63c:	8c400044 	addi	r17,r17,1
   4a640:	88800007 	ldb	r2,0(r17)
   4a644:	103ffc1e 	bne	r2,zero,4a638 <___vfiprintf_internal_r+0xf4>
   4a648:	8d65c83a 	sub	r18,r17,r21
   4a64c:	90001026 	beq	r18,zero,4a690 <___vfiprintf_internal_r+0x14c>
   4a650:	d8c11c17 	ldw	r3,1136(sp)
   4a654:	d8811b17 	ldw	r2,1132(sp)
   4a658:	85400015 	stw	r21,0(r16)
   4a65c:	90c7883a 	add	r3,r18,r3
   4a660:	10800044 	addi	r2,r2,1
   4a664:	84800115 	stw	r18,4(r16)
   4a668:	d8c11c15 	stw	r3,1136(sp)
   4a66c:	d8811b15 	stw	r2,1132(sp)
   4a670:	010001c4 	movi	r4,7
   4a674:	2080760e 	bge	r4,r2,4a850 <___vfiprintf_internal_r+0x30c>
   4a678:	1803741e 	bne	r3,zero,4b44c <___vfiprintf_internal_r+0xf08>
   4a67c:	da412417 	ldw	r9,1168(sp)
   4a680:	d8011b15 	stw	zero,1132(sp)
   4a684:	d821883a 	mov	r16,sp
   4a688:	4c93883a 	add	r9,r9,r18
   4a68c:	da412415 	stw	r9,1168(sp)
   4a690:	88800007 	ldb	r2,0(r17)
   4a694:	1003f126 	beq	r2,zero,4b65c <___vfiprintf_internal_r+0x1118>
   4a698:	88c00047 	ldb	r3,1(r17)
   4a69c:	8d400044 	addi	r21,r17,1
   4a6a0:	d8011d85 	stb	zero,1142(sp)
   4a6a4:	000d883a 	mov	r6,zero
   4a6a8:	02bfffc4 	movi	r10,-1
   4a6ac:	d8012015 	stw	zero,1152(sp)
   4a6b0:	0039883a 	mov	fp,zero
   4a6b4:	01001604 	movi	r4,88
   4a6b8:	01400244 	movi	r5,9
   4a6bc:	02000a84 	movi	r8,42
   4a6c0:	01c01b04 	movi	r7,108
   4a6c4:	ad400044 	addi	r21,r21,1
   4a6c8:	18bff804 	addi	r2,r3,-32
   4a6cc:	20825236 	bltu	r4,r2,4b018 <___vfiprintf_internal_r+0xad4>
   4a6d0:	1085883a 	add	r2,r2,r2
   4a6d4:	1085883a 	add	r2,r2,r2
   4a6d8:	02400174 	movhi	r9,5
   4a6dc:	4a69bb04 	addi	r9,r9,-22804
   4a6e0:	1245883a 	add	r2,r2,r9
   4a6e4:	10800017 	ldw	r2,0(r2)
   4a6e8:	1000683a 	jmp	r2
   4a6ec:	0004ae14 	movui	zero,4792
   4a6f0:	0004b018 	cmpnei	zero,zero,4800
   4a6f4:	0004b018 	cmpnei	zero,zero,4800
   4a6f8:	0004af98 	cmpnei	zero,zero,4798
   4a6fc:	0004b018 	cmpnei	zero,zero,4800
   4a700:	0004b018 	cmpnei	zero,zero,4800
   4a704:	0004b018 	cmpnei	zero,zero,4800
   4a708:	0004b018 	cmpnei	zero,zero,4800
   4a70c:	0004b018 	cmpnei	zero,zero,4800
   4a710:	0004b018 	cmpnei	zero,zero,4800
   4a714:	0004af70 	cmpltui	zero,zero,4797
   4a718:	0004b00c 	andi	zero,zero,4800
   4a71c:	0004b018 	cmpnei	zero,zero,4800
   4a720:	0004accc 	andi	zero,zero,4787
   4a724:	0004ad9c 	xori	zero,zero,4790
   4a728:	0004b018 	cmpnei	zero,zero,4800
   4a72c:	0004ad00 	call	4ad0 <__alt_mem_onchip_memory2-0x3b530>
   4a730:	0004ad0c 	andi	zero,zero,4788
   4a734:	0004ad0c 	andi	zero,zero,4788
   4a738:	0004ad0c 	andi	zero,zero,4788
   4a73c:	0004ad0c 	andi	zero,zero,4788
   4a740:	0004ad0c 	andi	zero,zero,4788
   4a744:	0004ad0c 	andi	zero,zero,4788
   4a748:	0004ad0c 	andi	zero,zero,4788
   4a74c:	0004ad0c 	andi	zero,zero,4788
   4a750:	0004ad0c 	andi	zero,zero,4788
   4a754:	0004b018 	cmpnei	zero,zero,4800
   4a758:	0004b018 	cmpnei	zero,zero,4800
   4a75c:	0004b018 	cmpnei	zero,zero,4800
   4a760:	0004b018 	cmpnei	zero,zero,4800
   4a764:	0004b018 	cmpnei	zero,zero,4800
   4a768:	0004b018 	cmpnei	zero,zero,4800
   4a76c:	0004b018 	cmpnei	zero,zero,4800
   4a770:	0004b018 	cmpnei	zero,zero,4800
   4a774:	0004b018 	cmpnei	zero,zero,4800
   4a778:	0004b018 	cmpnei	zero,zero,4800
   4a77c:	0004ad3c 	xorhi	zero,zero,4788
   4a780:	0004b018 	cmpnei	zero,zero,4800
   4a784:	0004b018 	cmpnei	zero,zero,4800
   4a788:	0004b018 	cmpnei	zero,zero,4800
   4a78c:	0004b018 	cmpnei	zero,zero,4800
   4a790:	0004b018 	cmpnei	zero,zero,4800
   4a794:	0004b018 	cmpnei	zero,zero,4800
   4a798:	0004b018 	cmpnei	zero,zero,4800
   4a79c:	0004b018 	cmpnei	zero,zero,4800
   4a7a0:	0004b018 	cmpnei	zero,zero,4800
   4a7a4:	0004b018 	cmpnei	zero,zero,4800
   4a7a8:	0004ab88 	cmpgei	zero,zero,4782
   4a7ac:	0004b018 	cmpnei	zero,zero,4800
   4a7b0:	0004b018 	cmpnei	zero,zero,4800
   4a7b4:	0004b018 	cmpnei	zero,zero,4800
   4a7b8:	0004b018 	cmpnei	zero,zero,4800
   4a7bc:	0004b018 	cmpnei	zero,zero,4800
   4a7c0:	0004a864 	muli	zero,zero,4769
   4a7c4:	0004b018 	cmpnei	zero,zero,4800
   4a7c8:	0004b018 	cmpnei	zero,zero,4800
   4a7cc:	0004afa4 	muli	zero,zero,4798
   4a7d0:	0004b018 	cmpnei	zero,zero,4800
   4a7d4:	0004b018 	cmpnei	zero,zero,4800
   4a7d8:	0004b018 	cmpnei	zero,zero,4800
   4a7dc:	0004b018 	cmpnei	zero,zero,4800
   4a7e0:	0004b018 	cmpnei	zero,zero,4800
   4a7e4:	0004b018 	cmpnei	zero,zero,4800
   4a7e8:	0004b018 	cmpnei	zero,zero,4800
   4a7ec:	0004b018 	cmpnei	zero,zero,4800
   4a7f0:	0004b018 	cmpnei	zero,zero,4800
   4a7f4:	0004b018 	cmpnei	zero,zero,4800
   4a7f8:	0004ae84 	movi	zero,4794
   4a7fc:	0004afdc 	xori	zero,zero,4799
   4a800:	0004b018 	cmpnei	zero,zero,4800
   4a804:	0004b018 	cmpnei	zero,zero,4800
   4a808:	0004b018 	cmpnei	zero,zero,4800
   4a80c:	0004aefc 	xorhi	zero,zero,4795
   4a810:	0004afdc 	xori	zero,zero,4799
   4a814:	0004b018 	cmpnei	zero,zero,4800
   4a818:	0004b018 	cmpnei	zero,zero,4800
   4a81c:	0004af08 	cmpgei	zero,zero,4796
   4a820:	0004b018 	cmpnei	zero,zero,4800
   4a824:	0004addc 	xori	zero,zero,4791
   4a828:	0004ab8c 	andi	zero,zero,4782
   4a82c:	0004aeb0 	cmpltui	zero,zero,4794
   4a830:	0004aef0 	cmpltui	zero,zero,4795
   4a834:	0004b018 	cmpnei	zero,zero,4800
   4a838:	0004ae30 	cmpltui	zero,zero,4792
   4a83c:	0004b018 	cmpnei	zero,zero,4800
   4a840:	0004a868 	cmpgeui	zero,zero,4769
   4a844:	0004b018 	cmpnei	zero,zero,4800
   4a848:	0004b018 	cmpnei	zero,zero,4800
   4a84c:	0004af1c 	xori	zero,zero,4796
   4a850:	84000204 	addi	r16,r16,8
   4a854:	da412417 	ldw	r9,1168(sp)
   4a858:	4c93883a 	add	r9,r9,r18
   4a85c:	da412415 	stw	r9,1168(sp)
   4a860:	003f8b06 	br	4a690 <___vfiprintf_internal_r+0x14c>
   4a864:	e7000414 	ori	fp,fp,16
   4a868:	e080080c 	andi	r2,fp,32
   4a86c:	1001431e 	bne	r2,zero,4ad7c <___vfiprintf_internal_r+0x838>
   4a870:	e080040c 	andi	r2,fp,16
   4a874:	10033826 	beq	r2,zero,4b558 <___vfiprintf_internal_r+0x1014>
   4a878:	da412317 	ldw	r9,1164(sp)
   4a87c:	4c400017 	ldw	r17,0(r9)
   4a880:	4a400104 	addi	r9,r9,4
   4a884:	0017883a 	mov	r11,zero
   4a888:	da412315 	stw	r9,1164(sp)
   4a88c:	00800044 	movi	r2,1
   4a890:	8809883a 	mov	r4,r17
   4a894:	d8011d85 	stb	zero,1142(sp)
   4a898:	5025883a 	mov	r18,r10
   4a89c:	002d883a 	mov	r22,zero
   4a8a0:	50000216 	blt	r10,zero,4a8ac <___vfiprintf_internal_r+0x368>
   4a8a4:	00ffdfc4 	movi	r3,-129
   4a8a8:	e0f8703a 	and	fp,fp,r3
   4a8ac:	10803fcc 	andi	r2,r2,255
   4a8b0:	2002101e 	bne	r4,zero,4b0f4 <___vfiprintf_internal_r+0xbb0>
   4a8b4:	50020f1e 	bne	r10,zero,4b0f4 <___vfiprintf_internal_r+0xbb0>
   4a8b8:	1002af1e 	bne	r2,zero,4b378 <___vfiprintf_internal_r+0xe34>
   4a8bc:	e080004c 	andi	r2,fp,1
   4a8c0:	1002ad26 	beq	r2,zero,4b378 <___vfiprintf_internal_r+0xe34>
   4a8c4:	dc812717 	ldw	r18,1180(sp)
   4a8c8:	00800c04 	movi	r2,48
   4a8cc:	d88109c5 	stb	r2,1063(sp)
   4a8d0:	dcc109c4 	addi	r19,sp,1063
   4a8d4:	9023883a 	mov	r17,r18
   4a8d8:	9280010e 	bge	r18,r10,4a8e0 <___vfiprintf_internal_r+0x39c>
   4a8dc:	5023883a 	mov	r17,r10
   4a8e0:	b5803fcc 	andi	r22,r22,255
   4a8e4:	b580201c 	xori	r22,r22,128
   4a8e8:	b5bfe004 	addi	r22,r22,-128
   4a8ec:	b0000126 	beq	r22,zero,4a8f4 <___vfiprintf_internal_r+0x3b0>
   4a8f0:	8c400044 	addi	r17,r17,1
   4a8f4:	e380008c 	andi	r14,fp,2
   4a8f8:	70000126 	beq	r14,zero,4a900 <___vfiprintf_internal_r+0x3bc>
   4a8fc:	8c400084 	addi	r17,r17,2
   4a900:	e580210c 	andi	r22,fp,132
   4a904:	b001db1e 	bne	r22,zero,4b074 <___vfiprintf_internal_r+0xb30>
   4a908:	da412017 	ldw	r9,1152(sp)
   4a90c:	4c47c83a 	sub	r3,r9,r17
   4a910:	00c1d80e 	bge	zero,r3,4b074 <___vfiprintf_internal_r+0xb30>
   4a914:	01c00404 	movi	r7,16
   4a918:	d8811c17 	ldw	r2,1136(sp)
   4a91c:	38c36f0e 	bge	r7,r3,4b6dc <___vfiprintf_internal_r+0x1198>
   4a920:	02400174 	movhi	r9,5
   4a924:	4a400504 	addi	r9,r9,20
   4a928:	8011883a 	mov	r8,r16
   4a92c:	d9811b17 	ldw	r6,1132(sp)
   4a930:	da412515 	stw	r9,1172(sp)
   4a934:	02c001c4 	movi	r11,7
   4a938:	da812815 	stw	r10,1184(sp)
   4a93c:	db812915 	stw	r14,1188(sp)
   4a940:	1821883a 	mov	r16,r3
   4a944:	00000506 	br	4a95c <___vfiprintf_internal_r+0x418>
   4a948:	31000084 	addi	r4,r6,2
   4a94c:	42000204 	addi	r8,r8,8
   4a950:	280d883a 	mov	r6,r5
   4a954:	843ffc04 	addi	r16,r16,-16
   4a958:	3c000d0e 	bge	r7,r16,4a990 <___vfiprintf_internal_r+0x44c>
   4a95c:	10800404 	addi	r2,r2,16
   4a960:	31400044 	addi	r5,r6,1
   4a964:	45000015 	stw	r20,0(r8)
   4a968:	41c00115 	stw	r7,4(r8)
   4a96c:	d8811c15 	stw	r2,1136(sp)
   4a970:	d9411b15 	stw	r5,1132(sp)
   4a974:	597ff40e 	bge	r11,r5,4a948 <___vfiprintf_internal_r+0x404>
   4a978:	1001b01e 	bne	r2,zero,4b03c <___vfiprintf_internal_r+0xaf8>
   4a97c:	843ffc04 	addi	r16,r16,-16
   4a980:	000d883a 	mov	r6,zero
   4a984:	01000044 	movi	r4,1
   4a988:	d811883a 	mov	r8,sp
   4a98c:	3c3ff316 	blt	r7,r16,4a95c <___vfiprintf_internal_r+0x418>
   4a990:	da812817 	ldw	r10,1184(sp)
   4a994:	db812917 	ldw	r14,1188(sp)
   4a998:	8007883a 	mov	r3,r16
   4a99c:	4021883a 	mov	r16,r8
   4a9a0:	da412517 	ldw	r9,1172(sp)
   4a9a4:	1885883a 	add	r2,r3,r2
   4a9a8:	80c00115 	stw	r3,4(r16)
   4a9ac:	82400015 	stw	r9,0(r16)
   4a9b0:	d8811c15 	stw	r2,1136(sp)
   4a9b4:	d9011b15 	stw	r4,1132(sp)
   4a9b8:	00c001c4 	movi	r3,7
   4a9bc:	19029316 	blt	r3,r4,4b40c <___vfiprintf_internal_r+0xec8>
   4a9c0:	d8c11d87 	ldb	r3,1142(sp)
   4a9c4:	84000204 	addi	r16,r16,8
   4a9c8:	21800044 	addi	r6,r4,1
   4a9cc:	1801ae1e 	bne	r3,zero,4b088 <___vfiprintf_internal_r+0xb44>
   4a9d0:	70000c26 	beq	r14,zero,4aa04 <___vfiprintf_internal_r+0x4c0>
   4a9d4:	d8c11d04 	addi	r3,sp,1140
   4a9d8:	10800084 	addi	r2,r2,2
   4a9dc:	80c00015 	stw	r3,0(r16)
   4a9e0:	00c00084 	movi	r3,2
   4a9e4:	80c00115 	stw	r3,4(r16)
   4a9e8:	d8811c15 	stw	r2,1136(sp)
   4a9ec:	d9811b15 	stw	r6,1132(sp)
   4a9f0:	00c001c4 	movi	r3,7
   4a9f4:	19824216 	blt	r3,r6,4b300 <___vfiprintf_internal_r+0xdbc>
   4a9f8:	3009883a 	mov	r4,r6
   4a9fc:	84000204 	addi	r16,r16,8
   4aa00:	31800044 	addi	r6,r6,1
   4aa04:	00c02004 	movi	r3,128
   4aa08:	b0c1fe26 	beq	r22,r3,4b204 <___vfiprintf_internal_r+0xcc0>
   4aa0c:	54adc83a 	sub	r22,r10,r18
   4aa10:	0580230e 	bge	zero,r22,4aaa0 <___vfiprintf_internal_r+0x55c>
   4aa14:	02400174 	movhi	r9,5
   4aa18:	4a400104 	addi	r9,r9,4
   4aa1c:	00c00404 	movi	r3,16
   4aa20:	da412515 	stw	r9,1172(sp)
   4aa24:	1d80140e 	bge	r3,r22,4aa78 <___vfiprintf_internal_r+0x534>
   4aa28:	01c001c4 	movi	r7,7
   4aa2c:	00000506 	br	4aa44 <___vfiprintf_internal_r+0x500>
   4aa30:	21800084 	addi	r6,r4,2
   4aa34:	84000204 	addi	r16,r16,8
   4aa38:	2809883a 	mov	r4,r5
   4aa3c:	b5bffc04 	addi	r22,r22,-16
   4aa40:	1d800d0e 	bge	r3,r22,4aa78 <___vfiprintf_internal_r+0x534>
   4aa44:	10800404 	addi	r2,r2,16
   4aa48:	21400044 	addi	r5,r4,1
   4aa4c:	85c00015 	stw	r23,0(r16)
   4aa50:	80c00115 	stw	r3,4(r16)
   4aa54:	d8811c15 	stw	r2,1136(sp)
   4aa58:	d9411b15 	stw	r5,1132(sp)
   4aa5c:	397ff40e 	bge	r7,r5,4aa30 <___vfiprintf_internal_r+0x4ec>
   4aa60:	1001961e 	bne	r2,zero,4b0bc <___vfiprintf_internal_r+0xb78>
   4aa64:	b5bffc04 	addi	r22,r22,-16
   4aa68:	0009883a 	mov	r4,zero
   4aa6c:	01800044 	movi	r6,1
   4aa70:	d821883a 	mov	r16,sp
   4aa74:	1dbff316 	blt	r3,r22,4aa44 <___vfiprintf_internal_r+0x500>
   4aa78:	d8c12517 	ldw	r3,1172(sp)
   4aa7c:	1585883a 	add	r2,r2,r22
   4aa80:	85800115 	stw	r22,4(r16)
   4aa84:	80c00015 	stw	r3,0(r16)
   4aa88:	d8811c15 	stw	r2,1136(sp)
   4aa8c:	d9811b15 	stw	r6,1132(sp)
   4aa90:	00c001c4 	movi	r3,7
   4aa94:	1981d116 	blt	r3,r6,4b1dc <___vfiprintf_internal_r+0xc98>
   4aa98:	84000204 	addi	r16,r16,8
   4aa9c:	31800044 	addi	r6,r6,1
   4aaa0:	9085883a 	add	r2,r18,r2
   4aaa4:	84c00015 	stw	r19,0(r16)
   4aaa8:	84800115 	stw	r18,4(r16)
   4aaac:	d8811c15 	stw	r2,1136(sp)
   4aab0:	d9811b15 	stw	r6,1132(sp)
   4aab4:	00c001c4 	movi	r3,7
   4aab8:	1981d00e 	bge	r3,r6,4b1fc <___vfiprintf_internal_r+0xcb8>
   4aabc:	1002581e 	bne	r2,zero,4b420 <___vfiprintf_internal_r+0xedc>
   4aac0:	d8011b15 	stw	zero,1132(sp)
   4aac4:	d821883a 	mov	r16,sp
   4aac8:	e280010c 	andi	r10,fp,4
   4aacc:	5001a426 	beq	r10,zero,4b160 <___vfiprintf_internal_r+0xc1c>
   4aad0:	da412017 	ldw	r9,1152(sp)
   4aad4:	4c65c83a 	sub	r18,r9,r17
   4aad8:	0481a10e 	bge	zero,r18,4b160 <___vfiprintf_internal_r+0xc1c>
   4aadc:	02000404 	movi	r8,16
   4aae0:	4483100e 	bge	r8,r18,4b724 <___vfiprintf_internal_r+0x11e0>
   4aae4:	02400174 	movhi	r9,5
   4aae8:	4a400504 	addi	r9,r9,20
   4aaec:	d9011b17 	ldw	r4,1132(sp)
   4aaf0:	da412515 	stw	r9,1172(sp)
   4aaf4:	4039883a 	mov	fp,r8
   4aaf8:	04c001c4 	movi	r19,7
   4aafc:	dd812117 	ldw	r22,1156(sp)
   4ab00:	00000506 	br	4ab18 <___vfiprintf_internal_r+0x5d4>
   4ab04:	21400084 	addi	r5,r4,2
   4ab08:	84000204 	addi	r16,r16,8
   4ab0c:	1809883a 	mov	r4,r3
   4ab10:	94bffc04 	addi	r18,r18,-16
   4ab14:	e4800d0e 	bge	fp,r18,4ab4c <___vfiprintf_internal_r+0x608>
   4ab18:	10800404 	addi	r2,r2,16
   4ab1c:	20c00044 	addi	r3,r4,1
   4ab20:	85000015 	stw	r20,0(r16)
   4ab24:	87000115 	stw	fp,4(r16)
   4ab28:	d8811c15 	stw	r2,1136(sp)
   4ab2c:	d8c11b15 	stw	r3,1132(sp)
   4ab30:	98fff40e 	bge	r19,r3,4ab04 <___vfiprintf_internal_r+0x5c0>
   4ab34:	10019f1e 	bne	r2,zero,4b1b4 <___vfiprintf_internal_r+0xc70>
   4ab38:	94bffc04 	addi	r18,r18,-16
   4ab3c:	0009883a 	mov	r4,zero
   4ab40:	01400044 	movi	r5,1
   4ab44:	d821883a 	mov	r16,sp
   4ab48:	e4bff316 	blt	fp,r18,4ab18 <___vfiprintf_internal_r+0x5d4>
   4ab4c:	d8c12517 	ldw	r3,1172(sp)
   4ab50:	1485883a 	add	r2,r2,r18
   4ab54:	84800115 	stw	r18,4(r16)
   4ab58:	80c00015 	stw	r3,0(r16)
   4ab5c:	d8811c15 	stw	r2,1136(sp)
   4ab60:	d9411b15 	stw	r5,1132(sp)
   4ab64:	00c001c4 	movi	r3,7
   4ab68:	19417d0e 	bge	r3,r5,4b160 <___vfiprintf_internal_r+0xc1c>
   4ab6c:	1001761e 	bne	r2,zero,4b148 <___vfiprintf_internal_r+0xc04>
   4ab70:	da412017 	ldw	r9,1152(sp)
   4ab74:	8a42b016 	blt	r17,r9,4b638 <___vfiprintf_internal_r+0x10f4>
   4ab78:	da412417 	ldw	r9,1168(sp)
   4ab7c:	4c53883a 	add	r9,r9,r17
   4ab80:	da412415 	stw	r9,1168(sp)
   4ab84:	00018206 	br	4b190 <___vfiprintf_internal_r+0xc4c>
   4ab88:	e7000414 	ori	fp,fp,16
   4ab8c:	e080080c 	andi	r2,fp,32
   4ab90:	10005126 	beq	r2,zero,4acd8 <___vfiprintf_internal_r+0x794>
   4ab94:	da412317 	ldw	r9,1164(sp)
   4ab98:	0005883a 	mov	r2,zero
   4ab9c:	4c400017 	ldw	r17,0(r9)
   4aba0:	4ac00117 	ldw	r11,4(r9)
   4aba4:	4a400204 	addi	r9,r9,8
   4aba8:	da412315 	stw	r9,1164(sp)
   4abac:	8ac8b03a 	or	r4,r17,r11
   4abb0:	d8011d85 	stb	zero,1142(sp)
   4abb4:	5025883a 	mov	r18,r10
   4abb8:	002d883a 	mov	r22,zero
   4abbc:	003f3806 	br	4a8a0 <___vfiprintf_internal_r+0x35c>
   4abc0:	d9012117 	ldw	r4,1156(sp)
   4abc4:	980b883a 	mov	r5,r19
   4abc8:	00454240 	call	45424 <__swsetup_r>
   4abcc:	10002c1e 	bne	r2,zero,4ac80 <___vfiprintf_internal_r+0x73c>
   4abd0:	9880030b 	ldhu	r2,12(r19)
   4abd4:	01000284 	movi	r4,10
   4abd8:	1007883a 	mov	r3,r2
   4abdc:	18c0068c 	andi	r3,r3,26
   4abe0:	193e7c1e 	bne	r3,r4,4a5d4 <___vfiprintf_internal_r+0x90>
   4abe4:	98c0038b 	ldhu	r3,14(r19)
   4abe8:	193fffcc 	andi	r4,r3,65535
   4abec:	2120001c 	xori	r4,r4,32768
   4abf0:	21200004 	addi	r4,r4,-32768
   4abf4:	203e7716 	blt	r4,zero,4a5d4 <___vfiprintf_internal_r+0x90>
   4abf8:	9b001917 	ldw	r12,100(r19)
   4abfc:	9ac00717 	ldw	r11,28(r19)
   4ac00:	9a800917 	ldw	r10,36(r19)
   4ac04:	d9012117 	ldw	r4,1156(sp)
   4ac08:	d9c12317 	ldw	r7,1164(sp)
   4ac0c:	02410004 	movi	r9,1024
   4ac10:	10bfff4c 	andi	r2,r2,65533
   4ac14:	da4b883a 	add	r5,sp,r9
   4ac18:	b00d883a 	mov	r6,r22
   4ac1c:	d881030d 	sth	r2,1036(sp)
   4ac20:	db011915 	stw	r12,1124(sp)
   4ac24:	d8c1038d 	sth	r3,1038(sp)
   4ac28:	dac10715 	stw	r11,1052(sp)
   4ac2c:	da810915 	stw	r10,1060(sp)
   4ac30:	dec10015 	stw	sp,1024(sp)
   4ac34:	dec10415 	stw	sp,1040(sp)
   4ac38:	da410215 	stw	r9,1032(sp)
   4ac3c:	da410515 	stw	r9,1044(sp)
   4ac40:	d8010615 	stw	zero,1048(sp)
   4ac44:	004a5440 	call	4a544 <___vfiprintf_internal_r>
   4ac48:	1021883a 	mov	r16,r2
   4ac4c:	10000416 	blt	r2,zero,4ac60 <___vfiprintf_internal_r+0x71c>
   4ac50:	d9012117 	ldw	r4,1156(sp)
   4ac54:	d9410004 	addi	r5,sp,1024
   4ac58:	0046d9c0 	call	46d9c <_fflush_r>
   4ac5c:	1002c31e 	bne	r2,zero,4b76c <___vfiprintf_internal_r+0x1228>
   4ac60:	d881030b 	ldhu	r2,1036(sp)
   4ac64:	1080100c 	andi	r2,r2,64
   4ac68:	10000326 	beq	r2,zero,4ac78 <___vfiprintf_internal_r+0x734>
   4ac6c:	9880030b 	ldhu	r2,12(r19)
   4ac70:	10801014 	ori	r2,r2,64
   4ac74:	9880030d 	sth	r2,12(r19)
   4ac78:	8005883a 	mov	r2,r16
   4ac7c:	00000106 	br	4ac84 <___vfiprintf_internal_r+0x740>
   4ac80:	00bfffc4 	movi	r2,-1
   4ac84:	dfc13517 	ldw	ra,1236(sp)
   4ac88:	df013417 	ldw	fp,1232(sp)
   4ac8c:	ddc13317 	ldw	r23,1228(sp)
   4ac90:	dd813217 	ldw	r22,1224(sp)
   4ac94:	dd413117 	ldw	r21,1220(sp)
   4ac98:	dd013017 	ldw	r20,1216(sp)
   4ac9c:	dcc12f17 	ldw	r19,1212(sp)
   4aca0:	dc812e17 	ldw	r18,1208(sp)
   4aca4:	dc412d17 	ldw	r17,1204(sp)
   4aca8:	dc012c17 	ldw	r16,1200(sp)
   4acac:	dec13604 	addi	sp,sp,1240
   4acb0:	f800283a 	ret
   4acb4:	00470a80 	call	470a8 <__sinit>
   4acb8:	003e3406 	br	4a58c <___vfiprintf_internal_r+0x48>
   4acbc:	da412017 	ldw	r9,1152(sp)
   4acc0:	d8812315 	stw	r2,1164(sp)
   4acc4:	0253c83a 	sub	r9,zero,r9
   4acc8:	da412015 	stw	r9,1152(sp)
   4accc:	e7000114 	ori	fp,fp,4
   4acd0:	a8c00007 	ldb	r3,0(r21)
   4acd4:	003e7b06 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4acd8:	e080040c 	andi	r2,fp,16
   4acdc:	10021926 	beq	r2,zero,4b544 <___vfiprintf_internal_r+0x1000>
   4ace0:	da412317 	ldw	r9,1164(sp)
   4ace4:	4c400017 	ldw	r17,0(r9)
   4ace8:	4a400104 	addi	r9,r9,4
   4acec:	0017883a 	mov	r11,zero
   4acf0:	da412315 	stw	r9,1164(sp)
   4acf4:	0005883a 	mov	r2,zero
   4acf8:	8809883a 	mov	r4,r17
   4acfc:	003fac06 	br	4abb0 <___vfiprintf_internal_r+0x66c>
   4ad00:	e7002014 	ori	fp,fp,128
   4ad04:	a8c00007 	ldb	r3,0(r21)
   4ad08:	003e6e06 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4ad0c:	d8012015 	stw	zero,1152(sp)
   4ad10:	18bff404 	addi	r2,r3,-48
   4ad14:	da412017 	ldw	r9,1152(sp)
   4ad18:	a8c00007 	ldb	r3,0(r21)
   4ad1c:	4ac002a4 	muli	r11,r9,10
   4ad20:	aa400044 	addi	r9,r21,1
   4ad24:	482b883a 	mov	r21,r9
   4ad28:	5885883a 	add	r2,r11,r2
   4ad2c:	d8812015 	stw	r2,1152(sp)
   4ad30:	18bff404 	addi	r2,r3,-48
   4ad34:	28bff72e 	bgeu	r5,r2,4ad14 <___vfiprintf_internal_r+0x7d0>
   4ad38:	003e6306 	br	4a6c8 <___vfiprintf_internal_r+0x184>
   4ad3c:	e7000414 	ori	fp,fp,16
   4ad40:	d9811d85 	stb	r6,1142(sp)
   4ad44:	e080080c 	andi	r2,fp,32
   4ad48:	1000a726 	beq	r2,zero,4afe8 <___vfiprintf_internal_r+0xaa4>
   4ad4c:	da412317 	ldw	r9,1164(sp)
   4ad50:	48800117 	ldw	r2,4(r9)
   4ad54:	4c400017 	ldw	r17,0(r9)
   4ad58:	4a400204 	addi	r9,r9,8
   4ad5c:	da412315 	stw	r9,1164(sp)
   4ad60:	1017883a 	mov	r11,r2
   4ad64:	1001eb16 	blt	r2,zero,4b514 <___vfiprintf_internal_r+0xfd0>
   4ad68:	dd811d83 	ldbu	r22,1142(sp)
   4ad6c:	5025883a 	mov	r18,r10
   4ad70:	00800044 	movi	r2,1
   4ad74:	8ac8b03a 	or	r4,r17,r11
   4ad78:	003ec906 	br	4a8a0 <___vfiprintf_internal_r+0x35c>
   4ad7c:	da412317 	ldw	r9,1164(sp)
   4ad80:	00800044 	movi	r2,1
   4ad84:	4c400017 	ldw	r17,0(r9)
   4ad88:	4ac00117 	ldw	r11,4(r9)
   4ad8c:	4a400204 	addi	r9,r9,8
   4ad90:	da412315 	stw	r9,1164(sp)
   4ad94:	8ac8b03a 	or	r4,r17,r11
   4ad98:	003f8506 	br	4abb0 <___vfiprintf_internal_r+0x66c>
   4ad9c:	a8c00007 	ldb	r3,0(r21)
   4ada0:	aa400044 	addi	r9,r21,1
   4ada4:	1a027326 	beq	r3,r8,4b774 <___vfiprintf_internal_r+0x1230>
   4ada8:	18bff404 	addi	r2,r3,-48
   4adac:	482b883a 	mov	r21,r9
   4adb0:	0015883a 	mov	r10,zero
   4adb4:	28be4436 	bltu	r5,r2,4a6c8 <___vfiprintf_internal_r+0x184>
   4adb8:	a8c00007 	ldb	r3,0(r21)
   4adbc:	528002a4 	muli	r10,r10,10
   4adc0:	ad400044 	addi	r21,r21,1
   4adc4:	1295883a 	add	r10,r2,r10
   4adc8:	18bff404 	addi	r2,r3,-48
   4adcc:	28bffa2e 	bgeu	r5,r2,4adb8 <___vfiprintf_internal_r+0x874>
   4add0:	503e3d0e 	bge	r10,zero,4a6c8 <___vfiprintf_internal_r+0x184>
   4add4:	02bfffc4 	movi	r10,-1
   4add8:	003e3b06 	br	4a6c8 <___vfiprintf_internal_r+0x184>
   4addc:	d9811d85 	stb	r6,1142(sp)
   4ade0:	e080080c 	andi	r2,fp,32
   4ade4:	1001e326 	beq	r2,zero,4b574 <___vfiprintf_internal_r+0x1030>
   4ade8:	da412317 	ldw	r9,1164(sp)
   4adec:	48800017 	ldw	r2,0(r9)
   4adf0:	da412417 	ldw	r9,1168(sp)
   4adf4:	4807d7fa 	srai	r3,r9,31
   4adf8:	da412317 	ldw	r9,1164(sp)
   4adfc:	10c00115 	stw	r3,4(r2)
   4ae00:	4a400104 	addi	r9,r9,4
   4ae04:	da412315 	stw	r9,1164(sp)
   4ae08:	da412417 	ldw	r9,1168(sp)
   4ae0c:	12400015 	stw	r9,0(r2)
   4ae10:	003e0306 	br	4a620 <___vfiprintf_internal_r+0xdc>
   4ae14:	30803fcc 	andi	r2,r6,255
   4ae18:	1080201c 	xori	r2,r2,128
   4ae1c:	10bfe004 	addi	r2,r2,-128
   4ae20:	1001d21e 	bne	r2,zero,4b56c <___vfiprintf_internal_r+0x1028>
   4ae24:	01800804 	movi	r6,32
   4ae28:	a8c00007 	ldb	r3,0(r21)
   4ae2c:	003e2506 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4ae30:	da412317 	ldw	r9,1164(sp)
   4ae34:	d8011d85 	stb	zero,1142(sp)
   4ae38:	4cc00017 	ldw	r19,0(r9)
   4ae3c:	48c00104 	addi	r3,r9,4
   4ae40:	98022c26 	beq	r19,zero,4b6f4 <___vfiprintf_internal_r+0x11b0>
   4ae44:	9809883a 	mov	r4,r19
   4ae48:	50021016 	blt	r10,zero,4b68c <___vfiprintf_internal_r+0x1148>
   4ae4c:	500d883a 	mov	r6,r10
   4ae50:	000b883a 	mov	r5,zero
   4ae54:	d8c12a15 	stw	r3,1192(sp)
   4ae58:	da812b15 	stw	r10,1196(sp)
   4ae5c:	00488040 	call	48804 <memchr>
   4ae60:	d8c12a17 	ldw	r3,1192(sp)
   4ae64:	da812b17 	ldw	r10,1196(sp)
   4ae68:	10023426 	beq	r2,zero,4b73c <___vfiprintf_internal_r+0x11f8>
   4ae6c:	14e5c83a 	sub	r18,r2,r19
   4ae70:	5481f316 	blt	r10,r18,4b640 <___vfiprintf_internal_r+0x10fc>
   4ae74:	dd811d83 	ldbu	r22,1142(sp)
   4ae78:	d8c12315 	stw	r3,1164(sp)
   4ae7c:	0015883a 	mov	r10,zero
   4ae80:	003e9406 	br	4a8d4 <___vfiprintf_internal_r+0x390>
   4ae84:	da412317 	ldw	r9,1164(sp)
   4ae88:	04400044 	movi	r17,1
   4ae8c:	d8011d85 	stb	zero,1142(sp)
   4ae90:	48800017 	ldw	r2,0(r9)
   4ae94:	4a400104 	addi	r9,r9,4
   4ae98:	da412315 	stw	r9,1164(sp)
   4ae9c:	d8810005 	stb	r2,1024(sp)
   4aea0:	8825883a 	mov	r18,r17
   4aea4:	dcc10004 	addi	r19,sp,1024
   4aea8:	0015883a 	mov	r10,zero
   4aeac:	003e9106 	br	4a8f4 <___vfiprintf_internal_r+0x3b0>
   4aeb0:	da412317 	ldw	r9,1164(sp)
   4aeb4:	00800c04 	movi	r2,48
   4aeb8:	d8811d05 	stb	r2,1140(sp)
   4aebc:	4c400017 	ldw	r17,0(r9)
   4aec0:	4a400104 	addi	r9,r9,4
   4aec4:	00801e04 	movi	r2,120
   4aec8:	da412315 	stw	r9,1164(sp)
   4aecc:	02400174 	movhi	r9,5
   4aed0:	4a7fa004 	addi	r9,r9,-384
   4aed4:	d8811d45 	stb	r2,1141(sp)
   4aed8:	0017883a 	mov	r11,zero
   4aedc:	e7000094 	ori	fp,fp,2
   4aee0:	da412615 	stw	r9,1176(sp)
   4aee4:	00800084 	movi	r2,2
   4aee8:	8809883a 	mov	r4,r17
   4aeec:	003f3006 	br	4abb0 <___vfiprintf_internal_r+0x66c>
   4aef0:	e7000814 	ori	fp,fp,32
   4aef4:	a8c00007 	ldb	r3,0(r21)
   4aef8:	003df206 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4aefc:	e7001014 	ori	fp,fp,64
   4af00:	a8c00007 	ldb	r3,0(r21)
   4af04:	003def06 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4af08:	a8c00007 	ldb	r3,0(r21)
   4af0c:	a805883a 	mov	r2,r21
   4af10:	19c1da26 	beq	r3,r7,4b67c <___vfiprintf_internal_r+0x1138>
   4af14:	e7000414 	ori	fp,fp,16
   4af18:	003dea06 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4af1c:	02400174 	movhi	r9,5
   4af20:	4a7fa004 	addi	r9,r9,-384
   4af24:	d9811d85 	stb	r6,1142(sp)
   4af28:	da412615 	stw	r9,1176(sp)
   4af2c:	e080080c 	andi	r2,fp,32
   4af30:	10002226 	beq	r2,zero,4afbc <___vfiprintf_internal_r+0xa78>
   4af34:	da412317 	ldw	r9,1164(sp)
   4af38:	4c400017 	ldw	r17,0(r9)
   4af3c:	4ac00117 	ldw	r11,4(r9)
   4af40:	4a400204 	addi	r9,r9,8
   4af44:	da412315 	stw	r9,1164(sp)
   4af48:	e080004c 	andi	r2,fp,1
   4af4c:	10013c26 	beq	r2,zero,4b440 <___vfiprintf_internal_r+0xefc>
   4af50:	8ac8b03a 	or	r4,r17,r11
   4af54:	20017926 	beq	r4,zero,4b53c <___vfiprintf_internal_r+0xff8>
   4af58:	00800c04 	movi	r2,48
   4af5c:	d8811d05 	stb	r2,1140(sp)
   4af60:	d8c11d45 	stb	r3,1141(sp)
   4af64:	e7000094 	ori	fp,fp,2
   4af68:	00800084 	movi	r2,2
   4af6c:	003f1006 	br	4abb0 <___vfiprintf_internal_r+0x66c>
   4af70:	da412317 	ldw	r9,1164(sp)
   4af74:	4a400017 	ldw	r9,0(r9)
   4af78:	da412015 	stw	r9,1152(sp)
   4af7c:	da412317 	ldw	r9,1164(sp)
   4af80:	48800104 	addi	r2,r9,4
   4af84:	da412017 	ldw	r9,1152(sp)
   4af88:	483f4c16 	blt	r9,zero,4acbc <___vfiprintf_internal_r+0x778>
   4af8c:	d8812315 	stw	r2,1164(sp)
   4af90:	a8c00007 	ldb	r3,0(r21)
   4af94:	003dcb06 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4af98:	e7000054 	ori	fp,fp,1
   4af9c:	a8c00007 	ldb	r3,0(r21)
   4afa0:	003dc806 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4afa4:	02400174 	movhi	r9,5
   4afa8:	4a7f9b04 	addi	r9,r9,-404
   4afac:	d9811d85 	stb	r6,1142(sp)
   4afb0:	da412615 	stw	r9,1176(sp)
   4afb4:	e080080c 	andi	r2,fp,32
   4afb8:	103fde1e 	bne	r2,zero,4af34 <___vfiprintf_internal_r+0x9f0>
   4afbc:	e080040c 	andi	r2,fp,16
   4afc0:	10017e26 	beq	r2,zero,4b5bc <___vfiprintf_internal_r+0x1078>
   4afc4:	da412317 	ldw	r9,1164(sp)
   4afc8:	0017883a 	mov	r11,zero
   4afcc:	4c400017 	ldw	r17,0(r9)
   4afd0:	4a400104 	addi	r9,r9,4
   4afd4:	da412315 	stw	r9,1164(sp)
   4afd8:	003fdb06 	br	4af48 <___vfiprintf_internal_r+0xa04>
   4afdc:	d9811d85 	stb	r6,1142(sp)
   4afe0:	e080080c 	andi	r2,fp,32
   4afe4:	103f591e 	bne	r2,zero,4ad4c <___vfiprintf_internal_r+0x808>
   4afe8:	e080040c 	andi	r2,fp,16
   4afec:	10017b26 	beq	r2,zero,4b5dc <___vfiprintf_internal_r+0x1098>
   4aff0:	da412317 	ldw	r9,1164(sp)
   4aff4:	4c400017 	ldw	r17,0(r9)
   4aff8:	4a400104 	addi	r9,r9,4
   4affc:	da412315 	stw	r9,1164(sp)
   4b000:	8817d7fa 	srai	r11,r17,31
   4b004:	5805883a 	mov	r2,r11
   4b008:	003f5606 	br	4ad64 <___vfiprintf_internal_r+0x820>
   4b00c:	01800ac4 	movi	r6,43
   4b010:	a8c00007 	ldb	r3,0(r21)
   4b014:	003dab06 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4b018:	d9811d85 	stb	r6,1142(sp)
   4b01c:	18018f26 	beq	r3,zero,4b65c <___vfiprintf_internal_r+0x1118>
   4b020:	04400044 	movi	r17,1
   4b024:	d8c10005 	stb	r3,1024(sp)
   4b028:	d8011d85 	stb	zero,1142(sp)
   4b02c:	8825883a 	mov	r18,r17
   4b030:	dcc10004 	addi	r19,sp,1024
   4b034:	0015883a 	mov	r10,zero
   4b038:	003e2e06 	br	4a8f4 <___vfiprintf_internal_r+0x3b0>
   4b03c:	d9012117 	ldw	r4,1156(sp)
   4b040:	d9412217 	ldw	r5,1160(sp)
   4b044:	d9811a04 	addi	r6,sp,1128
   4b048:	d9c12b15 	stw	r7,1196(sp)
   4b04c:	dac12a15 	stw	r11,1192(sp)
   4b050:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b054:	d9c12b17 	ldw	r7,1196(sp)
   4b058:	dac12a17 	ldw	r11,1192(sp)
   4b05c:	10004f1e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b060:	d9811b17 	ldw	r6,1132(sp)
   4b064:	d8811c17 	ldw	r2,1136(sp)
   4b068:	d811883a 	mov	r8,sp
   4b06c:	31000044 	addi	r4,r6,1
   4b070:	003e3806 	br	4a954 <___vfiprintf_internal_r+0x410>
   4b074:	d9011b17 	ldw	r4,1132(sp)
   4b078:	d8811c17 	ldw	r2,1136(sp)
   4b07c:	21800044 	addi	r6,r4,1
   4b080:	d8c11d87 	ldb	r3,1142(sp)
   4b084:	183e5226 	beq	r3,zero,4a9d0 <___vfiprintf_internal_r+0x48c>
   4b088:	00c00044 	movi	r3,1
   4b08c:	d9011d84 	addi	r4,sp,1142
   4b090:	10c5883a 	add	r2,r2,r3
   4b094:	81000015 	stw	r4,0(r16)
   4b098:	80c00115 	stw	r3,4(r16)
   4b09c:	d8811c15 	stw	r2,1136(sp)
   4b0a0:	d9811b15 	stw	r6,1132(sp)
   4b0a4:	010001c4 	movi	r4,7
   4b0a8:	21809016 	blt	r4,r6,4b2ec <___vfiprintf_internal_r+0xda8>
   4b0ac:	3009883a 	mov	r4,r6
   4b0b0:	84000204 	addi	r16,r16,8
   4b0b4:	30cd883a 	add	r6,r6,r3
   4b0b8:	003e4506 	br	4a9d0 <___vfiprintf_internal_r+0x48c>
   4b0bc:	d9012117 	ldw	r4,1156(sp)
   4b0c0:	d9412217 	ldw	r5,1160(sp)
   4b0c4:	d9811a04 	addi	r6,sp,1128
   4b0c8:	d8c12a15 	stw	r3,1192(sp)
   4b0cc:	d9c12b15 	stw	r7,1196(sp)
   4b0d0:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b0d4:	d8c12a17 	ldw	r3,1192(sp)
   4b0d8:	d9c12b17 	ldw	r7,1196(sp)
   4b0dc:	10002f1e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b0e0:	d9011b17 	ldw	r4,1132(sp)
   4b0e4:	d8811c17 	ldw	r2,1136(sp)
   4b0e8:	d821883a 	mov	r16,sp
   4b0ec:	21800044 	addi	r6,r4,1
   4b0f0:	003e5206 	br	4aa3c <___vfiprintf_internal_r+0x4f8>
   4b0f4:	00c00044 	movi	r3,1
   4b0f8:	10c0a126 	beq	r2,r3,4b380 <___vfiprintf_internal_r+0xe3c>
   4b0fc:	00c00084 	movi	r3,2
   4b100:	10c0841e 	bne	r2,r3,4b314 <___vfiprintf_internal_r+0xdd0>
   4b104:	d9412617 	ldw	r5,1176(sp)
   4b108:	d88109c4 	addi	r2,sp,1063
   4b10c:	88c003cc 	andi	r3,r17,15
   4b110:	5808973a 	slli	r4,r11,28
   4b114:	28c7883a 	add	r3,r5,r3
   4b118:	8822d13a 	srli	r17,r17,4
   4b11c:	18c00003 	ldbu	r3,0(r3)
   4b120:	5816d13a 	srli	r11,r11,4
   4b124:	2462b03a 	or	r17,r4,r17
   4b128:	10c00005 	stb	r3,0(r2)
   4b12c:	8ac6b03a 	or	r3,r17,r11
   4b130:	1027883a 	mov	r19,r2
   4b134:	10bfffc4 	addi	r2,r2,-1
   4b138:	183ff41e 	bne	r3,zero,4b10c <___vfiprintf_internal_r+0xbc8>
   4b13c:	da411f17 	ldw	r9,1148(sp)
   4b140:	4ce5c83a 	sub	r18,r9,r19
   4b144:	003de306 	br	4a8d4 <___vfiprintf_internal_r+0x390>
   4b148:	d9012117 	ldw	r4,1156(sp)
   4b14c:	d9412217 	ldw	r5,1160(sp)
   4b150:	d9811a04 	addi	r6,sp,1128
   4b154:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b158:	1000101e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b15c:	d8811c17 	ldw	r2,1136(sp)
   4b160:	da412017 	ldw	r9,1152(sp)
   4b164:	8a40010e 	bge	r17,r9,4b16c <___vfiprintf_internal_r+0xc28>
   4b168:	4823883a 	mov	r17,r9
   4b16c:	da412417 	ldw	r9,1168(sp)
   4b170:	4c53883a 	add	r9,r9,r17
   4b174:	da412415 	stw	r9,1168(sp)
   4b178:	10000526 	beq	r2,zero,4b190 <___vfiprintf_internal_r+0xc4c>
   4b17c:	d9012117 	ldw	r4,1156(sp)
   4b180:	d9412217 	ldw	r5,1160(sp)
   4b184:	d9811a04 	addi	r6,sp,1128
   4b188:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b18c:	1000031e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b190:	d8011b15 	stw	zero,1132(sp)
   4b194:	d821883a 	mov	r16,sp
   4b198:	003d2106 	br	4a620 <___vfiprintf_internal_r+0xdc>
   4b19c:	dcc12217 	ldw	r19,1160(sp)
   4b1a0:	9880030b 	ldhu	r2,12(r19)
   4b1a4:	1080100c 	andi	r2,r2,64
   4b1a8:	103eb51e 	bne	r2,zero,4ac80 <___vfiprintf_internal_r+0x73c>
   4b1ac:	d8812417 	ldw	r2,1168(sp)
   4b1b0:	003eb406 	br	4ac84 <___vfiprintf_internal_r+0x740>
   4b1b4:	d9412217 	ldw	r5,1160(sp)
   4b1b8:	b009883a 	mov	r4,r22
   4b1bc:	d9811a04 	addi	r6,sp,1128
   4b1c0:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b1c4:	103ff51e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b1c8:	d9011b17 	ldw	r4,1132(sp)
   4b1cc:	d8811c17 	ldw	r2,1136(sp)
   4b1d0:	d821883a 	mov	r16,sp
   4b1d4:	21400044 	addi	r5,r4,1
   4b1d8:	003e4d06 	br	4ab10 <___vfiprintf_internal_r+0x5cc>
   4b1dc:	1000c11e 	bne	r2,zero,4b4e4 <___vfiprintf_internal_r+0xfa0>
   4b1e0:	00800044 	movi	r2,1
   4b1e4:	d8811b15 	stw	r2,1132(sp)
   4b1e8:	dcc00015 	stw	r19,0(sp)
   4b1ec:	dc800115 	stw	r18,4(sp)
   4b1f0:	dc811c15 	stw	r18,1136(sp)
   4b1f4:	9005883a 	mov	r2,r18
   4b1f8:	d821883a 	mov	r16,sp
   4b1fc:	84000204 	addi	r16,r16,8
   4b200:	003e3106 	br	4aac8 <___vfiprintf_internal_r+0x584>
   4b204:	da412017 	ldw	r9,1152(sp)
   4b208:	4c6dc83a 	sub	r22,r9,r17
   4b20c:	05bdff0e 	bge	zero,r22,4aa0c <___vfiprintf_internal_r+0x4c8>
   4b210:	01c00404 	movi	r7,16
   4b214:	3d814e0e 	bge	r7,r22,4b750 <___vfiprintf_internal_r+0x120c>
   4b218:	00c00174 	movhi	r3,5
   4b21c:	18c00104 	addi	r3,r3,4
   4b220:	800b883a 	mov	r5,r16
   4b224:	d8c12515 	stw	r3,1172(sp)
   4b228:	02c001c4 	movi	r11,7
   4b22c:	5021883a 	mov	r16,r10
   4b230:	00000506 	br	4b248 <___vfiprintf_internal_r+0xd04>
   4b234:	23800084 	addi	r14,r4,2
   4b238:	29400204 	addi	r5,r5,8
   4b23c:	1809883a 	mov	r4,r3
   4b240:	b5bffc04 	addi	r22,r22,-16
   4b244:	3d800d0e 	bge	r7,r22,4b27c <___vfiprintf_internal_r+0xd38>
   4b248:	10800404 	addi	r2,r2,16
   4b24c:	20c00044 	addi	r3,r4,1
   4b250:	2dc00015 	stw	r23,0(r5)
   4b254:	29c00115 	stw	r7,4(r5)
   4b258:	d8811c15 	stw	r2,1136(sp)
   4b25c:	d8c11b15 	stw	r3,1132(sp)
   4b260:	58fff40e 	bge	r11,r3,4b234 <___vfiprintf_internal_r+0xcf0>
   4b264:	1000131e 	bne	r2,zero,4b2b4 <___vfiprintf_internal_r+0xd70>
   4b268:	b5bffc04 	addi	r22,r22,-16
   4b26c:	0009883a 	mov	r4,zero
   4b270:	03800044 	movi	r14,1
   4b274:	d80b883a 	mov	r5,sp
   4b278:	3dbff316 	blt	r7,r22,4b248 <___vfiprintf_internal_r+0xd04>
   4b27c:	8015883a 	mov	r10,r16
   4b280:	2821883a 	mov	r16,r5
   4b284:	d8c12517 	ldw	r3,1172(sp)
   4b288:	1585883a 	add	r2,r2,r22
   4b28c:	85800115 	stw	r22,4(r16)
   4b290:	80c00015 	stw	r3,0(r16)
   4b294:	d8811c15 	stw	r2,1136(sp)
   4b298:	db811b15 	stw	r14,1132(sp)
   4b29c:	00c001c4 	movi	r3,7
   4b2a0:	1b808b16 	blt	r3,r14,4b4d0 <___vfiprintf_internal_r+0xf8c>
   4b2a4:	84000204 	addi	r16,r16,8
   4b2a8:	71800044 	addi	r6,r14,1
   4b2ac:	7009883a 	mov	r4,r14
   4b2b0:	003dd606 	br	4aa0c <___vfiprintf_internal_r+0x4c8>
   4b2b4:	d9012117 	ldw	r4,1156(sp)
   4b2b8:	d9412217 	ldw	r5,1160(sp)
   4b2bc:	d9811a04 	addi	r6,sp,1128
   4b2c0:	d9c12b15 	stw	r7,1196(sp)
   4b2c4:	dac12a15 	stw	r11,1192(sp)
   4b2c8:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b2cc:	d9c12b17 	ldw	r7,1196(sp)
   4b2d0:	dac12a17 	ldw	r11,1192(sp)
   4b2d4:	103fb11e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b2d8:	d9011b17 	ldw	r4,1132(sp)
   4b2dc:	d8811c17 	ldw	r2,1136(sp)
   4b2e0:	d80b883a 	mov	r5,sp
   4b2e4:	23800044 	addi	r14,r4,1
   4b2e8:	003fd506 	br	4b240 <___vfiprintf_internal_r+0xcfc>
   4b2ec:	10005e1e 	bne	r2,zero,4b468 <___vfiprintf_internal_r+0xf24>
   4b2f0:	0009883a 	mov	r4,zero
   4b2f4:	180d883a 	mov	r6,r3
   4b2f8:	d821883a 	mov	r16,sp
   4b2fc:	003db406 	br	4a9d0 <___vfiprintf_internal_r+0x48c>
   4b300:	1000671e 	bne	r2,zero,4b4a0 <___vfiprintf_internal_r+0xf5c>
   4b304:	0009883a 	mov	r4,zero
   4b308:	01800044 	movi	r6,1
   4b30c:	d821883a 	mov	r16,sp
   4b310:	003dbc06 	br	4aa04 <___vfiprintf_internal_r+0x4c0>
   4b314:	d8c109c4 	addi	r3,sp,1063
   4b318:	8808d0fa 	srli	r4,r17,3
   4b31c:	580a977a 	slli	r5,r11,29
   4b320:	5816d0fa 	srli	r11,r11,3
   4b324:	8c4001cc 	andi	r17,r17,7
   4b328:	88800c04 	addi	r2,r17,48
   4b32c:	2922b03a 	or	r17,r5,r4
   4b330:	18800005 	stb	r2,0(r3)
   4b334:	8ac8b03a 	or	r4,r17,r11
   4b338:	1827883a 	mov	r19,r3
   4b33c:	18ffffc4 	addi	r3,r3,-1
   4b340:	203ff51e 	bne	r4,zero,4b318 <___vfiprintf_internal_r+0xdd4>
   4b344:	e100004c 	andi	r4,fp,1
   4b348:	980b883a 	mov	r5,r19
   4b34c:	203f7b26 	beq	r4,zero,4b13c <___vfiprintf_internal_r+0xbf8>
   4b350:	10803fcc 	andi	r2,r2,255
   4b354:	1080201c 	xori	r2,r2,128
   4b358:	10bfe004 	addi	r2,r2,-128
   4b35c:	01000c04 	movi	r4,48
   4b360:	113f7626 	beq	r2,r4,4b13c <___vfiprintf_internal_r+0xbf8>
   4b364:	da411f17 	ldw	r9,1148(sp)
   4b368:	1827883a 	mov	r19,r3
   4b36c:	293fffc5 	stb	r4,-1(r5)
   4b370:	48e5c83a 	sub	r18,r9,r3
   4b374:	003d5706 	br	4a8d4 <___vfiprintf_internal_r+0x390>
   4b378:	dcc10a04 	addi	r19,sp,1064
   4b37c:	003d5506 	br	4a8d4 <___vfiprintf_internal_r+0x390>
   4b380:	5800021e 	bne	r11,zero,4b38c <___vfiprintf_internal_r+0xe48>
   4b384:	00800244 	movi	r2,9
   4b388:	14401b2e 	bgeu	r2,r17,4b3f8 <___vfiprintf_internal_r+0xeb4>
   4b38c:	dc012515 	stw	r16,1172(sp)
   4b390:	d88109c4 	addi	r2,sp,1063
   4b394:	5025883a 	mov	r18,r10
   4b398:	5821883a 	mov	r16,r11
   4b39c:	8809883a 	mov	r4,r17
   4b3a0:	800b883a 	mov	r5,r16
   4b3a4:	01800284 	movi	r6,10
   4b3a8:	000f883a 	mov	r7,zero
   4b3ac:	1027883a 	mov	r19,r2
   4b3b0:	004c7a80 	call	4c7a8 <__umoddi3>
   4b3b4:	10800c04 	addi	r2,r2,48
   4b3b8:	8809883a 	mov	r4,r17
   4b3bc:	800b883a 	mov	r5,r16
   4b3c0:	98800005 	stb	r2,0(r19)
   4b3c4:	01800284 	movi	r6,10
   4b3c8:	000f883a 	mov	r7,zero
   4b3cc:	004c1e40 	call	4c1e4 <__udivdi3>
   4b3d0:	1821883a 	mov	r16,r3
   4b3d4:	10c6b03a 	or	r3,r2,r3
   4b3d8:	1023883a 	mov	r17,r2
   4b3dc:	98bfffc4 	addi	r2,r19,-1
   4b3e0:	183fee1e 	bne	r3,zero,4b39c <___vfiprintf_internal_r+0xe58>
   4b3e4:	da411f17 	ldw	r9,1148(sp)
   4b3e8:	9015883a 	mov	r10,r18
   4b3ec:	dc012517 	ldw	r16,1172(sp)
   4b3f0:	4ce5c83a 	sub	r18,r9,r19
   4b3f4:	003d3706 	br	4a8d4 <___vfiprintf_internal_r+0x390>
   4b3f8:	8c400c04 	addi	r17,r17,48
   4b3fc:	dc4109c5 	stb	r17,1063(sp)
   4b400:	dc812717 	ldw	r18,1180(sp)
   4b404:	dcc109c4 	addi	r19,sp,1063
   4b408:	003d3206 	br	4a8d4 <___vfiprintf_internal_r+0x390>
   4b40c:	10007c1e 	bne	r2,zero,4b600 <___vfiprintf_internal_r+0x10bc>
   4b410:	0009883a 	mov	r4,zero
   4b414:	01800044 	movi	r6,1
   4b418:	d821883a 	mov	r16,sp
   4b41c:	003f1806 	br	4b080 <___vfiprintf_internal_r+0xb3c>
   4b420:	d9012117 	ldw	r4,1156(sp)
   4b424:	d9412217 	ldw	r5,1160(sp)
   4b428:	d9811a04 	addi	r6,sp,1128
   4b42c:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b430:	103f5a1e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b434:	d8811c17 	ldw	r2,1136(sp)
   4b438:	d821883a 	mov	r16,sp
   4b43c:	003da206 	br	4aac8 <___vfiprintf_internal_r+0x584>
   4b440:	00800084 	movi	r2,2
   4b444:	8ac8b03a 	or	r4,r17,r11
   4b448:	003dd906 	br	4abb0 <___vfiprintf_internal_r+0x66c>
   4b44c:	d9012117 	ldw	r4,1156(sp)
   4b450:	d9412217 	ldw	r5,1160(sp)
   4b454:	d9811a04 	addi	r6,sp,1128
   4b458:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b45c:	103f4f1e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b460:	d821883a 	mov	r16,sp
   4b464:	003cfb06 	br	4a854 <___vfiprintf_internal_r+0x310>
   4b468:	d9012117 	ldw	r4,1156(sp)
   4b46c:	d9412217 	ldw	r5,1160(sp)
   4b470:	d9811a04 	addi	r6,sp,1128
   4b474:	da812b15 	stw	r10,1196(sp)
   4b478:	db812a15 	stw	r14,1192(sp)
   4b47c:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b480:	da812b17 	ldw	r10,1196(sp)
   4b484:	db812a17 	ldw	r14,1192(sp)
   4b488:	103f441e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b48c:	d9011b17 	ldw	r4,1132(sp)
   4b490:	d8811c17 	ldw	r2,1136(sp)
   4b494:	d821883a 	mov	r16,sp
   4b498:	21800044 	addi	r6,r4,1
   4b49c:	003d4c06 	br	4a9d0 <___vfiprintf_internal_r+0x48c>
   4b4a0:	d9012117 	ldw	r4,1156(sp)
   4b4a4:	d9412217 	ldw	r5,1160(sp)
   4b4a8:	d9811a04 	addi	r6,sp,1128
   4b4ac:	da812b15 	stw	r10,1196(sp)
   4b4b0:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b4b4:	da812b17 	ldw	r10,1196(sp)
   4b4b8:	103f381e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b4bc:	d9011b17 	ldw	r4,1132(sp)
   4b4c0:	d8811c17 	ldw	r2,1136(sp)
   4b4c4:	d821883a 	mov	r16,sp
   4b4c8:	21800044 	addi	r6,r4,1
   4b4cc:	003d4d06 	br	4aa04 <___vfiprintf_internal_r+0x4c0>
   4b4d0:	1000761e 	bne	r2,zero,4b6ac <___vfiprintf_internal_r+0x1168>
   4b4d4:	0009883a 	mov	r4,zero
   4b4d8:	01800044 	movi	r6,1
   4b4dc:	d821883a 	mov	r16,sp
   4b4e0:	003d4a06 	br	4aa0c <___vfiprintf_internal_r+0x4c8>
   4b4e4:	d9012117 	ldw	r4,1156(sp)
   4b4e8:	d9412217 	ldw	r5,1160(sp)
   4b4ec:	d9811a04 	addi	r6,sp,1128
   4b4f0:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b4f4:	103f291e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b4f8:	d9811b17 	ldw	r6,1132(sp)
   4b4fc:	d8811c17 	ldw	r2,1136(sp)
   4b500:	d821883a 	mov	r16,sp
   4b504:	31800044 	addi	r6,r6,1
   4b508:	003d6506 	br	4aaa0 <___vfiprintf_internal_r+0x55c>
   4b50c:	a823883a 	mov	r17,r21
   4b510:	003c5f06 	br	4a690 <___vfiprintf_internal_r+0x14c>
   4b514:	0463c83a 	sub	r17,zero,r17
   4b518:	8804c03a 	cmpne	r2,r17,zero
   4b51c:	02d7c83a 	sub	r11,zero,r11
   4b520:	5897c83a 	sub	r11,r11,r2
   4b524:	05800b44 	movi	r22,45
   4b528:	dd811d85 	stb	r22,1142(sp)
   4b52c:	5025883a 	mov	r18,r10
   4b530:	00800044 	movi	r2,1
   4b534:	8ac8b03a 	or	r4,r17,r11
   4b538:	003cd906 	br	4a8a0 <___vfiprintf_internal_r+0x35c>
   4b53c:	00800084 	movi	r2,2
   4b540:	003d9b06 	br	4abb0 <___vfiprintf_internal_r+0x66c>
   4b544:	e080100c 	andi	r2,fp,64
   4b548:	da412317 	ldw	r9,1164(sp)
   4b54c:	103de526 	beq	r2,zero,4ace4 <___vfiprintf_internal_r+0x7a0>
   4b550:	4c40000b 	ldhu	r17,0(r9)
   4b554:	003de406 	br	4ace8 <___vfiprintf_internal_r+0x7a4>
   4b558:	e080100c 	andi	r2,fp,64
   4b55c:	da412317 	ldw	r9,1164(sp)
   4b560:	103cc626 	beq	r2,zero,4a87c <___vfiprintf_internal_r+0x338>
   4b564:	4c40000b 	ldhu	r17,0(r9)
   4b568:	003cc506 	br	4a880 <___vfiprintf_internal_r+0x33c>
   4b56c:	a8c00007 	ldb	r3,0(r21)
   4b570:	003c5406 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4b574:	e080040c 	andi	r2,fp,16
   4b578:	1000091e 	bne	r2,zero,4b5a0 <___vfiprintf_internal_r+0x105c>
   4b57c:	e280100c 	andi	r10,fp,64
   4b580:	50000726 	beq	r10,zero,4b5a0 <___vfiprintf_internal_r+0x105c>
   4b584:	da412317 	ldw	r9,1164(sp)
   4b588:	48800017 	ldw	r2,0(r9)
   4b58c:	4a400104 	addi	r9,r9,4
   4b590:	da412315 	stw	r9,1164(sp)
   4b594:	da412417 	ldw	r9,1168(sp)
   4b598:	1240000d 	sth	r9,0(r2)
   4b59c:	003c2006 	br	4a620 <___vfiprintf_internal_r+0xdc>
   4b5a0:	da412317 	ldw	r9,1164(sp)
   4b5a4:	48800017 	ldw	r2,0(r9)
   4b5a8:	4a400104 	addi	r9,r9,4
   4b5ac:	da412315 	stw	r9,1164(sp)
   4b5b0:	da412417 	ldw	r9,1168(sp)
   4b5b4:	12400015 	stw	r9,0(r2)
   4b5b8:	003c1906 	br	4a620 <___vfiprintf_internal_r+0xdc>
   4b5bc:	e080100c 	andi	r2,fp,64
   4b5c0:	da412317 	ldw	r9,1164(sp)
   4b5c4:	10002026 	beq	r2,zero,4b648 <___vfiprintf_internal_r+0x1104>
   4b5c8:	4c40000b 	ldhu	r17,0(r9)
   4b5cc:	4a400104 	addi	r9,r9,4
   4b5d0:	0017883a 	mov	r11,zero
   4b5d4:	da412315 	stw	r9,1164(sp)
   4b5d8:	003e5b06 	br	4af48 <___vfiprintf_internal_r+0xa04>
   4b5dc:	e080100c 	andi	r2,fp,64
   4b5e0:	da412317 	ldw	r9,1164(sp)
   4b5e4:	103e8326 	beq	r2,zero,4aff4 <___vfiprintf_internal_r+0xab0>
   4b5e8:	4c40000f 	ldh	r17,0(r9)
   4b5ec:	4a400104 	addi	r9,r9,4
   4b5f0:	da412315 	stw	r9,1164(sp)
   4b5f4:	8817d7fa 	srai	r11,r17,31
   4b5f8:	5805883a 	mov	r2,r11
   4b5fc:	003dd906 	br	4ad64 <___vfiprintf_internal_r+0x820>
   4b600:	d9012117 	ldw	r4,1156(sp)
   4b604:	d9412217 	ldw	r5,1160(sp)
   4b608:	d9811a04 	addi	r6,sp,1128
   4b60c:	da812b15 	stw	r10,1196(sp)
   4b610:	db812a15 	stw	r14,1192(sp)
   4b614:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b618:	da812b17 	ldw	r10,1196(sp)
   4b61c:	db812a17 	ldw	r14,1192(sp)
   4b620:	103ede1e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b624:	d9011b17 	ldw	r4,1132(sp)
   4b628:	d8811c17 	ldw	r2,1136(sp)
   4b62c:	d821883a 	mov	r16,sp
   4b630:	21800044 	addi	r6,r4,1
   4b634:	003e9206 	br	4b080 <___vfiprintf_internal_r+0xb3c>
   4b638:	4823883a 	mov	r17,r9
   4b63c:	003d4e06 	br	4ab78 <___vfiprintf_internal_r+0x634>
   4b640:	5025883a 	mov	r18,r10
   4b644:	003e0b06 	br	4ae74 <___vfiprintf_internal_r+0x930>
   4b648:	4c400017 	ldw	r17,0(r9)
   4b64c:	4a400104 	addi	r9,r9,4
   4b650:	0017883a 	mov	r11,zero
   4b654:	da412315 	stw	r9,1164(sp)
   4b658:	003e3b06 	br	4af48 <___vfiprintf_internal_r+0xa04>
   4b65c:	d8811c17 	ldw	r2,1136(sp)
   4b660:	dcc12217 	ldw	r19,1160(sp)
   4b664:	103ece26 	beq	r2,zero,4b1a0 <___vfiprintf_internal_r+0xc5c>
   4b668:	d9012117 	ldw	r4,1156(sp)
   4b66c:	980b883a 	mov	r5,r19
   4b670:	d9811a04 	addi	r6,sp,1128
   4b674:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b678:	003ec906 	br	4b1a0 <___vfiprintf_internal_r+0xc5c>
   4b67c:	ad400044 	addi	r21,r21,1
   4b680:	e7000814 	ori	fp,fp,32
   4b684:	10c00047 	ldb	r3,1(r2)
   4b688:	003c0e06 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4b68c:	d8c12a15 	stw	r3,1192(sp)
   4b690:	00433980 	call	43398 <strlen>
   4b694:	d8c12a17 	ldw	r3,1192(sp)
   4b698:	1025883a 	mov	r18,r2
   4b69c:	dd811d83 	ldbu	r22,1142(sp)
   4b6a0:	d8c12315 	stw	r3,1164(sp)
   4b6a4:	0015883a 	mov	r10,zero
   4b6a8:	003c8a06 	br	4a8d4 <___vfiprintf_internal_r+0x390>
   4b6ac:	d9012117 	ldw	r4,1156(sp)
   4b6b0:	d9412217 	ldw	r5,1160(sp)
   4b6b4:	d9811a04 	addi	r6,sp,1128
   4b6b8:	da812b15 	stw	r10,1196(sp)
   4b6bc:	004a4300 	call	4a430 <__sprint_r.part.0>
   4b6c0:	da812b17 	ldw	r10,1196(sp)
   4b6c4:	103eb51e 	bne	r2,zero,4b19c <___vfiprintf_internal_r+0xc58>
   4b6c8:	d9011b17 	ldw	r4,1132(sp)
   4b6cc:	d8811c17 	ldw	r2,1136(sp)
   4b6d0:	d821883a 	mov	r16,sp
   4b6d4:	21800044 	addi	r6,r4,1
   4b6d8:	003ccc06 	br	4aa0c <___vfiprintf_internal_r+0x4c8>
   4b6dc:	d9011b17 	ldw	r4,1132(sp)
   4b6e0:	02400174 	movhi	r9,5
   4b6e4:	4a400504 	addi	r9,r9,20
   4b6e8:	da412515 	stw	r9,1172(sp)
   4b6ec:	21000044 	addi	r4,r4,1
   4b6f0:	003cab06 	br	4a9a0 <___vfiprintf_internal_r+0x45c>
   4b6f4:	00800184 	movi	r2,6
   4b6f8:	5019883a 	mov	r12,r10
   4b6fc:	1280012e 	bgeu	r2,r10,4b704 <___vfiprintf_internal_r+0x11c0>
   4b700:	1019883a 	mov	r12,r2
   4b704:	6025883a 	mov	r18,r12
   4b708:	6023883a 	mov	r17,r12
   4b70c:	60001516 	blt	r12,zero,4b764 <___vfiprintf_internal_r+0x1220>
   4b710:	d8c12315 	stw	r3,1164(sp)
   4b714:	04c00174 	movhi	r19,5
   4b718:	9cffa504 	addi	r19,r19,-364
   4b71c:	0015883a 	mov	r10,zero
   4b720:	003c7406 	br	4a8f4 <___vfiprintf_internal_r+0x3b0>
   4b724:	d9411b17 	ldw	r5,1132(sp)
   4b728:	00c00174 	movhi	r3,5
   4b72c:	18c00504 	addi	r3,r3,20
   4b730:	d8c12515 	stw	r3,1172(sp)
   4b734:	29400044 	addi	r5,r5,1
   4b738:	003d0406 	br	4ab4c <___vfiprintf_internal_r+0x608>
   4b73c:	5025883a 	mov	r18,r10
   4b740:	dd811d83 	ldbu	r22,1142(sp)
   4b744:	d8c12315 	stw	r3,1164(sp)
   4b748:	0015883a 	mov	r10,zero
   4b74c:	003c6106 	br	4a8d4 <___vfiprintf_internal_r+0x390>
   4b750:	02400174 	movhi	r9,5
   4b754:	4a400104 	addi	r9,r9,4
   4b758:	301d883a 	mov	r14,r6
   4b75c:	da412515 	stw	r9,1172(sp)
   4b760:	003ec806 	br	4b284 <___vfiprintf_internal_r+0xd40>
   4b764:	0023883a 	mov	r17,zero
   4b768:	003fe906 	br	4b710 <___vfiprintf_internal_r+0x11cc>
   4b76c:	043fffc4 	movi	r16,-1
   4b770:	003d3b06 	br	4ac60 <___vfiprintf_internal_r+0x71c>
   4b774:	d8812317 	ldw	r2,1164(sp)
   4b778:	a8c00043 	ldbu	r3,1(r21)
   4b77c:	482b883a 	mov	r21,r9
   4b780:	12800017 	ldw	r10,0(r2)
   4b784:	10800104 	addi	r2,r2,4
   4b788:	d8812315 	stw	r2,1164(sp)
   4b78c:	50000416 	blt	r10,zero,4b7a0 <___vfiprintf_internal_r+0x125c>
   4b790:	18c03fcc 	andi	r3,r3,255
   4b794:	18c0201c 	xori	r3,r3,128
   4b798:	18ffe004 	addi	r3,r3,-128
   4b79c:	003bc906 	br	4a6c4 <___vfiprintf_internal_r+0x180>
   4b7a0:	18c03fcc 	andi	r3,r3,255
   4b7a4:	18c0201c 	xori	r3,r3,128
   4b7a8:	02bfffc4 	movi	r10,-1
   4b7ac:	18ffe004 	addi	r3,r3,-128
   4b7b0:	003bc406 	br	4a6c4 <___vfiprintf_internal_r+0x180>

0004b7b4 <__vfiprintf_internal>:
   4b7b4:	00800174 	movhi	r2,5
   4b7b8:	10870004 	addi	r2,r2,7168
   4b7bc:	2007883a 	mov	r3,r4
   4b7c0:	11000017 	ldw	r4,0(r2)
   4b7c4:	2805883a 	mov	r2,r5
   4b7c8:	300f883a 	mov	r7,r6
   4b7cc:	180b883a 	mov	r5,r3
   4b7d0:	100d883a 	mov	r6,r2
   4b7d4:	004a5441 	jmpi	4a544 <___vfiprintf_internal_r>

0004b7d8 <__swbuf_r>:
   4b7d8:	defffc04 	addi	sp,sp,-16
   4b7dc:	dc800215 	stw	r18,8(sp)
   4b7e0:	dc400115 	stw	r17,4(sp)
   4b7e4:	dc000015 	stw	r16,0(sp)
   4b7e8:	dfc00315 	stw	ra,12(sp)
   4b7ec:	2023883a 	mov	r17,r4
   4b7f0:	2825883a 	mov	r18,r5
   4b7f4:	3021883a 	mov	r16,r6
   4b7f8:	20000226 	beq	r4,zero,4b804 <__swbuf_r+0x2c>
   4b7fc:	20800e17 	ldw	r2,56(r4)
   4b800:	10004d26 	beq	r2,zero,4b938 <__swbuf_r+0x160>
   4b804:	80800617 	ldw	r2,24(r16)
   4b808:	80c0030b 	ldhu	r3,12(r16)
   4b80c:	80800215 	stw	r2,8(r16)
   4b810:	1880020c 	andi	r2,r3,8
   4b814:	10004126 	beq	r2,zero,4b91c <__swbuf_r+0x144>
   4b818:	80800417 	ldw	r2,16(r16)
   4b81c:	10003f26 	beq	r2,zero,4b91c <__swbuf_r+0x144>
   4b820:	1908000c 	andi	r4,r3,8192
   4b824:	94803fcc 	andi	r18,r18,255
   4b828:	20001726 	beq	r4,zero,4b888 <__swbuf_r+0xb0>
   4b82c:	80c00017 	ldw	r3,0(r16)
   4b830:	81000517 	ldw	r4,20(r16)
   4b834:	1885c83a 	sub	r2,r3,r2
   4b838:	11001d0e 	bge	r2,r4,4b8b0 <__swbuf_r+0xd8>
   4b83c:	81000217 	ldw	r4,8(r16)
   4b840:	19400044 	addi	r5,r3,1
   4b844:	81400015 	stw	r5,0(r16)
   4b848:	213fffc4 	addi	r4,r4,-1
   4b84c:	81000215 	stw	r4,8(r16)
   4b850:	1c800005 	stb	r18,0(r3)
   4b854:	80c00517 	ldw	r3,20(r16)
   4b858:	10800044 	addi	r2,r2,1
   4b85c:	18802226 	beq	r3,r2,4b8e8 <__swbuf_r+0x110>
   4b860:	8080030b 	ldhu	r2,12(r16)
   4b864:	1080004c 	andi	r2,r2,1
   4b868:	1000251e 	bne	r2,zero,4b900 <__swbuf_r+0x128>
   4b86c:	9005883a 	mov	r2,r18
   4b870:	dfc00317 	ldw	ra,12(sp)
   4b874:	dc800217 	ldw	r18,8(sp)
   4b878:	dc400117 	ldw	r17,4(sp)
   4b87c:	dc000017 	ldw	r16,0(sp)
   4b880:	dec00404 	addi	sp,sp,16
   4b884:	f800283a 	ret
   4b888:	81401917 	ldw	r5,100(r16)
   4b88c:	18c80014 	ori	r3,r3,8192
   4b890:	0137ffc4 	movi	r4,-8193
   4b894:	2908703a 	and	r4,r5,r4
   4b898:	80c0030d 	sth	r3,12(r16)
   4b89c:	80c00017 	ldw	r3,0(r16)
   4b8a0:	81001915 	stw	r4,100(r16)
   4b8a4:	81000517 	ldw	r4,20(r16)
   4b8a8:	1885c83a 	sub	r2,r3,r2
   4b8ac:	113fe316 	blt	r2,r4,4b83c <__swbuf_r+0x64>
   4b8b0:	8809883a 	mov	r4,r17
   4b8b4:	800b883a 	mov	r5,r16
   4b8b8:	0046d9c0 	call	46d9c <_fflush_r>
   4b8bc:	10000e1e 	bne	r2,zero,4b8f8 <__swbuf_r+0x120>
   4b8c0:	80c00017 	ldw	r3,0(r16)
   4b8c4:	81000217 	ldw	r4,8(r16)
   4b8c8:	00800044 	movi	r2,1
   4b8cc:	19400044 	addi	r5,r3,1
   4b8d0:	213fffc4 	addi	r4,r4,-1
   4b8d4:	81400015 	stw	r5,0(r16)
   4b8d8:	81000215 	stw	r4,8(r16)
   4b8dc:	1c800005 	stb	r18,0(r3)
   4b8e0:	80c00517 	ldw	r3,20(r16)
   4b8e4:	18bfde1e 	bne	r3,r2,4b860 <__swbuf_r+0x88>
   4b8e8:	8809883a 	mov	r4,r17
   4b8ec:	800b883a 	mov	r5,r16
   4b8f0:	0046d9c0 	call	46d9c <_fflush_r>
   4b8f4:	103fdd26 	beq	r2,zero,4b86c <__swbuf_r+0x94>
   4b8f8:	00bfffc4 	movi	r2,-1
   4b8fc:	003fdc06 	br	4b870 <__swbuf_r+0x98>
   4b900:	00800284 	movi	r2,10
   4b904:	90bfd91e 	bne	r18,r2,4b86c <__swbuf_r+0x94>
   4b908:	8809883a 	mov	r4,r17
   4b90c:	800b883a 	mov	r5,r16
   4b910:	0046d9c0 	call	46d9c <_fflush_r>
   4b914:	103fd526 	beq	r2,zero,4b86c <__swbuf_r+0x94>
   4b918:	003ff706 	br	4b8f8 <__swbuf_r+0x120>
   4b91c:	8809883a 	mov	r4,r17
   4b920:	800b883a 	mov	r5,r16
   4b924:	00454240 	call	45424 <__swsetup_r>
   4b928:	80c0030b 	ldhu	r3,12(r16)
   4b92c:	1000041e 	bne	r2,zero,4b940 <__swbuf_r+0x168>
   4b930:	80800417 	ldw	r2,16(r16)
   4b934:	003fba06 	br	4b820 <__swbuf_r+0x48>
   4b938:	00470a80 	call	470a8 <__sinit>
   4b93c:	003fb106 	br	4b804 <__swbuf_r+0x2c>
   4b940:	18c01014 	ori	r3,r3,64
   4b944:	80c0030d 	sth	r3,12(r16)
   4b948:	00c00244 	movi	r3,9
   4b94c:	00bfffc4 	movi	r2,-1
   4b950:	88c00015 	stw	r3,0(r17)
   4b954:	003fc606 	br	4b870 <__swbuf_r+0x98>

0004b958 <__swbuf>:
   4b958:	00c00174 	movhi	r3,5
   4b95c:	18c70004 	addi	r3,r3,7168
   4b960:	2005883a 	mov	r2,r4
   4b964:	19000017 	ldw	r4,0(r3)
   4b968:	280d883a 	mov	r6,r5
   4b96c:	100b883a 	mov	r5,r2
   4b970:	004b7d81 	jmpi	4b7d8 <__swbuf_r>

0004b974 <_write_r>:
   4b974:	defffd04 	addi	sp,sp,-12
   4b978:	dc400115 	stw	r17,4(sp)
   4b97c:	dc000015 	stw	r16,0(sp)
   4b980:	2023883a 	mov	r17,r4
   4b984:	04000174 	movhi	r16,5
   4b988:	84071504 	addi	r16,r16,7252
   4b98c:	2809883a 	mov	r4,r5
   4b990:	300b883a 	mov	r5,r6
   4b994:	380d883a 	mov	r6,r7
   4b998:	dfc00215 	stw	ra,8(sp)
   4b99c:	80000015 	stw	zero,0(r16)
   4b9a0:	004d9200 	call	4d920 <write>
   4b9a4:	00ffffc4 	movi	r3,-1
   4b9a8:	10c00526 	beq	r2,r3,4b9c0 <_write_r+0x4c>
   4b9ac:	dfc00217 	ldw	ra,8(sp)
   4b9b0:	dc400117 	ldw	r17,4(sp)
   4b9b4:	dc000017 	ldw	r16,0(sp)
   4b9b8:	dec00304 	addi	sp,sp,12
   4b9bc:	f800283a 	ret
   4b9c0:	80c00017 	ldw	r3,0(r16)
   4b9c4:	183ff926 	beq	r3,zero,4b9ac <_write_r+0x38>
   4b9c8:	88c00015 	stw	r3,0(r17)
   4b9cc:	dfc00217 	ldw	ra,8(sp)
   4b9d0:	dc400117 	ldw	r17,4(sp)
   4b9d4:	dc000017 	ldw	r16,0(sp)
   4b9d8:	dec00304 	addi	sp,sp,12
   4b9dc:	f800283a 	ret

0004b9e0 <_close_r>:
   4b9e0:	defffd04 	addi	sp,sp,-12
   4b9e4:	dc400115 	stw	r17,4(sp)
   4b9e8:	dc000015 	stw	r16,0(sp)
   4b9ec:	2023883a 	mov	r17,r4
   4b9f0:	04000174 	movhi	r16,5
   4b9f4:	84071504 	addi	r16,r16,7252
   4b9f8:	2809883a 	mov	r4,r5
   4b9fc:	dfc00215 	stw	ra,8(sp)
   4ba00:	80000015 	stw	zero,0(r16)
   4ba04:	004d1c80 	call	4d1c8 <close>
   4ba08:	00ffffc4 	movi	r3,-1
   4ba0c:	10c00526 	beq	r2,r3,4ba24 <_close_r+0x44>
   4ba10:	dfc00217 	ldw	ra,8(sp)
   4ba14:	dc400117 	ldw	r17,4(sp)
   4ba18:	dc000017 	ldw	r16,0(sp)
   4ba1c:	dec00304 	addi	sp,sp,12
   4ba20:	f800283a 	ret
   4ba24:	80c00017 	ldw	r3,0(r16)
   4ba28:	183ff926 	beq	r3,zero,4ba10 <_close_r+0x30>
   4ba2c:	88c00015 	stw	r3,0(r17)
   4ba30:	dfc00217 	ldw	ra,8(sp)
   4ba34:	dc400117 	ldw	r17,4(sp)
   4ba38:	dc000017 	ldw	r16,0(sp)
   4ba3c:	dec00304 	addi	sp,sp,12
   4ba40:	f800283a 	ret

0004ba44 <_calloc_r>:
   4ba44:	298b383a 	mul	r5,r5,r6
   4ba48:	defffe04 	addi	sp,sp,-8
   4ba4c:	dc000015 	stw	r16,0(sp)
   4ba50:	dfc00115 	stw	ra,4(sp)
   4ba54:	00480400 	call	48040 <_malloc_r>
   4ba58:	1021883a 	mov	r16,r2
   4ba5c:	10002826 	beq	r2,zero,4bb00 <_calloc_r+0xbc>
   4ba60:	11bfff17 	ldw	r6,-4(r2)
   4ba64:	00ffff04 	movi	r3,-4
   4ba68:	00800904 	movi	r2,36
   4ba6c:	30cc703a 	and	r6,r6,r3
   4ba70:	30cd883a 	add	r6,r6,r3
   4ba74:	11801436 	bltu	r2,r6,4bac8 <_calloc_r+0x84>
   4ba78:	00c004c4 	movi	r3,19
   4ba7c:	19800936 	bltu	r3,r6,4baa4 <_calloc_r+0x60>
   4ba80:	8005883a 	mov	r2,r16
   4ba84:	10000015 	stw	zero,0(r2)
   4ba88:	10000115 	stw	zero,4(r2)
   4ba8c:	10000215 	stw	zero,8(r2)
   4ba90:	8005883a 	mov	r2,r16
   4ba94:	dfc00117 	ldw	ra,4(sp)
   4ba98:	dc000017 	ldw	r16,0(sp)
   4ba9c:	dec00204 	addi	sp,sp,8
   4baa0:	f800283a 	ret
   4baa4:	80000015 	stw	zero,0(r16)
   4baa8:	80000115 	stw	zero,4(r16)
   4baac:	00c006c4 	movi	r3,27
   4bab0:	19800d2e 	bgeu	r3,r6,4bae8 <_calloc_r+0xa4>
   4bab4:	80000215 	stw	zero,8(r16)
   4bab8:	80000315 	stw	zero,12(r16)
   4babc:	30800c26 	beq	r6,r2,4baf0 <_calloc_r+0xac>
   4bac0:	80800404 	addi	r2,r16,16
   4bac4:	003fef06 	br	4ba84 <_calloc_r+0x40>
   4bac8:	8009883a 	mov	r4,r16
   4bacc:	000b883a 	mov	r5,zero
   4bad0:	0048a280 	call	48a28 <memset>
   4bad4:	8005883a 	mov	r2,r16
   4bad8:	dfc00117 	ldw	ra,4(sp)
   4badc:	dc000017 	ldw	r16,0(sp)
   4bae0:	dec00204 	addi	sp,sp,8
   4bae4:	f800283a 	ret
   4bae8:	80800204 	addi	r2,r16,8
   4baec:	003fe506 	br	4ba84 <_calloc_r+0x40>
   4baf0:	80000415 	stw	zero,16(r16)
   4baf4:	80800604 	addi	r2,r16,24
   4baf8:	80000515 	stw	zero,20(r16)
   4bafc:	003fe106 	br	4ba84 <_calloc_r+0x40>
   4bb00:	0005883a 	mov	r2,zero
   4bb04:	003fe306 	br	4ba94 <_calloc_r+0x50>

0004bb08 <_fclose_r>:
   4bb08:	defffc04 	addi	sp,sp,-16
   4bb0c:	dc000015 	stw	r16,0(sp)
   4bb10:	dfc00315 	stw	ra,12(sp)
   4bb14:	dc800215 	stw	r18,8(sp)
   4bb18:	dc400115 	stw	r17,4(sp)
   4bb1c:	2821883a 	mov	r16,r5
   4bb20:	28003126 	beq	r5,zero,4bbe8 <_fclose_r+0xe0>
   4bb24:	2023883a 	mov	r17,r4
   4bb28:	00473600 	call	47360 <__sfp_lock_acquire>
   4bb2c:	88000226 	beq	r17,zero,4bb38 <_fclose_r+0x30>
   4bb30:	88800e17 	ldw	r2,56(r17)
   4bb34:	10003326 	beq	r2,zero,4bc04 <_fclose_r+0xfc>
   4bb38:	8080030f 	ldh	r2,12(r16)
   4bb3c:	10002226 	beq	r2,zero,4bbc8 <_fclose_r+0xc0>
   4bb40:	8809883a 	mov	r4,r17
   4bb44:	800b883a 	mov	r5,r16
   4bb48:	0046d9c0 	call	46d9c <_fflush_r>
   4bb4c:	80c00b17 	ldw	r3,44(r16)
   4bb50:	1025883a 	mov	r18,r2
   4bb54:	18000426 	beq	r3,zero,4bb68 <_fclose_r+0x60>
   4bb58:	81400717 	ldw	r5,28(r16)
   4bb5c:	8809883a 	mov	r4,r17
   4bb60:	183ee83a 	callr	r3
   4bb64:	10003016 	blt	r2,zero,4bc28 <_fclose_r+0x120>
   4bb68:	8080030b 	ldhu	r2,12(r16)
   4bb6c:	1080200c 	andi	r2,r2,128
   4bb70:	1000291e 	bne	r2,zero,4bc18 <_fclose_r+0x110>
   4bb74:	81400c17 	ldw	r5,48(r16)
   4bb78:	28000526 	beq	r5,zero,4bb90 <_fclose_r+0x88>
   4bb7c:	80801004 	addi	r2,r16,64
   4bb80:	28800226 	beq	r5,r2,4bb8c <_fclose_r+0x84>
   4bb84:	8809883a 	mov	r4,r17
   4bb88:	00474dc0 	call	474dc <_free_r>
   4bb8c:	80000c15 	stw	zero,48(r16)
   4bb90:	81401117 	ldw	r5,68(r16)
   4bb94:	28000326 	beq	r5,zero,4bba4 <_fclose_r+0x9c>
   4bb98:	8809883a 	mov	r4,r17
   4bb9c:	00474dc0 	call	474dc <_free_r>
   4bba0:	80001115 	stw	zero,68(r16)
   4bba4:	8000030d 	sth	zero,12(r16)
   4bba8:	00473640 	call	47364 <__sfp_lock_release>
   4bbac:	9005883a 	mov	r2,r18
   4bbb0:	dfc00317 	ldw	ra,12(sp)
   4bbb4:	dc800217 	ldw	r18,8(sp)
   4bbb8:	dc400117 	ldw	r17,4(sp)
   4bbbc:	dc000017 	ldw	r16,0(sp)
   4bbc0:	dec00404 	addi	sp,sp,16
   4bbc4:	f800283a 	ret
   4bbc8:	00473640 	call	47364 <__sfp_lock_release>
   4bbcc:	0005883a 	mov	r2,zero
   4bbd0:	dfc00317 	ldw	ra,12(sp)
   4bbd4:	dc800217 	ldw	r18,8(sp)
   4bbd8:	dc400117 	ldw	r17,4(sp)
   4bbdc:	dc000017 	ldw	r16,0(sp)
   4bbe0:	dec00404 	addi	sp,sp,16
   4bbe4:	f800283a 	ret
   4bbe8:	0005883a 	mov	r2,zero
   4bbec:	dfc00317 	ldw	ra,12(sp)
   4bbf0:	dc800217 	ldw	r18,8(sp)
   4bbf4:	dc400117 	ldw	r17,4(sp)
   4bbf8:	dc000017 	ldw	r16,0(sp)
   4bbfc:	dec00404 	addi	sp,sp,16
   4bc00:	f800283a 	ret
   4bc04:	8809883a 	mov	r4,r17
   4bc08:	00470a80 	call	470a8 <__sinit>
   4bc0c:	8080030f 	ldh	r2,12(r16)
   4bc10:	103fcb1e 	bne	r2,zero,4bb40 <_fclose_r+0x38>
   4bc14:	003fec06 	br	4bbc8 <_fclose_r+0xc0>
   4bc18:	81400417 	ldw	r5,16(r16)
   4bc1c:	8809883a 	mov	r4,r17
   4bc20:	00474dc0 	call	474dc <_free_r>
   4bc24:	003fd306 	br	4bb74 <_fclose_r+0x6c>
   4bc28:	04bfffc4 	movi	r18,-1
   4bc2c:	003fce06 	br	4bb68 <_fclose_r+0x60>

0004bc30 <fclose>:
   4bc30:	00800174 	movhi	r2,5
   4bc34:	10870004 	addi	r2,r2,7168
   4bc38:	200b883a 	mov	r5,r4
   4bc3c:	11000017 	ldw	r4,0(r2)
   4bc40:	004bb081 	jmpi	4bb08 <_fclose_r>

0004bc44 <_fputwc_r>:
   4bc44:	3080030b 	ldhu	r2,12(r6)
   4bc48:	defff804 	addi	sp,sp,-32
   4bc4c:	dcc00415 	stw	r19,16(sp)
   4bc50:	dc800315 	stw	r18,12(sp)
   4bc54:	dc000115 	stw	r16,4(sp)
   4bc58:	dfc00715 	stw	ra,28(sp)
   4bc5c:	dd400615 	stw	r21,24(sp)
   4bc60:	dd000515 	stw	r20,20(sp)
   4bc64:	dc400215 	stw	r17,8(sp)
   4bc68:	10c8000c 	andi	r3,r2,8192
   4bc6c:	3021883a 	mov	r16,r6
   4bc70:	2027883a 	mov	r19,r4
   4bc74:	2825883a 	mov	r18,r5
   4bc78:	1800051e 	bne	r3,zero,4bc90 <_fputwc_r+0x4c>
   4bc7c:	30c01917 	ldw	r3,100(r6)
   4bc80:	10880014 	ori	r2,r2,8192
   4bc84:	3080030d 	sth	r2,12(r6)
   4bc88:	18880014 	ori	r2,r3,8192
   4bc8c:	30801915 	stw	r2,100(r6)
   4bc90:	0047e340 	call	47e34 <__locale_mb_cur_max>
   4bc94:	00c00044 	movi	r3,1
   4bc98:	10c03e26 	beq	r2,r3,4bd94 <_fputwc_r+0x150>
   4bc9c:	9809883a 	mov	r4,r19
   4bca0:	d80b883a 	mov	r5,sp
   4bca4:	900d883a 	mov	r6,r18
   4bca8:	81c01704 	addi	r7,r16,92
   4bcac:	004bfe40 	call	4bfe4 <_wcrtomb_r>
   4bcb0:	1029883a 	mov	r20,r2
   4bcb4:	00bfffc4 	movi	r2,-1
   4bcb8:	a0802026 	beq	r20,r2,4bd3c <_fputwc_r+0xf8>
   4bcbc:	d9400003 	ldbu	r5,0(sp)
   4bcc0:	a0001c26 	beq	r20,zero,4bd34 <_fputwc_r+0xf0>
   4bcc4:	0023883a 	mov	r17,zero
   4bcc8:	05400284 	movi	r21,10
   4bccc:	00000906 	br	4bcf4 <_fputwc_r+0xb0>
   4bcd0:	80c00017 	ldw	r3,0(r16)
   4bcd4:	19400005 	stb	r5,0(r3)
   4bcd8:	80c00017 	ldw	r3,0(r16)
   4bcdc:	18c00044 	addi	r3,r3,1
   4bce0:	80c00015 	stw	r3,0(r16)
   4bce4:	8c400044 	addi	r17,r17,1
   4bce8:	dc47883a 	add	r3,sp,r17
   4bcec:	8d00112e 	bgeu	r17,r20,4bd34 <_fputwc_r+0xf0>
   4bcf0:	19400003 	ldbu	r5,0(r3)
   4bcf4:	80c00217 	ldw	r3,8(r16)
   4bcf8:	18ffffc4 	addi	r3,r3,-1
   4bcfc:	80c00215 	stw	r3,8(r16)
   4bd00:	183ff30e 	bge	r3,zero,4bcd0 <_fputwc_r+0x8c>
   4bd04:	80800617 	ldw	r2,24(r16)
   4bd08:	18801916 	blt	r3,r2,4bd70 <_fputwc_r+0x12c>
   4bd0c:	80800017 	ldw	r2,0(r16)
   4bd10:	11400005 	stb	r5,0(r2)
   4bd14:	80800017 	ldw	r2,0(r16)
   4bd18:	10c00003 	ldbu	r3,0(r2)
   4bd1c:	10800044 	addi	r2,r2,1
   4bd20:	1d402326 	beq	r3,r21,4bdb0 <_fputwc_r+0x16c>
   4bd24:	8c400044 	addi	r17,r17,1
   4bd28:	80800015 	stw	r2,0(r16)
   4bd2c:	dc47883a 	add	r3,sp,r17
   4bd30:	8d3fef36 	bltu	r17,r20,4bcf0 <_fputwc_r+0xac>
   4bd34:	9005883a 	mov	r2,r18
   4bd38:	00000406 	br	4bd4c <_fputwc_r+0x108>
   4bd3c:	80c0030b 	ldhu	r3,12(r16)
   4bd40:	a005883a 	mov	r2,r20
   4bd44:	18c01014 	ori	r3,r3,64
   4bd48:	80c0030d 	sth	r3,12(r16)
   4bd4c:	dfc00717 	ldw	ra,28(sp)
   4bd50:	dd400617 	ldw	r21,24(sp)
   4bd54:	dd000517 	ldw	r20,20(sp)
   4bd58:	dcc00417 	ldw	r19,16(sp)
   4bd5c:	dc800317 	ldw	r18,12(sp)
   4bd60:	dc400217 	ldw	r17,8(sp)
   4bd64:	dc000117 	ldw	r16,4(sp)
   4bd68:	dec00804 	addi	sp,sp,32
   4bd6c:	f800283a 	ret
   4bd70:	9809883a 	mov	r4,r19
   4bd74:	29403fcc 	andi	r5,r5,255
   4bd78:	800d883a 	mov	r6,r16
   4bd7c:	004b7d80 	call	4b7d8 <__swbuf_r>
   4bd80:	10bfffe0 	cmpeqi	r2,r2,-1
   4bd84:	10803fcc 	andi	r2,r2,255
   4bd88:	103fd626 	beq	r2,zero,4bce4 <_fputwc_r+0xa0>
   4bd8c:	00bfffc4 	movi	r2,-1
   4bd90:	003fee06 	br	4bd4c <_fputwc_r+0x108>
   4bd94:	90ffffc4 	addi	r3,r18,-1
   4bd98:	01003f84 	movi	r4,254
   4bd9c:	20ffbf36 	bltu	r4,r3,4bc9c <_fputwc_r+0x58>
   4bda0:	900b883a 	mov	r5,r18
   4bda4:	dc800005 	stb	r18,0(sp)
   4bda8:	1029883a 	mov	r20,r2
   4bdac:	003fc506 	br	4bcc4 <_fputwc_r+0x80>
   4bdb0:	9809883a 	mov	r4,r19
   4bdb4:	a80b883a 	mov	r5,r21
   4bdb8:	800d883a 	mov	r6,r16
   4bdbc:	004b7d80 	call	4b7d8 <__swbuf_r>
   4bdc0:	10bfffe0 	cmpeqi	r2,r2,-1
   4bdc4:	003fef06 	br	4bd84 <_fputwc_r+0x140>

0004bdc8 <fputwc>:
   4bdc8:	defffc04 	addi	sp,sp,-16
   4bdcc:	dc000115 	stw	r16,4(sp)
   4bdd0:	04000174 	movhi	r16,5
   4bdd4:	84070004 	addi	r16,r16,7168
   4bdd8:	80800017 	ldw	r2,0(r16)
   4bddc:	dc400215 	stw	r17,8(sp)
   4bde0:	dfc00315 	stw	ra,12(sp)
   4bde4:	2023883a 	mov	r17,r4
   4bde8:	280d883a 	mov	r6,r5
   4bdec:	10000d26 	beq	r2,zero,4be24 <fputwc+0x5c>
   4bdf0:	10c00e17 	ldw	r3,56(r2)
   4bdf4:	1009883a 	mov	r4,r2
   4bdf8:	1800041e 	bne	r3,zero,4be0c <fputwc+0x44>
   4bdfc:	d9400015 	stw	r5,0(sp)
   4be00:	00470a80 	call	470a8 <__sinit>
   4be04:	81000017 	ldw	r4,0(r16)
   4be08:	d9800017 	ldw	r6,0(sp)
   4be0c:	880b883a 	mov	r5,r17
   4be10:	dfc00317 	ldw	ra,12(sp)
   4be14:	dc400217 	ldw	r17,8(sp)
   4be18:	dc000117 	ldw	r16,4(sp)
   4be1c:	dec00404 	addi	sp,sp,16
   4be20:	004bc441 	jmpi	4bc44 <_fputwc_r>
   4be24:	0009883a 	mov	r4,zero
   4be28:	880b883a 	mov	r5,r17
   4be2c:	dfc00317 	ldw	ra,12(sp)
   4be30:	dc400217 	ldw	r17,8(sp)
   4be34:	dc000117 	ldw	r16,4(sp)
   4be38:	dec00404 	addi	sp,sp,16
   4be3c:	004bc441 	jmpi	4bc44 <_fputwc_r>

0004be40 <_fstat_r>:
   4be40:	defffd04 	addi	sp,sp,-12
   4be44:	dc400115 	stw	r17,4(sp)
   4be48:	dc000015 	stw	r16,0(sp)
   4be4c:	2023883a 	mov	r17,r4
   4be50:	04000174 	movhi	r16,5
   4be54:	84071504 	addi	r16,r16,7252
   4be58:	2809883a 	mov	r4,r5
   4be5c:	300b883a 	mov	r5,r6
   4be60:	dfc00215 	stw	ra,8(sp)
   4be64:	80000015 	stw	zero,0(r16)
   4be68:	004d30c0 	call	4d30c <fstat>
   4be6c:	00ffffc4 	movi	r3,-1
   4be70:	10c00526 	beq	r2,r3,4be88 <_fstat_r+0x48>
   4be74:	dfc00217 	ldw	ra,8(sp)
   4be78:	dc400117 	ldw	r17,4(sp)
   4be7c:	dc000017 	ldw	r16,0(sp)
   4be80:	dec00304 	addi	sp,sp,12
   4be84:	f800283a 	ret
   4be88:	80c00017 	ldw	r3,0(r16)
   4be8c:	183ff926 	beq	r3,zero,4be74 <_fstat_r+0x34>
   4be90:	88c00015 	stw	r3,0(r17)
   4be94:	dfc00217 	ldw	ra,8(sp)
   4be98:	dc400117 	ldw	r17,4(sp)
   4be9c:	dc000017 	ldw	r16,0(sp)
   4bea0:	dec00304 	addi	sp,sp,12
   4bea4:	f800283a 	ret

0004bea8 <_isatty_r>:
   4bea8:	defffd04 	addi	sp,sp,-12
   4beac:	dc400115 	stw	r17,4(sp)
   4beb0:	dc000015 	stw	r16,0(sp)
   4beb4:	2023883a 	mov	r17,r4
   4beb8:	04000174 	movhi	r16,5
   4bebc:	84071504 	addi	r16,r16,7252
   4bec0:	2809883a 	mov	r4,r5
   4bec4:	dfc00215 	stw	ra,8(sp)
   4bec8:	80000015 	stw	zero,0(r16)
   4becc:	004d4080 	call	4d408 <isatty>
   4bed0:	00ffffc4 	movi	r3,-1
   4bed4:	10c00526 	beq	r2,r3,4beec <_isatty_r+0x44>
   4bed8:	dfc00217 	ldw	ra,8(sp)
   4bedc:	dc400117 	ldw	r17,4(sp)
   4bee0:	dc000017 	ldw	r16,0(sp)
   4bee4:	dec00304 	addi	sp,sp,12
   4bee8:	f800283a 	ret
   4beec:	80c00017 	ldw	r3,0(r16)
   4bef0:	183ff926 	beq	r3,zero,4bed8 <_isatty_r+0x30>
   4bef4:	88c00015 	stw	r3,0(r17)
   4bef8:	dfc00217 	ldw	ra,8(sp)
   4befc:	dc400117 	ldw	r17,4(sp)
   4bf00:	dc000017 	ldw	r16,0(sp)
   4bf04:	dec00304 	addi	sp,sp,12
   4bf08:	f800283a 	ret

0004bf0c <_lseek_r>:
   4bf0c:	defffd04 	addi	sp,sp,-12
   4bf10:	dc400115 	stw	r17,4(sp)
   4bf14:	dc000015 	stw	r16,0(sp)
   4bf18:	2023883a 	mov	r17,r4
   4bf1c:	04000174 	movhi	r16,5
   4bf20:	84071504 	addi	r16,r16,7252
   4bf24:	2809883a 	mov	r4,r5
   4bf28:	300b883a 	mov	r5,r6
   4bf2c:	380d883a 	mov	r6,r7
   4bf30:	dfc00215 	stw	ra,8(sp)
   4bf34:	80000015 	stw	zero,0(r16)
   4bf38:	004d4f80 	call	4d4f8 <lseek>
   4bf3c:	00ffffc4 	movi	r3,-1
   4bf40:	10c00526 	beq	r2,r3,4bf58 <_lseek_r+0x4c>
   4bf44:	dfc00217 	ldw	ra,8(sp)
   4bf48:	dc400117 	ldw	r17,4(sp)
   4bf4c:	dc000017 	ldw	r16,0(sp)
   4bf50:	dec00304 	addi	sp,sp,12
   4bf54:	f800283a 	ret
   4bf58:	80c00017 	ldw	r3,0(r16)
   4bf5c:	183ff926 	beq	r3,zero,4bf44 <_lseek_r+0x38>
   4bf60:	88c00015 	stw	r3,0(r17)
   4bf64:	dfc00217 	ldw	ra,8(sp)
   4bf68:	dc400117 	ldw	r17,4(sp)
   4bf6c:	dc000017 	ldw	r16,0(sp)
   4bf70:	dec00304 	addi	sp,sp,12
   4bf74:	f800283a 	ret

0004bf78 <_read_r>:
   4bf78:	defffd04 	addi	sp,sp,-12
   4bf7c:	dc400115 	stw	r17,4(sp)
   4bf80:	dc000015 	stw	r16,0(sp)
   4bf84:	2023883a 	mov	r17,r4
   4bf88:	04000174 	movhi	r16,5
   4bf8c:	84071504 	addi	r16,r16,7252
   4bf90:	2809883a 	mov	r4,r5
   4bf94:	300b883a 	mov	r5,r6
   4bf98:	380d883a 	mov	r6,r7
   4bf9c:	dfc00215 	stw	ra,8(sp)
   4bfa0:	80000015 	stw	zero,0(r16)
   4bfa4:	004d6d00 	call	4d6d0 <read>
   4bfa8:	00ffffc4 	movi	r3,-1
   4bfac:	10c00526 	beq	r2,r3,4bfc4 <_read_r+0x4c>
   4bfb0:	dfc00217 	ldw	ra,8(sp)
   4bfb4:	dc400117 	ldw	r17,4(sp)
   4bfb8:	dc000017 	ldw	r16,0(sp)
   4bfbc:	dec00304 	addi	sp,sp,12
   4bfc0:	f800283a 	ret
   4bfc4:	80c00017 	ldw	r3,0(r16)
   4bfc8:	183ff926 	beq	r3,zero,4bfb0 <_read_r+0x38>
   4bfcc:	88c00015 	stw	r3,0(r17)
   4bfd0:	dfc00217 	ldw	ra,8(sp)
   4bfd4:	dc400117 	ldw	r17,4(sp)
   4bfd8:	dc000017 	ldw	r16,0(sp)
   4bfdc:	dec00304 	addi	sp,sp,12
   4bfe0:	f800283a 	ret

0004bfe4 <_wcrtomb_r>:
   4bfe4:	defff604 	addi	sp,sp,-40
   4bfe8:	dc800815 	stw	r18,32(sp)
   4bfec:	dc400715 	stw	r17,28(sp)
   4bff0:	dc000615 	stw	r16,24(sp)
   4bff4:	00800174 	movhi	r2,5
   4bff8:	10870404 	addi	r2,r2,7184
   4bffc:	dfc00915 	stw	ra,36(sp)
   4c000:	2021883a 	mov	r16,r4
   4c004:	3823883a 	mov	r17,r7
   4c008:	14800017 	ldw	r18,0(r2)
   4c00c:	28001426 	beq	r5,zero,4c060 <_wcrtomb_r+0x7c>
   4c010:	d9400415 	stw	r5,16(sp)
   4c014:	d9800515 	stw	r6,20(sp)
   4c018:	0047e280 	call	47e28 <__locale_charset>
   4c01c:	d9400417 	ldw	r5,16(sp)
   4c020:	d9800517 	ldw	r6,20(sp)
   4c024:	8009883a 	mov	r4,r16
   4c028:	dc400015 	stw	r17,0(sp)
   4c02c:	100f883a 	mov	r7,r2
   4c030:	903ee83a 	callr	r18
   4c034:	00ffffc4 	movi	r3,-1
   4c038:	10c0031e 	bne	r2,r3,4c048 <_wcrtomb_r+0x64>
   4c03c:	88000015 	stw	zero,0(r17)
   4c040:	00c02284 	movi	r3,138
   4c044:	80c00015 	stw	r3,0(r16)
   4c048:	dfc00917 	ldw	ra,36(sp)
   4c04c:	dc800817 	ldw	r18,32(sp)
   4c050:	dc400717 	ldw	r17,28(sp)
   4c054:	dc000617 	ldw	r16,24(sp)
   4c058:	dec00a04 	addi	sp,sp,40
   4c05c:	f800283a 	ret
   4c060:	0047e280 	call	47e28 <__locale_charset>
   4c064:	8009883a 	mov	r4,r16
   4c068:	dc400015 	stw	r17,0(sp)
   4c06c:	d9400104 	addi	r5,sp,4
   4c070:	000d883a 	mov	r6,zero
   4c074:	100f883a 	mov	r7,r2
   4c078:	903ee83a 	callr	r18
   4c07c:	003fed06 	br	4c034 <_wcrtomb_r+0x50>

0004c080 <wcrtomb>:
   4c080:	defff504 	addi	sp,sp,-44
   4c084:	dc400515 	stw	r17,20(sp)
   4c088:	dc000415 	stw	r16,16(sp)
   4c08c:	dfc00a15 	stw	ra,40(sp)
   4c090:	dd400915 	stw	r21,36(sp)
   4c094:	dd000815 	stw	r20,32(sp)
   4c098:	dcc00715 	stw	r19,28(sp)
   4c09c:	dc800615 	stw	r18,24(sp)
   4c0a0:	2021883a 	mov	r16,r4
   4c0a4:	3023883a 	mov	r17,r6
   4c0a8:	20001d26 	beq	r4,zero,4c120 <wcrtomb+0xa0>
   4c0ac:	04800174 	movhi	r18,5
   4c0b0:	94870004 	addi	r18,r18,7168
   4c0b4:	95400017 	ldw	r21,0(r18)
   4c0b8:	00800174 	movhi	r2,5
   4c0bc:	10870404 	addi	r2,r2,7184
   4c0c0:	15000017 	ldw	r20,0(r2)
   4c0c4:	2827883a 	mov	r19,r5
   4c0c8:	0047e280 	call	47e28 <__locale_charset>
   4c0cc:	a809883a 	mov	r4,r21
   4c0d0:	dc400015 	stw	r17,0(sp)
   4c0d4:	800b883a 	mov	r5,r16
   4c0d8:	980d883a 	mov	r6,r19
   4c0dc:	100f883a 	mov	r7,r2
   4c0e0:	a03ee83a 	callr	r20
   4c0e4:	00ffffc4 	movi	r3,-1
   4c0e8:	10c0041e 	bne	r2,r3,4c0fc <wcrtomb+0x7c>
   4c0ec:	90c00017 	ldw	r3,0(r18)
   4c0f0:	01002284 	movi	r4,138
   4c0f4:	88000015 	stw	zero,0(r17)
   4c0f8:	19000015 	stw	r4,0(r3)
   4c0fc:	dfc00a17 	ldw	ra,40(sp)
   4c100:	dd400917 	ldw	r21,36(sp)
   4c104:	dd000817 	ldw	r20,32(sp)
   4c108:	dcc00717 	ldw	r19,28(sp)
   4c10c:	dc800617 	ldw	r18,24(sp)
   4c110:	dc400517 	ldw	r17,20(sp)
   4c114:	dc000417 	ldw	r16,16(sp)
   4c118:	dec00b04 	addi	sp,sp,44
   4c11c:	f800283a 	ret
   4c120:	04800174 	movhi	r18,5
   4c124:	94870004 	addi	r18,r18,7168
   4c128:	94c00017 	ldw	r19,0(r18)
   4c12c:	00800174 	movhi	r2,5
   4c130:	10870404 	addi	r2,r2,7184
   4c134:	14000017 	ldw	r16,0(r2)
   4c138:	0047e280 	call	47e28 <__locale_charset>
   4c13c:	9809883a 	mov	r4,r19
   4c140:	dc400015 	stw	r17,0(sp)
   4c144:	d9400104 	addi	r5,sp,4
   4c148:	000d883a 	mov	r6,zero
   4c14c:	100f883a 	mov	r7,r2
   4c150:	803ee83a 	callr	r16
   4c154:	003fe306 	br	4c0e4 <wcrtomb+0x64>

0004c158 <__ascii_wctomb>:
   4c158:	28000526 	beq	r5,zero,4c170 <__ascii_wctomb+0x18>
   4c15c:	00803fc4 	movi	r2,255
   4c160:	11800536 	bltu	r2,r6,4c178 <__ascii_wctomb+0x20>
   4c164:	29800005 	stb	r6,0(r5)
   4c168:	00800044 	movi	r2,1
   4c16c:	f800283a 	ret
   4c170:	0005883a 	mov	r2,zero
   4c174:	f800283a 	ret
   4c178:	00802284 	movi	r2,138
   4c17c:	20800015 	stw	r2,0(r4)
   4c180:	00bfffc4 	movi	r2,-1
   4c184:	f800283a 	ret

0004c188 <_wctomb_r>:
   4c188:	defff904 	addi	sp,sp,-28
   4c18c:	00800174 	movhi	r2,5
   4c190:	10870404 	addi	r2,r2,7184
   4c194:	dfc00615 	stw	ra,24(sp)
   4c198:	dc400515 	stw	r17,20(sp)
   4c19c:	dc000415 	stw	r16,16(sp)
   4c1a0:	3823883a 	mov	r17,r7
   4c1a4:	14000017 	ldw	r16,0(r2)
   4c1a8:	d9000115 	stw	r4,4(sp)
   4c1ac:	d9400215 	stw	r5,8(sp)
   4c1b0:	d9800315 	stw	r6,12(sp)
   4c1b4:	0047e280 	call	47e28 <__locale_charset>
   4c1b8:	d9000117 	ldw	r4,4(sp)
   4c1bc:	d9400217 	ldw	r5,8(sp)
   4c1c0:	d9800317 	ldw	r6,12(sp)
   4c1c4:	dc400015 	stw	r17,0(sp)
   4c1c8:	100f883a 	mov	r7,r2
   4c1cc:	803ee83a 	callr	r16
   4c1d0:	dfc00617 	ldw	ra,24(sp)
   4c1d4:	dc400517 	ldw	r17,20(sp)
   4c1d8:	dc000417 	ldw	r16,16(sp)
   4c1dc:	dec00704 	addi	sp,sp,28
   4c1e0:	f800283a 	ret

0004c1e4 <__udivdi3>:
   4c1e4:	defff504 	addi	sp,sp,-44
   4c1e8:	dc800315 	stw	r18,12(sp)
   4c1ec:	dc400215 	stw	r17,8(sp)
   4c1f0:	dfc00a15 	stw	ra,40(sp)
   4c1f4:	df000915 	stw	fp,36(sp)
   4c1f8:	ddc00815 	stw	r23,32(sp)
   4c1fc:	dd800715 	stw	r22,28(sp)
   4c200:	dd400615 	stw	r21,24(sp)
   4c204:	dd000515 	stw	r20,20(sp)
   4c208:	dcc00415 	stw	r19,16(sp)
   4c20c:	dc000115 	stw	r16,4(sp)
   4c210:	2025883a 	mov	r18,r4
   4c214:	2823883a 	mov	r17,r5
   4c218:	3800421e 	bne	r7,zero,4c324 <__udivdi3+0x140>
   4c21c:	3021883a 	mov	r16,r6
   4c220:	2027883a 	mov	r19,r4
   4c224:	2980542e 	bgeu	r5,r6,4c378 <__udivdi3+0x194>
   4c228:	00bfffd4 	movui	r2,65535
   4c22c:	2829883a 	mov	r20,r5
   4c230:	1180a836 	bltu	r2,r6,4c4d4 <__udivdi3+0x2f0>
   4c234:	00803fc4 	movi	r2,255
   4c238:	11814336 	bltu	r2,r6,4c748 <__udivdi3+0x564>
   4c23c:	0005883a 	mov	r2,zero
   4c240:	0007883a 	mov	r3,zero
   4c244:	3084d83a 	srl	r2,r6,r2
   4c248:	01000174 	movhi	r4,5
   4c24c:	213f5604 	addi	r4,r4,-680
   4c250:	2085883a 	add	r2,r4,r2
   4c254:	10800003 	ldbu	r2,0(r2)
   4c258:	10c7883a 	add	r3,r2,r3
   4c25c:	00800804 	movi	r2,32
   4c260:	10c5c83a 	sub	r2,r2,r3
   4c264:	10000526 	beq	r2,zero,4c27c <__udivdi3+0x98>
   4c268:	88a2983a 	sll	r17,r17,r2
   4c26c:	90c6d83a 	srl	r3,r18,r3
   4c270:	30a0983a 	sll	r16,r6,r2
   4c274:	90a6983a 	sll	r19,r18,r2
   4c278:	88e8b03a 	or	r20,r17,r3
   4c27c:	8022d43a 	srli	r17,r16,16
   4c280:	a009883a 	mov	r4,r20
   4c284:	857fffcc 	andi	r21,r16,65535
   4c288:	880b883a 	mov	r5,r17
   4c28c:	0040fbc0 	call	40fbc <__umodsi3>
   4c290:	a009883a 	mov	r4,r20
   4c294:	880b883a 	mov	r5,r17
   4c298:	102d883a 	mov	r22,r2
   4c29c:	0040fb40 	call	40fb4 <__udivsi3>
   4c2a0:	b02c943a 	slli	r22,r22,16
   4c2a4:	9806d43a 	srli	r3,r19,16
   4c2a8:	1549383a 	mul	r4,r2,r21
   4c2ac:	1025883a 	mov	r18,r2
   4c2b0:	b0c6b03a 	or	r3,r22,r3
   4c2b4:	1900052e 	bgeu	r3,r4,4c2cc <__udivdi3+0xe8>
   4c2b8:	1c07883a 	add	r3,r3,r16
   4c2bc:	10bfffc4 	addi	r2,r2,-1
   4c2c0:	1c000136 	bltu	r3,r16,4c2c8 <__udivdi3+0xe4>
   4c2c4:	19013536 	bltu	r3,r4,4c79c <__udivdi3+0x5b8>
   4c2c8:	1025883a 	mov	r18,r2
   4c2cc:	1929c83a 	sub	r20,r3,r4
   4c2d0:	a009883a 	mov	r4,r20
   4c2d4:	880b883a 	mov	r5,r17
   4c2d8:	0040fbc0 	call	40fbc <__umodsi3>
   4c2dc:	102d883a 	mov	r22,r2
   4c2e0:	a009883a 	mov	r4,r20
   4c2e4:	880b883a 	mov	r5,r17
   4c2e8:	0040fb40 	call	40fb4 <__udivsi3>
   4c2ec:	b02c943a 	slli	r22,r22,16
   4c2f0:	156b383a 	mul	r21,r2,r21
   4c2f4:	9cffffcc 	andi	r19,r19,65535
   4c2f8:	b4e6b03a 	or	r19,r22,r19
   4c2fc:	9d40052e 	bgeu	r19,r21,4c314 <__udivdi3+0x130>
   4c300:	9c27883a 	add	r19,r19,r16
   4c304:	10ffffc4 	addi	r3,r2,-1
   4c308:	9c00f636 	bltu	r19,r16,4c6e4 <__udivdi3+0x500>
   4c30c:	9d40f52e 	bgeu	r19,r21,4c6e4 <__udivdi3+0x500>
   4c310:	10bfff84 	addi	r2,r2,-2
   4c314:	9024943a 	slli	r18,r18,16
   4c318:	0007883a 	mov	r3,zero
   4c31c:	1484b03a 	or	r2,r2,r18
   4c320:	00005b06 	br	4c490 <__udivdi3+0x2ac>
   4c324:	29c05836 	bltu	r5,r7,4c488 <__udivdi3+0x2a4>
   4c328:	00bfffd4 	movui	r2,65535
   4c32c:	11c0642e 	bgeu	r2,r7,4c4c0 <__udivdi3+0x2dc>
   4c330:	00804034 	movhi	r2,256
   4c334:	10bfffc4 	addi	r2,r2,-1
   4c338:	11c0f436 	bltu	r2,r7,4c70c <__udivdi3+0x528>
   4c33c:	00c00404 	movi	r3,16
   4c340:	180b883a 	mov	r5,r3
   4c344:	38c6d83a 	srl	r3,r7,r3
   4c348:	01000174 	movhi	r4,5
   4c34c:	213f5604 	addi	r4,r4,-680
   4c350:	04000804 	movi	r16,32
   4c354:	20c7883a 	add	r3,r4,r3
   4c358:	18800003 	ldbu	r2,0(r3)
   4c35c:	1145883a 	add	r2,r2,r5
   4c360:	80a1c83a 	sub	r16,r16,r2
   4c364:	8000661e 	bne	r16,zero,4c500 <__udivdi3+0x31c>
   4c368:	3c40fa36 	bltu	r7,r17,4c754 <__udivdi3+0x570>
   4c36c:	9185403a 	cmpgeu	r2,r18,r6
   4c370:	0007883a 	mov	r3,zero
   4c374:	00004606 	br	4c490 <__udivdi3+0x2ac>
   4c378:	3000041e 	bne	r6,zero,4c38c <__udivdi3+0x1a8>
   4c37c:	01000044 	movi	r4,1
   4c380:	000b883a 	mov	r5,zero
   4c384:	0040fb40 	call	40fb4 <__udivsi3>
   4c388:	1021883a 	mov	r16,r2
   4c38c:	00bfffd4 	movui	r2,65535
   4c390:	1400562e 	bgeu	r2,r16,4c4ec <__udivdi3+0x308>
   4c394:	00804034 	movhi	r2,256
   4c398:	10bfffc4 	addi	r2,r2,-1
   4c39c:	1400e436 	bltu	r2,r16,4c730 <__udivdi3+0x54c>
   4c3a0:	00800404 	movi	r2,16
   4c3a4:	1007883a 	mov	r3,r2
   4c3a8:	8084d83a 	srl	r2,r16,r2
   4c3ac:	01000174 	movhi	r4,5
   4c3b0:	213f5604 	addi	r4,r4,-680
   4c3b4:	2085883a 	add	r2,r4,r2
   4c3b8:	10800003 	ldbu	r2,0(r2)
   4c3bc:	10c7883a 	add	r3,r2,r3
   4c3c0:	00800804 	movi	r2,32
   4c3c4:	10c5c83a 	sub	r2,r2,r3
   4c3c8:	1000921e 	bne	r2,zero,4c614 <__udivdi3+0x430>
   4c3cc:	8028d43a 	srli	r20,r16,16
   4c3d0:	8c23c83a 	sub	r17,r17,r16
   4c3d4:	857fffcc 	andi	r21,r16,65535
   4c3d8:	00c00044 	movi	r3,1
   4c3dc:	8809883a 	mov	r4,r17
   4c3e0:	a00b883a 	mov	r5,r20
   4c3e4:	d8c00015 	stw	r3,0(sp)
   4c3e8:	0040fbc0 	call	40fbc <__umodsi3>
   4c3ec:	8809883a 	mov	r4,r17
   4c3f0:	a00b883a 	mov	r5,r20
   4c3f4:	102d883a 	mov	r22,r2
   4c3f8:	0040fb40 	call	40fb4 <__udivsi3>
   4c3fc:	b02c943a 	slli	r22,r22,16
   4c400:	9808d43a 	srli	r4,r19,16
   4c404:	154b383a 	mul	r5,r2,r21
   4c408:	1025883a 	mov	r18,r2
   4c40c:	b108b03a 	or	r4,r22,r4
   4c410:	d8c00017 	ldw	r3,0(sp)
   4c414:	2140052e 	bgeu	r4,r5,4c42c <__udivdi3+0x248>
   4c418:	2409883a 	add	r4,r4,r16
   4c41c:	10bfffc4 	addi	r2,r2,-1
   4c420:	24000136 	bltu	r4,r16,4c428 <__udivdi3+0x244>
   4c424:	2140da36 	bltu	r4,r5,4c790 <__udivdi3+0x5ac>
   4c428:	1025883a 	mov	r18,r2
   4c42c:	2163c83a 	sub	r17,r4,r5
   4c430:	8809883a 	mov	r4,r17
   4c434:	a00b883a 	mov	r5,r20
   4c438:	d8c00015 	stw	r3,0(sp)
   4c43c:	0040fbc0 	call	40fbc <__umodsi3>
   4c440:	102d883a 	mov	r22,r2
   4c444:	8809883a 	mov	r4,r17
   4c448:	a00b883a 	mov	r5,r20
   4c44c:	0040fb40 	call	40fb4 <__udivsi3>
   4c450:	b02c943a 	slli	r22,r22,16
   4c454:	156b383a 	mul	r21,r2,r21
   4c458:	9cffffcc 	andi	r19,r19,65535
   4c45c:	b4e6b03a 	or	r19,r22,r19
   4c460:	d8c00017 	ldw	r3,0(sp)
   4c464:	9d40052e 	bgeu	r19,r21,4c47c <__udivdi3+0x298>
   4c468:	9c27883a 	add	r19,r19,r16
   4c46c:	113fffc4 	addi	r4,r2,-1
   4c470:	9c009a36 	bltu	r19,r16,4c6dc <__udivdi3+0x4f8>
   4c474:	9d40992e 	bgeu	r19,r21,4c6dc <__udivdi3+0x4f8>
   4c478:	10bfff84 	addi	r2,r2,-2
   4c47c:	9024943a 	slli	r18,r18,16
   4c480:	1484b03a 	or	r2,r2,r18
   4c484:	00000206 	br	4c490 <__udivdi3+0x2ac>
   4c488:	0007883a 	mov	r3,zero
   4c48c:	0005883a 	mov	r2,zero
   4c490:	dfc00a17 	ldw	ra,40(sp)
   4c494:	df000917 	ldw	fp,36(sp)
   4c498:	ddc00817 	ldw	r23,32(sp)
   4c49c:	dd800717 	ldw	r22,28(sp)
   4c4a0:	dd400617 	ldw	r21,24(sp)
   4c4a4:	dd000517 	ldw	r20,20(sp)
   4c4a8:	dcc00417 	ldw	r19,16(sp)
   4c4ac:	dc800317 	ldw	r18,12(sp)
   4c4b0:	dc400217 	ldw	r17,8(sp)
   4c4b4:	dc000117 	ldw	r16,4(sp)
   4c4b8:	dec00b04 	addi	sp,sp,44
   4c4bc:	f800283a 	ret
   4c4c0:	00803fc4 	movi	r2,255
   4c4c4:	11c09436 	bltu	r2,r7,4c718 <__udivdi3+0x534>
   4c4c8:	0007883a 	mov	r3,zero
   4c4cc:	000b883a 	mov	r5,zero
   4c4d0:	003f9c06 	br	4c344 <__udivdi3+0x160>
   4c4d4:	00804034 	movhi	r2,256
   4c4d8:	10bfffc4 	addi	r2,r2,-1
   4c4dc:	11809136 	bltu	r2,r6,4c724 <__udivdi3+0x540>
   4c4e0:	00800404 	movi	r2,16
   4c4e4:	1007883a 	mov	r3,r2
   4c4e8:	003f5606 	br	4c244 <__udivdi3+0x60>
   4c4ec:	00803fc4 	movi	r2,255
   4c4f0:	14009236 	bltu	r2,r16,4c73c <__udivdi3+0x558>
   4c4f4:	0005883a 	mov	r2,zero
   4c4f8:	0007883a 	mov	r3,zero
   4c4fc:	003faa06 	br	4c3a8 <__udivdi3+0x1c4>
   4c500:	3086d83a 	srl	r3,r6,r2
   4c504:	3c0e983a 	sll	r7,r7,r16
   4c508:	88aad83a 	srl	r21,r17,r2
   4c50c:	9084d83a 	srl	r2,r18,r2
   4c510:	38e6b03a 	or	r19,r7,r3
   4c514:	9828d43a 	srli	r20,r19,16
   4c518:	8c22983a 	sll	r17,r17,r16
   4c51c:	a809883a 	mov	r4,r21
   4c520:	a00b883a 	mov	r5,r20
   4c524:	342c983a 	sll	r22,r6,r16
   4c528:	88a2b03a 	or	r17,r17,r2
   4c52c:	0040fbc0 	call	40fbc <__umodsi3>
   4c530:	a809883a 	mov	r4,r21
   4c534:	a00b883a 	mov	r5,r20
   4c538:	1039883a 	mov	fp,r2
   4c53c:	0040fb40 	call	40fb4 <__udivsi3>
   4c540:	102b883a 	mov	r21,r2
   4c544:	9dffffcc 	andi	r23,r19,65535
   4c548:	e008943a 	slli	r4,fp,16
   4c54c:	8804d43a 	srli	r2,r17,16
   4c550:	adcd383a 	mul	r6,r21,r23
   4c554:	2088b03a 	or	r4,r4,r2
   4c558:	2180042e 	bgeu	r4,r6,4c56c <__udivdi3+0x388>
   4c55c:	24c9883a 	add	r4,r4,r19
   4c560:	a8bfffc4 	addi	r2,r21,-1
   4c564:	24c0822e 	bgeu	r4,r19,4c770 <__udivdi3+0x58c>
   4c568:	102b883a 	mov	r21,r2
   4c56c:	21b9c83a 	sub	fp,r4,r6
   4c570:	e009883a 	mov	r4,fp
   4c574:	a00b883a 	mov	r5,r20
   4c578:	0040fbc0 	call	40fbc <__umodsi3>
   4c57c:	e009883a 	mov	r4,fp
   4c580:	a00b883a 	mov	r5,r20
   4c584:	d8800015 	stw	r2,0(sp)
   4c588:	0040fb40 	call	40fb4 <__udivsi3>
   4c58c:	d8c00017 	ldw	r3,0(sp)
   4c590:	15cb383a 	mul	r5,r2,r23
   4c594:	8c7fffcc 	andi	r17,r17,65535
   4c598:	1806943a 	slli	r3,r3,16
   4c59c:	1009883a 	mov	r4,r2
   4c5a0:	1c46b03a 	or	r3,r3,r17
   4c5a4:	1940042e 	bgeu	r3,r5,4c5b8 <__udivdi3+0x3d4>
   4c5a8:	1cc7883a 	add	r3,r3,r19
   4c5ac:	10bfffc4 	addi	r2,r2,-1
   4c5b0:	1cc06b2e 	bgeu	r3,r19,4c760 <__udivdi3+0x57c>
   4c5b4:	1009883a 	mov	r4,r2
   4c5b8:	a804943a 	slli	r2,r21,16
   4c5bc:	b1ffffcc 	andi	r7,r22,65535
   4c5c0:	b02cd43a 	srli	r22,r22,16
   4c5c4:	2084b03a 	or	r2,r4,r2
   4c5c8:	113fffcc 	andi	r4,r2,65535
   4c5cc:	100cd43a 	srli	r6,r2,16
   4c5d0:	21d1383a 	mul	r8,r4,r7
   4c5d4:	2589383a 	mul	r4,r4,r22
   4c5d8:	31cf383a 	mul	r7,r6,r7
   4c5dc:	4012d43a 	srli	r9,r8,16
   4c5e0:	1947c83a 	sub	r3,r3,r5
   4c5e4:	3909883a 	add	r4,r7,r4
   4c5e8:	2249883a 	add	r4,r4,r9
   4c5ec:	35ad383a 	mul	r22,r6,r22
   4c5f0:	21c0022e 	bgeu	r4,r7,4c5fc <__udivdi3+0x418>
   4c5f4:	01400074 	movhi	r5,1
   4c5f8:	b16d883a 	add	r22,r22,r5
   4c5fc:	200ad43a 	srli	r5,r4,16
   4c600:	b16d883a 	add	r22,r22,r5
   4c604:	1d803e36 	bltu	r3,r22,4c700 <__udivdi3+0x51c>
   4c608:	1d803826 	beq	r3,r22,4c6ec <__udivdi3+0x508>
   4c60c:	0007883a 	mov	r3,zero
   4c610:	003f9f06 	br	4c490 <__udivdi3+0x2ac>
   4c614:	80a0983a 	sll	r16,r16,r2
   4c618:	88ead83a 	srl	r21,r17,r3
   4c61c:	90c6d83a 	srl	r3,r18,r3
   4c620:	8028d43a 	srli	r20,r16,16
   4c624:	88a2983a 	sll	r17,r17,r2
   4c628:	a809883a 	mov	r4,r21
   4c62c:	a00b883a 	mov	r5,r20
   4c630:	88ecb03a 	or	r22,r17,r3
   4c634:	90a6983a 	sll	r19,r18,r2
   4c638:	0040fbc0 	call	40fbc <__umodsi3>
   4c63c:	a809883a 	mov	r4,r21
   4c640:	a00b883a 	mov	r5,r20
   4c644:	1023883a 	mov	r17,r2
   4c648:	0040fb40 	call	40fb4 <__udivsi3>
   4c64c:	1025883a 	mov	r18,r2
   4c650:	857fffcc 	andi	r21,r16,65535
   4c654:	8808943a 	slli	r4,r17,16
   4c658:	b004d43a 	srli	r2,r22,16
   4c65c:	9547383a 	mul	r3,r18,r21
   4c660:	2088b03a 	or	r4,r4,r2
   4c664:	20c0062e 	bgeu	r4,r3,4c680 <__udivdi3+0x49c>
   4c668:	2409883a 	add	r4,r4,r16
   4c66c:	90bfffc4 	addi	r2,r18,-1
   4c670:	24004536 	bltu	r4,r16,4c788 <__udivdi3+0x5a4>
   4c674:	20c0442e 	bgeu	r4,r3,4c788 <__udivdi3+0x5a4>
   4c678:	94bfff84 	addi	r18,r18,-2
   4c67c:	2409883a 	add	r4,r4,r16
   4c680:	20efc83a 	sub	r23,r4,r3
   4c684:	b809883a 	mov	r4,r23
   4c688:	a00b883a 	mov	r5,r20
   4c68c:	0040fbc0 	call	40fbc <__umodsi3>
   4c690:	1023883a 	mov	r17,r2
   4c694:	a00b883a 	mov	r5,r20
   4c698:	b809883a 	mov	r4,r23
   4c69c:	0040fb40 	call	40fb4 <__udivsi3>
   4c6a0:	8822943a 	slli	r17,r17,16
   4c6a4:	154b383a 	mul	r5,r2,r21
   4c6a8:	b5bfffcc 	andi	r22,r22,65535
   4c6ac:	8da2b03a 	or	r17,r17,r22
   4c6b0:	8940062e 	bgeu	r17,r5,4c6cc <__udivdi3+0x4e8>
   4c6b4:	8c23883a 	add	r17,r17,r16
   4c6b8:	10ffffc4 	addi	r3,r2,-1
   4c6bc:	8c003036 	bltu	r17,r16,4c780 <__udivdi3+0x59c>
   4c6c0:	89402f2e 	bgeu	r17,r5,4c780 <__udivdi3+0x59c>
   4c6c4:	10bfff84 	addi	r2,r2,-2
   4c6c8:	8c23883a 	add	r17,r17,r16
   4c6cc:	9006943a 	slli	r3,r18,16
   4c6d0:	8963c83a 	sub	r17,r17,r5
   4c6d4:	10c6b03a 	or	r3,r2,r3
   4c6d8:	003f4006 	br	4c3dc <__udivdi3+0x1f8>
   4c6dc:	2005883a 	mov	r2,r4
   4c6e0:	003f6606 	br	4c47c <__udivdi3+0x298>
   4c6e4:	1805883a 	mov	r2,r3
   4c6e8:	003f0a06 	br	4c314 <__udivdi3+0x130>
   4c6ec:	2008943a 	slli	r4,r4,16
   4c6f0:	9420983a 	sll	r16,r18,r16
   4c6f4:	423fffcc 	andi	r8,r8,65535
   4c6f8:	2209883a 	add	r4,r4,r8
   4c6fc:	813fc32e 	bgeu	r16,r4,4c60c <__udivdi3+0x428>
   4c700:	10bfffc4 	addi	r2,r2,-1
   4c704:	0007883a 	mov	r3,zero
   4c708:	003f6106 	br	4c490 <__udivdi3+0x2ac>
   4c70c:	00c00604 	movi	r3,24
   4c710:	180b883a 	mov	r5,r3
   4c714:	003f0b06 	br	4c344 <__udivdi3+0x160>
   4c718:	00c00204 	movi	r3,8
   4c71c:	180b883a 	mov	r5,r3
   4c720:	003f0806 	br	4c344 <__udivdi3+0x160>
   4c724:	00800604 	movi	r2,24
   4c728:	1007883a 	mov	r3,r2
   4c72c:	003ec506 	br	4c244 <__udivdi3+0x60>
   4c730:	00800604 	movi	r2,24
   4c734:	1007883a 	mov	r3,r2
   4c738:	003f1b06 	br	4c3a8 <__udivdi3+0x1c4>
   4c73c:	00800204 	movi	r2,8
   4c740:	1007883a 	mov	r3,r2
   4c744:	003f1806 	br	4c3a8 <__udivdi3+0x1c4>
   4c748:	00800204 	movi	r2,8
   4c74c:	1007883a 	mov	r3,r2
   4c750:	003ebc06 	br	4c244 <__udivdi3+0x60>
   4c754:	0007883a 	mov	r3,zero
   4c758:	00800044 	movi	r2,1
   4c75c:	003f4c06 	br	4c490 <__udivdi3+0x2ac>
   4c760:	197f942e 	bgeu	r3,r5,4c5b4 <__udivdi3+0x3d0>
   4c764:	213fff84 	addi	r4,r4,-2
   4c768:	1cc7883a 	add	r3,r3,r19
   4c76c:	003f9206 	br	4c5b8 <__udivdi3+0x3d4>
   4c770:	21bf7d2e 	bgeu	r4,r6,4c568 <__udivdi3+0x384>
   4c774:	ad7fff84 	addi	r21,r21,-2
   4c778:	24c9883a 	add	r4,r4,r19
   4c77c:	003f7b06 	br	4c56c <__udivdi3+0x388>
   4c780:	1805883a 	mov	r2,r3
   4c784:	003fd106 	br	4c6cc <__udivdi3+0x4e8>
   4c788:	1025883a 	mov	r18,r2
   4c78c:	003fbc06 	br	4c680 <__udivdi3+0x49c>
   4c790:	94bfff84 	addi	r18,r18,-2
   4c794:	2409883a 	add	r4,r4,r16
   4c798:	003f2406 	br	4c42c <__udivdi3+0x248>
   4c79c:	94bfff84 	addi	r18,r18,-2
   4c7a0:	1c07883a 	add	r3,r3,r16
   4c7a4:	003ec906 	br	4c2cc <__udivdi3+0xe8>

0004c7a8 <__umoddi3>:
   4c7a8:	defff504 	addi	sp,sp,-44
   4c7ac:	dd000515 	stw	r20,20(sp)
   4c7b0:	dc800315 	stw	r18,12(sp)
   4c7b4:	dc400215 	stw	r17,8(sp)
   4c7b8:	dfc00a15 	stw	ra,40(sp)
   4c7bc:	df000915 	stw	fp,36(sp)
   4c7c0:	ddc00815 	stw	r23,32(sp)
   4c7c4:	dd800715 	stw	r22,28(sp)
   4c7c8:	dd400615 	stw	r21,24(sp)
   4c7cc:	dcc00415 	stw	r19,16(sp)
   4c7d0:	dc000115 	stw	r16,4(sp)
   4c7d4:	2025883a 	mov	r18,r4
   4c7d8:	2823883a 	mov	r17,r5
   4c7dc:	2829883a 	mov	r20,r5
   4c7e0:	3800381e 	bne	r7,zero,4c8c4 <__umoddi3+0x11c>
   4c7e4:	3021883a 	mov	r16,r6
   4c7e8:	2027883a 	mov	r19,r4
   4c7ec:	29804e2e 	bgeu	r5,r6,4c928 <__umoddi3+0x180>
   4c7f0:	00bfffd4 	movui	r2,65535
   4c7f4:	11809c36 	bltu	r2,r6,4ca68 <__umoddi3+0x2c0>
   4c7f8:	00803fc4 	movi	r2,255
   4c7fc:	11813c36 	bltu	r2,r6,4ccf0 <__umoddi3+0x548>
   4c800:	0005883a 	mov	r2,zero
   4c804:	0009883a 	mov	r4,zero
   4c808:	3084d83a 	srl	r2,r6,r2
   4c80c:	00c00174 	movhi	r3,5
   4c810:	18ff5604 	addi	r3,r3,-680
   4c814:	1885883a 	add	r2,r3,r2
   4c818:	10800003 	ldbu	r2,0(r2)
   4c81c:	1109883a 	add	r4,r2,r4
   4c820:	00800804 	movi	r2,32
   4c824:	1105c83a 	sub	r2,r2,r4
   4c828:	1000ee26 	beq	r2,zero,4cbe4 <__umoddi3+0x43c>
   4c82c:	9108d83a 	srl	r4,r18,r4
   4c830:	88a2983a 	sll	r17,r17,r2
   4c834:	30a0983a 	sll	r16,r6,r2
   4c838:	90a6983a 	sll	r19,r18,r2
   4c83c:	8928b03a 	or	r20,r17,r4
   4c840:	1025883a 	mov	r18,r2
   4c844:	8022d43a 	srli	r17,r16,16
   4c848:	a009883a 	mov	r4,r20
   4c84c:	857fffcc 	andi	r21,r16,65535
   4c850:	880b883a 	mov	r5,r17
   4c854:	0040fbc0 	call	40fbc <__umodsi3>
   4c858:	a009883a 	mov	r4,r20
   4c85c:	880b883a 	mov	r5,r17
   4c860:	102d883a 	mov	r22,r2
   4c864:	0040fb40 	call	40fb4 <__udivsi3>
   4c868:	b02c943a 	slli	r22,r22,16
   4c86c:	9806d43a 	srli	r3,r19,16
   4c870:	1545383a 	mul	r2,r2,r21
   4c874:	b0c6b03a 	or	r3,r22,r3
   4c878:	1880042e 	bgeu	r3,r2,4c88c <__umoddi3+0xe4>
   4c87c:	1c07883a 	add	r3,r3,r16
   4c880:	1c000236 	bltu	r3,r16,4c88c <__umoddi3+0xe4>
   4c884:	1880012e 	bgeu	r3,r2,4c88c <__umoddi3+0xe4>
   4c888:	1c07883a 	add	r3,r3,r16
   4c88c:	18a9c83a 	sub	r20,r3,r2
   4c890:	a009883a 	mov	r4,r20
   4c894:	880b883a 	mov	r5,r17
   4c898:	0040fbc0 	call	40fbc <__umodsi3>
   4c89c:	102d883a 	mov	r22,r2
   4c8a0:	a009883a 	mov	r4,r20
   4c8a4:	880b883a 	mov	r5,r17
   4c8a8:	0040fb40 	call	40fb4 <__udivsi3>
   4c8ac:	b02c943a 	slli	r22,r22,16
   4c8b0:	1545383a 	mul	r2,r2,r21
   4c8b4:	9cffffcc 	andi	r19,r19,65535
   4c8b8:	b4e6b03a 	or	r19,r22,r19
   4c8bc:	9880532e 	bgeu	r19,r2,4ca0c <__umoddi3+0x264>
   4c8c0:	00004e06 	br	4c9fc <__umoddi3+0x254>
   4c8c4:	29c05536 	bltu	r5,r7,4ca1c <__umoddi3+0x274>
   4c8c8:	00bfffd4 	movui	r2,65535
   4c8cc:	11c0612e 	bgeu	r2,r7,4ca54 <__umoddi3+0x2ac>
   4c8d0:	00804034 	movhi	r2,256
   4c8d4:	10bfffc4 	addi	r2,r2,-1
   4c8d8:	11c0f936 	bltu	r2,r7,4ccc0 <__umoddi3+0x518>
   4c8dc:	00c00404 	movi	r3,16
   4c8e0:	1827883a 	mov	r19,r3
   4c8e4:	38c6d83a 	srl	r3,r7,r3
   4c8e8:	01000174 	movhi	r4,5
   4c8ec:	213f5604 	addi	r4,r4,-680
   4c8f0:	04000804 	movi	r16,32
   4c8f4:	20c7883a 	add	r3,r4,r3
   4c8f8:	18800003 	ldbu	r2,0(r3)
   4c8fc:	14e7883a 	add	r19,r2,r19
   4c900:	84e1c83a 	sub	r16,r16,r19
   4c904:	8000631e 	bne	r16,zero,4ca94 <__umoddi3+0x2ec>
   4c908:	3c400136 	bltu	r7,r17,4c910 <__umoddi3+0x168>
   4c90c:	91810536 	bltu	r18,r6,4cd24 <__umoddi3+0x57c>
   4c910:	9185c83a 	sub	r2,r18,r6
   4c914:	89e3c83a 	sub	r17,r17,r7
   4c918:	90a5803a 	cmpltu	r18,r18,r2
   4c91c:	8ca9c83a 	sub	r20,r17,r18
   4c920:	a007883a 	mov	r3,r20
   4c924:	00003f06 	br	4ca24 <__umoddi3+0x27c>
   4c928:	3000041e 	bne	r6,zero,4c93c <__umoddi3+0x194>
   4c92c:	01000044 	movi	r4,1
   4c930:	000b883a 	mov	r5,zero
   4c934:	0040fb40 	call	40fb4 <__udivsi3>
   4c938:	1021883a 	mov	r16,r2
   4c93c:	00bfffd4 	movui	r2,65535
   4c940:	14004f2e 	bgeu	r2,r16,4ca80 <__umoddi3+0x2d8>
   4c944:	00804034 	movhi	r2,256
   4c948:	10bfffc4 	addi	r2,r2,-1
   4c94c:	1400e536 	bltu	r2,r16,4cce4 <__umoddi3+0x53c>
   4c950:	00800404 	movi	r2,16
   4c954:	1007883a 	mov	r3,r2
   4c958:	8084d83a 	srl	r2,r16,r2
   4c95c:	01000174 	movhi	r4,5
   4c960:	213f5604 	addi	r4,r4,-680
   4c964:	05400804 	movi	r21,32
   4c968:	2085883a 	add	r2,r4,r2
   4c96c:	10800003 	ldbu	r2,0(r2)
   4c970:	10c7883a 	add	r3,r2,r3
   4c974:	a8ebc83a 	sub	r21,r21,r3
   4c978:	a8009c1e 	bne	r21,zero,4cbec <__umoddi3+0x444>
   4c97c:	8028d43a 	srli	r20,r16,16
   4c980:	8c23c83a 	sub	r17,r17,r16
   4c984:	85bfffcc 	andi	r22,r16,65535
   4c988:	0025883a 	mov	r18,zero
   4c98c:	8809883a 	mov	r4,r17
   4c990:	a00b883a 	mov	r5,r20
   4c994:	0040fbc0 	call	40fbc <__umodsi3>
   4c998:	8809883a 	mov	r4,r17
   4c99c:	a00b883a 	mov	r5,r20
   4c9a0:	102b883a 	mov	r21,r2
   4c9a4:	0040fb40 	call	40fb4 <__udivsi3>
   4c9a8:	a82a943a 	slli	r21,r21,16
   4c9ac:	9806d43a 	srli	r3,r19,16
   4c9b0:	1585383a 	mul	r2,r2,r22
   4c9b4:	a8c6b03a 	or	r3,r21,r3
   4c9b8:	1880032e 	bgeu	r3,r2,4c9c8 <__umoddi3+0x220>
   4c9bc:	1c07883a 	add	r3,r3,r16
   4c9c0:	1c000136 	bltu	r3,r16,4c9c8 <__umoddi3+0x220>
   4c9c4:	1880d536 	bltu	r3,r2,4cd1c <__umoddi3+0x574>
   4c9c8:	18a3c83a 	sub	r17,r3,r2
   4c9cc:	8809883a 	mov	r4,r17
   4c9d0:	a00b883a 	mov	r5,r20
   4c9d4:	0040fbc0 	call	40fbc <__umodsi3>
   4c9d8:	102b883a 	mov	r21,r2
   4c9dc:	8809883a 	mov	r4,r17
   4c9e0:	a00b883a 	mov	r5,r20
   4c9e4:	0040fb40 	call	40fb4 <__udivsi3>
   4c9e8:	a82a943a 	slli	r21,r21,16
   4c9ec:	1585383a 	mul	r2,r2,r22
   4c9f0:	9cffffcc 	andi	r19,r19,65535
   4c9f4:	ace6b03a 	or	r19,r21,r19
   4c9f8:	9880042e 	bgeu	r19,r2,4ca0c <__umoddi3+0x264>
   4c9fc:	9c27883a 	add	r19,r19,r16
   4ca00:	9c000236 	bltu	r19,r16,4ca0c <__umoddi3+0x264>
   4ca04:	9880012e 	bgeu	r19,r2,4ca0c <__umoddi3+0x264>
   4ca08:	9c27883a 	add	r19,r19,r16
   4ca0c:	98a7c83a 	sub	r19,r19,r2
   4ca10:	9c84d83a 	srl	r2,r19,r18
   4ca14:	0007883a 	mov	r3,zero
   4ca18:	00000206 	br	4ca24 <__umoddi3+0x27c>
   4ca1c:	2005883a 	mov	r2,r4
   4ca20:	2807883a 	mov	r3,r5
   4ca24:	dfc00a17 	ldw	ra,40(sp)
   4ca28:	df000917 	ldw	fp,36(sp)
   4ca2c:	ddc00817 	ldw	r23,32(sp)
   4ca30:	dd800717 	ldw	r22,28(sp)
   4ca34:	dd400617 	ldw	r21,24(sp)
   4ca38:	dd000517 	ldw	r20,20(sp)
   4ca3c:	dcc00417 	ldw	r19,16(sp)
   4ca40:	dc800317 	ldw	r18,12(sp)
   4ca44:	dc400217 	ldw	r17,8(sp)
   4ca48:	dc000117 	ldw	r16,4(sp)
   4ca4c:	dec00b04 	addi	sp,sp,44
   4ca50:	f800283a 	ret
   4ca54:	00803fc4 	movi	r2,255
   4ca58:	11c09636 	bltu	r2,r7,4ccb4 <__umoddi3+0x50c>
   4ca5c:	0007883a 	mov	r3,zero
   4ca60:	0027883a 	mov	r19,zero
   4ca64:	003f9f06 	br	4c8e4 <__umoddi3+0x13c>
   4ca68:	00804034 	movhi	r2,256
   4ca6c:	10bfffc4 	addi	r2,r2,-1
   4ca70:	11809636 	bltu	r2,r6,4cccc <__umoddi3+0x524>
   4ca74:	00800404 	movi	r2,16
   4ca78:	1009883a 	mov	r4,r2
   4ca7c:	003f6206 	br	4c808 <__umoddi3+0x60>
   4ca80:	00803fc4 	movi	r2,255
   4ca84:	14009436 	bltu	r2,r16,4ccd8 <__umoddi3+0x530>
   4ca88:	0005883a 	mov	r2,zero
   4ca8c:	0007883a 	mov	r3,zero
   4ca90:	003fb106 	br	4c958 <__umoddi3+0x1b0>
   4ca94:	3c0e983a 	sll	r7,r7,r16
   4ca98:	34c4d83a 	srl	r2,r6,r19
   4ca9c:	8ceed83a 	srl	r23,r17,r19
   4caa0:	8c22983a 	sll	r17,r17,r16
   4caa4:	38a8b03a 	or	r20,r7,r2
   4caa8:	a02ad43a 	srli	r21,r20,16
   4caac:	94c4d83a 	srl	r2,r18,r19
   4cab0:	b809883a 	mov	r4,r23
   4cab4:	a80b883a 	mov	r5,r21
   4cab8:	88a2b03a 	or	r17,r17,r2
   4cabc:	342c983a 	sll	r22,r6,r16
   4cac0:	0040fbc0 	call	40fbc <__umodsi3>
   4cac4:	b809883a 	mov	r4,r23
   4cac8:	a80b883a 	mov	r5,r21
   4cacc:	d8800015 	stw	r2,0(sp)
   4cad0:	0040fb40 	call	40fb4 <__udivsi3>
   4cad4:	d8c00017 	ldw	r3,0(sp)
   4cad8:	102f883a 	mov	r23,r2
   4cadc:	a73fffcc 	andi	fp,r20,65535
   4cae0:	180a943a 	slli	r5,r3,16
   4cae4:	8804d43a 	srli	r2,r17,16
   4cae8:	bf0f383a 	mul	r7,r23,fp
   4caec:	9424983a 	sll	r18,r18,r16
   4caf0:	288ab03a 	or	r5,r5,r2
   4caf4:	29c0042e 	bgeu	r5,r7,4cb08 <__umoddi3+0x360>
   4caf8:	2d0b883a 	add	r5,r5,r20
   4cafc:	b8bfffc4 	addi	r2,r23,-1
   4cb00:	2d00822e 	bgeu	r5,r20,4cd0c <__umoddi3+0x564>
   4cb04:	102f883a 	mov	r23,r2
   4cb08:	29cfc83a 	sub	r7,r5,r7
   4cb0c:	3809883a 	mov	r4,r7
   4cb10:	a80b883a 	mov	r5,r21
   4cb14:	d9c00015 	stw	r7,0(sp)
   4cb18:	0040fbc0 	call	40fbc <__umodsi3>
   4cb1c:	d9c00017 	ldw	r7,0(sp)
   4cb20:	a80b883a 	mov	r5,r21
   4cb24:	d8800015 	stw	r2,0(sp)
   4cb28:	3809883a 	mov	r4,r7
   4cb2c:	0040fb40 	call	40fb4 <__udivsi3>
   4cb30:	d8c00017 	ldw	r3,0(sp)
   4cb34:	170d383a 	mul	r6,r2,fp
   4cb38:	8c7fffcc 	andi	r17,r17,65535
   4cb3c:	1808943a 	slli	r4,r3,16
   4cb40:	2448b03a 	or	r4,r4,r17
   4cb44:	2180042e 	bgeu	r4,r6,4cb58 <__umoddi3+0x3b0>
   4cb48:	2509883a 	add	r4,r4,r20
   4cb4c:	10ffffc4 	addi	r3,r2,-1
   4cb50:	25006a2e 	bgeu	r4,r20,4ccfc <__umoddi3+0x554>
   4cb54:	1805883a 	mov	r2,r3
   4cb58:	b82e943a 	slli	r23,r23,16
   4cb5c:	b010d43a 	srli	r8,r22,16
   4cb60:	b1ffffcc 	andi	r7,r22,65535
   4cb64:	15eeb03a 	or	r23,r2,r23
   4cb68:	b8bfffcc 	andi	r2,r23,65535
   4cb6c:	b82ed43a 	srli	r23,r23,16
   4cb70:	11c7383a 	mul	r3,r2,r7
   4cb74:	1205383a 	mul	r2,r2,r8
   4cb78:	b9cf383a 	mul	r7,r23,r7
   4cb7c:	400b883a 	mov	r5,r8
   4cb80:	1810d43a 	srli	r8,r3,16
   4cb84:	3885883a 	add	r2,r7,r2
   4cb88:	2189c83a 	sub	r4,r4,r6
   4cb8c:	1205883a 	add	r2,r2,r8
   4cb90:	b94b383a 	mul	r5,r23,r5
   4cb94:	11c0022e 	bgeu	r2,r7,4cba0 <__umoddi3+0x3f8>
   4cb98:	01800074 	movhi	r6,1
   4cb9c:	298b883a 	add	r5,r5,r6
   4cba0:	100cd43a 	srli	r6,r2,16
   4cba4:	1004943a 	slli	r2,r2,16
   4cba8:	18ffffcc 	andi	r3,r3,65535
   4cbac:	298b883a 	add	r5,r5,r6
   4cbb0:	10c5883a 	add	r2,r2,r3
   4cbb4:	21403936 	bltu	r4,r5,4cc9c <__umoddi3+0x4f4>
   4cbb8:	21405d26 	beq	r4,r5,4cd30 <__umoddi3+0x588>
   4cbbc:	2147c83a 	sub	r3,r4,r5
   4cbc0:	102d883a 	mov	r22,r2
   4cbc4:	95adc83a 	sub	r22,r18,r22
   4cbc8:	95a5803a 	cmpltu	r18,r18,r22
   4cbcc:	1c87c83a 	sub	r3,r3,r18
   4cbd0:	1cc4983a 	sll	r2,r3,r19
   4cbd4:	b42cd83a 	srl	r22,r22,r16
   4cbd8:	1c06d83a 	srl	r3,r3,r16
   4cbdc:	1584b03a 	or	r2,r2,r22
   4cbe0:	003f9006 	br	4ca24 <__umoddi3+0x27c>
   4cbe4:	0025883a 	mov	r18,zero
   4cbe8:	003f1606 	br	4c844 <__umoddi3+0x9c>
   4cbec:	8560983a 	sll	r16,r16,r21
   4cbf0:	88e6d83a 	srl	r19,r17,r3
   4cbf4:	90c6d83a 	srl	r3,r18,r3
   4cbf8:	8028d43a 	srli	r20,r16,16
   4cbfc:	8d62983a 	sll	r17,r17,r21
   4cc00:	9809883a 	mov	r4,r19
   4cc04:	a00b883a 	mov	r5,r20
   4cc08:	88eeb03a 	or	r23,r17,r3
   4cc0c:	0040fbc0 	call	40fbc <__umodsi3>
   4cc10:	9809883a 	mov	r4,r19
   4cc14:	a00b883a 	mov	r5,r20
   4cc18:	1023883a 	mov	r17,r2
   4cc1c:	0040fb40 	call	40fb4 <__udivsi3>
   4cc20:	85bfffcc 	andi	r22,r16,65535
   4cc24:	8808943a 	slli	r4,r17,16
   4cc28:	b806d43a 	srli	r3,r23,16
   4cc2c:	1585383a 	mul	r2,r2,r22
   4cc30:	9566983a 	sll	r19,r18,r21
   4cc34:	20c8b03a 	or	r4,r4,r3
   4cc38:	2080042e 	bgeu	r4,r2,4cc4c <__umoddi3+0x4a4>
   4cc3c:	2409883a 	add	r4,r4,r16
   4cc40:	24000236 	bltu	r4,r16,4cc4c <__umoddi3+0x4a4>
   4cc44:	2080012e 	bgeu	r4,r2,4cc4c <__umoddi3+0x4a4>
   4cc48:	2409883a 	add	r4,r4,r16
   4cc4c:	20a5c83a 	sub	r18,r4,r2
   4cc50:	9009883a 	mov	r4,r18
   4cc54:	a00b883a 	mov	r5,r20
   4cc58:	0040fbc0 	call	40fbc <__umodsi3>
   4cc5c:	1023883a 	mov	r17,r2
   4cc60:	9009883a 	mov	r4,r18
   4cc64:	a00b883a 	mov	r5,r20
   4cc68:	0040fb40 	call	40fb4 <__udivsi3>
   4cc6c:	8822943a 	slli	r17,r17,16
   4cc70:	1585383a 	mul	r2,r2,r22
   4cc74:	bdffffcc 	andi	r23,r23,65535
   4cc78:	8de2b03a 	or	r17,r17,r23
   4cc7c:	8880042e 	bgeu	r17,r2,4cc90 <__umoddi3+0x4e8>
   4cc80:	8c23883a 	add	r17,r17,r16
   4cc84:	8c000236 	bltu	r17,r16,4cc90 <__umoddi3+0x4e8>
   4cc88:	8880012e 	bgeu	r17,r2,4cc90 <__umoddi3+0x4e8>
   4cc8c:	8c23883a 	add	r17,r17,r16
   4cc90:	88a3c83a 	sub	r17,r17,r2
   4cc94:	a825883a 	mov	r18,r21
   4cc98:	003f3c06 	br	4c98c <__umoddi3+0x1e4>
   4cc9c:	15adc83a 	sub	r22,r2,r22
   4cca0:	2d07c83a 	sub	r3,r5,r20
   4cca4:	1585803a 	cmpltu	r2,r2,r22
   4cca8:	1887c83a 	sub	r3,r3,r2
   4ccac:	20c7c83a 	sub	r3,r4,r3
   4ccb0:	003fc406 	br	4cbc4 <__umoddi3+0x41c>
   4ccb4:	00c00204 	movi	r3,8
   4ccb8:	1827883a 	mov	r19,r3
   4ccbc:	003f0906 	br	4c8e4 <__umoddi3+0x13c>
   4ccc0:	00c00604 	movi	r3,24
   4ccc4:	1827883a 	mov	r19,r3
   4ccc8:	003f0606 	br	4c8e4 <__umoddi3+0x13c>
   4cccc:	00800604 	movi	r2,24
   4ccd0:	1009883a 	mov	r4,r2
   4ccd4:	003ecc06 	br	4c808 <__umoddi3+0x60>
   4ccd8:	00800204 	movi	r2,8
   4ccdc:	1007883a 	mov	r3,r2
   4cce0:	003f1d06 	br	4c958 <__umoddi3+0x1b0>
   4cce4:	00800604 	movi	r2,24
   4cce8:	1007883a 	mov	r3,r2
   4ccec:	003f1a06 	br	4c958 <__umoddi3+0x1b0>
   4ccf0:	00800204 	movi	r2,8
   4ccf4:	1009883a 	mov	r4,r2
   4ccf8:	003ec306 	br	4c808 <__umoddi3+0x60>
   4ccfc:	21bf952e 	bgeu	r4,r6,4cb54 <__umoddi3+0x3ac>
   4cd00:	10bfff84 	addi	r2,r2,-2
   4cd04:	2509883a 	add	r4,r4,r20
   4cd08:	003f9306 	br	4cb58 <__umoddi3+0x3b0>
   4cd0c:	29ff7d2e 	bgeu	r5,r7,4cb04 <__umoddi3+0x35c>
   4cd10:	bdffff84 	addi	r23,r23,-2
   4cd14:	2d0b883a 	add	r5,r5,r20
   4cd18:	003f7b06 	br	4cb08 <__umoddi3+0x360>
   4cd1c:	1c07883a 	add	r3,r3,r16
   4cd20:	003f2906 	br	4c9c8 <__umoddi3+0x220>
   4cd24:	9005883a 	mov	r2,r18
   4cd28:	a007883a 	mov	r3,r20
   4cd2c:	003f3d06 	br	4ca24 <__umoddi3+0x27c>
   4cd30:	90bfda36 	bltu	r18,r2,4cc9c <__umoddi3+0x4f4>
   4cd34:	102d883a 	mov	r22,r2
   4cd38:	0007883a 	mov	r3,zero
   4cd3c:	003fa106 	br	4cbc4 <__umoddi3+0x41c>

0004cd40 <__eqdf2>:
   4cd40:	2806d53a 	srli	r3,r5,20
   4cd44:	3810d53a 	srli	r8,r7,20
   4cd48:	00800434 	movhi	r2,16
   4cd4c:	10bfffc4 	addi	r2,r2,-1
   4cd50:	18c1ffcc 	andi	r3,r3,2047
   4cd54:	0241ffc4 	movi	r9,2047
   4cd58:	2894703a 	and	r10,r5,r2
   4cd5c:	4201ffcc 	andi	r8,r8,2047
   4cd60:	3884703a 	and	r2,r7,r2
   4cd64:	280ad7fa 	srli	r5,r5,31
   4cd68:	380ed7fa 	srli	r7,r7,31
   4cd6c:	1a400f26 	beq	r3,r9,4cdac <__eqdf2+0x6c>
   4cd70:	0241ffc4 	movi	r9,2047
   4cd74:	42400326 	beq	r8,r9,4cd84 <__eqdf2+0x44>
   4cd78:	1a000526 	beq	r3,r8,4cd90 <__eqdf2+0x50>
   4cd7c:	00800044 	movi	r2,1
   4cd80:	f800283a 	ret
   4cd84:	1192b03a 	or	r9,r2,r6
   4cd88:	483ffc1e 	bne	r9,zero,4cd7c <__eqdf2+0x3c>
   4cd8c:	1a3ffb1e 	bne	r3,r8,4cd7c <__eqdf2+0x3c>
   4cd90:	50bffa1e 	bne	r10,r2,4cd7c <__eqdf2+0x3c>
   4cd94:	21bff91e 	bne	r4,r6,4cd7c <__eqdf2+0x3c>
   4cd98:	29c00826 	beq	r5,r7,4cdbc <__eqdf2+0x7c>
   4cd9c:	183ff71e 	bne	r3,zero,4cd7c <__eqdf2+0x3c>
   4cda0:	5104b03a 	or	r2,r10,r4
   4cda4:	1004c03a 	cmpne	r2,r2,zero
   4cda8:	f800283a 	ret
   4cdac:	5112b03a 	or	r9,r10,r4
   4cdb0:	483fef26 	beq	r9,zero,4cd70 <__eqdf2+0x30>
   4cdb4:	00800044 	movi	r2,1
   4cdb8:	f800283a 	ret
   4cdbc:	0005883a 	mov	r2,zero
   4cdc0:	f800283a 	ret

0004cdc4 <__gedf2>:
   4cdc4:	2804d53a 	srli	r2,r5,20
   4cdc8:	3810d53a 	srli	r8,r7,20
   4cdcc:	00c00434 	movhi	r3,16
   4cdd0:	18ffffc4 	addi	r3,r3,-1
   4cdd4:	1081ffcc 	andi	r2,r2,2047
   4cdd8:	0241ffc4 	movi	r9,2047
   4cddc:	28d4703a 	and	r10,r5,r3
   4cde0:	4201ffcc 	andi	r8,r8,2047
   4cde4:	38c6703a 	and	r3,r7,r3
   4cde8:	280ad7fa 	srli	r5,r5,31
   4cdec:	380ed7fa 	srli	r7,r7,31
   4cdf0:	12401b26 	beq	r2,r9,4ce60 <__gedf2+0x9c>
   4cdf4:	0241ffc4 	movi	r9,2047
   4cdf8:	42400926 	beq	r8,r9,4ce20 <__gedf2+0x5c>
   4cdfc:	10000c1e 	bne	r2,zero,4ce30 <__gedf2+0x6c>
   4ce00:	5112b03a 	or	r9,r10,r4
   4ce04:	4813003a 	cmpeq	r9,r9,zero
   4ce08:	4817883a 	mov	r11,r9
   4ce0c:	40000a26 	beq	r8,zero,4ce38 <__gedf2+0x74>
   4ce10:	48001626 	beq	r9,zero,4ce6c <__gedf2+0xa8>
   4ce14:	38000d1e 	bne	r7,zero,4ce4c <__gedf2+0x88>
   4ce18:	00bfffc4 	movi	r2,-1
   4ce1c:	f800283a 	ret
   4ce20:	1992b03a 	or	r9,r3,r6
   4ce24:	483ff526 	beq	r9,zero,4cdfc <__gedf2+0x38>
   4ce28:	00bfff84 	movi	r2,-2
   4ce2c:	f800283a 	ret
   4ce30:	40000e1e 	bne	r8,zero,4ce6c <__gedf2+0xa8>
   4ce34:	0017883a 	mov	r11,zero
   4ce38:	1992b03a 	or	r9,r3,r6
   4ce3c:	4813003a 	cmpeq	r9,r9,zero
   4ce40:	5800041e 	bne	r11,zero,4ce54 <__gedf2+0x90>
   4ce44:	48000926 	beq	r9,zero,4ce6c <__gedf2+0xa8>
   4ce48:	283ff31e 	bne	r5,zero,4ce18 <__gedf2+0x54>
   4ce4c:	00800044 	movi	r2,1
   4ce50:	f800283a 	ret
   4ce54:	483fef26 	beq	r9,zero,4ce14 <__gedf2+0x50>
   4ce58:	0005883a 	mov	r2,zero
   4ce5c:	f800283a 	ret
   4ce60:	5112b03a 	or	r9,r10,r4
   4ce64:	483fe326 	beq	r9,zero,4cdf4 <__gedf2+0x30>
   4ce68:	003fef06 	br	4ce28 <__gedf2+0x64>
   4ce6c:	29fff61e 	bne	r5,r7,4ce48 <__gedf2+0x84>
   4ce70:	40bff516 	blt	r8,r2,4ce48 <__gedf2+0x84>
   4ce74:	12000316 	blt	r2,r8,4ce84 <__gedf2+0xc0>
   4ce78:	1abff336 	bltu	r3,r10,4ce48 <__gedf2+0x84>
   4ce7c:	50c00326 	beq	r10,r3,4ce8c <__gedf2+0xc8>
   4ce80:	50fff52e 	bgeu	r10,r3,4ce58 <__gedf2+0x94>
   4ce84:	283fe426 	beq	r5,zero,4ce18 <__gedf2+0x54>
   4ce88:	003ff006 	br	4ce4c <__gedf2+0x88>
   4ce8c:	313fee36 	bltu	r6,r4,4ce48 <__gedf2+0x84>
   4ce90:	21bff12e 	bgeu	r4,r6,4ce58 <__gedf2+0x94>
   4ce94:	283fe026 	beq	r5,zero,4ce18 <__gedf2+0x54>
   4ce98:	003fec06 	br	4ce4c <__gedf2+0x88>

0004ce9c <__ledf2>:
   4ce9c:	2806d53a 	srli	r3,r5,20
   4cea0:	3810d53a 	srli	r8,r7,20
   4cea4:	00800434 	movhi	r2,16
   4cea8:	10bfffc4 	addi	r2,r2,-1
   4ceac:	18c1ffcc 	andi	r3,r3,2047
   4ceb0:	0241ffc4 	movi	r9,2047
   4ceb4:	2894703a 	and	r10,r5,r2
   4ceb8:	4201ffcc 	andi	r8,r8,2047
   4cebc:	3884703a 	and	r2,r7,r2
   4cec0:	280ad7fa 	srli	r5,r5,31
   4cec4:	380ed7fa 	srli	r7,r7,31
   4cec8:	1a402026 	beq	r3,r9,4cf4c <__ledf2+0xb0>
   4cecc:	0241ffc4 	movi	r9,2047
   4ced0:	42401726 	beq	r8,r9,4cf30 <__ledf2+0x94>
   4ced4:	18000b26 	beq	r3,zero,4cf04 <__ledf2+0x68>
   4ced8:	29403fcc 	andi	r5,r5,255
   4cedc:	39c03fcc 	andi	r7,r7,255
   4cee0:	40000f1e 	bne	r8,zero,4cf20 <__ledf2+0x84>
   4cee4:	0017883a 	mov	r11,zero
   4cee8:	1192b03a 	or	r9,r2,r6
   4ceec:	4813003a 	cmpeq	r9,r9,zero
   4cef0:	58001326 	beq	r11,zero,4cf40 <__ledf2+0xa4>
   4cef4:	48001e1e 	bne	r9,zero,4cf70 <__ledf2+0xd4>
   4cef8:	38000b1e 	bne	r7,zero,4cf28 <__ledf2+0x8c>
   4cefc:	00bfffc4 	movi	r2,-1
   4cf00:	f800283a 	ret
   4cf04:	5112b03a 	or	r9,r10,r4
   4cf08:	4813003a 	cmpeq	r9,r9,zero
   4cf0c:	4817883a 	mov	r11,r9
   4cf10:	29403fcc 	andi	r5,r5,255
   4cf14:	39c03fcc 	andi	r7,r7,255
   4cf18:	403ff326 	beq	r8,zero,4cee8 <__ledf2+0x4c>
   4cf1c:	483ff61e 	bne	r9,zero,4cef8 <__ledf2+0x5c>
   4cf20:	29c00e26 	beq	r5,r7,4cf5c <__ledf2+0xc0>
   4cf24:	283ff51e 	bne	r5,zero,4cefc <__ledf2+0x60>
   4cf28:	00800044 	movi	r2,1
   4cf2c:	f800283a 	ret
   4cf30:	1192b03a 	or	r9,r2,r6
   4cf34:	483fe726 	beq	r9,zero,4ced4 <__ledf2+0x38>
   4cf38:	00800084 	movi	r2,2
   4cf3c:	f800283a 	ret
   4cf40:	483ff726 	beq	r9,zero,4cf20 <__ledf2+0x84>
   4cf44:	283ff826 	beq	r5,zero,4cf28 <__ledf2+0x8c>
   4cf48:	003fec06 	br	4cefc <__ledf2+0x60>
   4cf4c:	5112b03a 	or	r9,r10,r4
   4cf50:	483fde26 	beq	r9,zero,4cecc <__ledf2+0x30>
   4cf54:	00800084 	movi	r2,2
   4cf58:	f800283a 	ret
   4cf5c:	40fff116 	blt	r8,r3,4cf24 <__ledf2+0x88>
   4cf60:	1a000716 	blt	r3,r8,4cf80 <__ledf2+0xe4>
   4cf64:	12bfef36 	bltu	r2,r10,4cf24 <__ledf2+0x88>
   4cf68:	50800326 	beq	r10,r2,4cf78 <__ledf2+0xdc>
   4cf6c:	50800436 	bltu	r10,r2,4cf80 <__ledf2+0xe4>
   4cf70:	0005883a 	mov	r2,zero
   4cf74:	f800283a 	ret
   4cf78:	313fea36 	bltu	r6,r4,4cf24 <__ledf2+0x88>
   4cf7c:	21bffc2e 	bgeu	r4,r6,4cf70 <__ledf2+0xd4>
   4cf80:	283fde26 	beq	r5,zero,4cefc <__ledf2+0x60>
   4cf84:	003fe806 	br	4cf28 <__ledf2+0x8c>

0004cf88 <__fixdfsi>:
   4cf88:	2806d53a 	srli	r3,r5,20
   4cf8c:	00800434 	movhi	r2,16
   4cf90:	10bfffc4 	addi	r2,r2,-1
   4cf94:	0180ff84 	movi	r6,1022
   4cf98:	18c1ffcc 	andi	r3,r3,2047
   4cf9c:	2884703a 	and	r2,r5,r2
   4cfa0:	280ad7fa 	srli	r5,r5,31
   4cfa4:	30c0120e 	bge	r6,r3,4cff0 <__fixdfsi+0x68>
   4cfa8:	01810744 	movi	r6,1053
   4cfac:	30c00c16 	blt	r6,r3,4cfe0 <__fixdfsi+0x58>
   4cfb0:	01810cc4 	movi	r6,1075
   4cfb4:	30cdc83a 	sub	r6,r6,r3
   4cfb8:	01c007c4 	movi	r7,31
   4cfbc:	10800434 	orhi	r2,r2,16
   4cfc0:	39800d16 	blt	r7,r6,4cff8 <__fixdfsi+0x70>
   4cfc4:	18fefb44 	addi	r3,r3,-1043
   4cfc8:	2188d83a 	srl	r4,r4,r6
   4cfcc:	10c4983a 	sll	r2,r2,r3
   4cfd0:	2084b03a 	or	r2,r4,r2
   4cfd4:	28000726 	beq	r5,zero,4cff4 <__fixdfsi+0x6c>
   4cfd8:	0085c83a 	sub	r2,zero,r2
   4cfdc:	f800283a 	ret
   4cfe0:	00a00034 	movhi	r2,32768
   4cfe4:	10bfffc4 	addi	r2,r2,-1
   4cfe8:	2885883a 	add	r2,r5,r2
   4cfec:	f800283a 	ret
   4cff0:	0005883a 	mov	r2,zero
   4cff4:	f800283a 	ret
   4cff8:	010104c4 	movi	r4,1043
   4cffc:	20c7c83a 	sub	r3,r4,r3
   4d000:	10c4d83a 	srl	r2,r2,r3
   4d004:	003ff306 	br	4cfd4 <__fixdfsi+0x4c>

0004d008 <__floatsidf>:
   4d008:	defffd04 	addi	sp,sp,-12
   4d00c:	dc000015 	stw	r16,0(sp)
   4d010:	dfc00215 	stw	ra,8(sp)
   4d014:	dc400115 	stw	r17,4(sp)
   4d018:	2021883a 	mov	r16,r4
   4d01c:	20002926 	beq	r4,zero,4d0c4 <__floatsidf+0xbc>
   4d020:	2022d7fa 	srli	r17,r4,31
   4d024:	88000126 	beq	r17,zero,4d02c <__floatsidf+0x24>
   4d028:	0121c83a 	sub	r16,zero,r4
   4d02c:	8009883a 	mov	r4,r16
   4d030:	00430880 	call	43088 <__clzsi2>
   4d034:	01810784 	movi	r6,1054
   4d038:	00c00284 	movi	r3,10
   4d03c:	308dc83a 	sub	r6,r6,r2
   4d040:	1880150e 	bge	r3,r2,4d098 <__floatsidf+0x90>
   4d044:	113ffd44 	addi	r4,r2,-11
   4d048:	8108983a 	sll	r4,r16,r4
   4d04c:	00800434 	movhi	r2,16
   4d050:	10bfffc4 	addi	r2,r2,-1
   4d054:	3181ffcc 	andi	r6,r6,2047
   4d058:	2088703a 	and	r4,r4,r2
   4d05c:	880b883a 	mov	r5,r17
   4d060:	0005883a 	mov	r2,zero
   4d064:	300c953a 	slli	r6,r6,20
   4d068:	29403fcc 	andi	r5,r5,255
   4d06c:	280a97fa 	slli	r5,r5,31
   4d070:	00c00434 	movhi	r3,16
   4d074:	18ffffc4 	addi	r3,r3,-1
   4d078:	20c8703a 	and	r4,r4,r3
   4d07c:	2186b03a 	or	r3,r4,r6
   4d080:	1946b03a 	or	r3,r3,r5
   4d084:	dfc00217 	ldw	ra,8(sp)
   4d088:	dc400117 	ldw	r17,4(sp)
   4d08c:	dc000017 	ldw	r16,0(sp)
   4d090:	dec00304 	addi	sp,sp,12
   4d094:	f800283a 	ret
   4d098:	010002c4 	movi	r4,11
   4d09c:	2089c83a 	sub	r4,r4,r2
   4d0a0:	8108d83a 	srl	r4,r16,r4
   4d0a4:	10800544 	addi	r2,r2,21
   4d0a8:	00c00434 	movhi	r3,16
   4d0ac:	18ffffc4 	addi	r3,r3,-1
   4d0b0:	8084983a 	sll	r2,r16,r2
   4d0b4:	20c8703a 	and	r4,r4,r3
   4d0b8:	3181ffcc 	andi	r6,r6,2047
   4d0bc:	880b883a 	mov	r5,r17
   4d0c0:	003fe806 	br	4d064 <__floatsidf+0x5c>
   4d0c4:	000b883a 	mov	r5,zero
   4d0c8:	000d883a 	mov	r6,zero
   4d0cc:	0009883a 	mov	r4,zero
   4d0d0:	0005883a 	mov	r2,zero
   4d0d4:	003fe306 	br	4d064 <__floatsidf+0x5c>

0004d0d8 <__floatunsidf>:
   4d0d8:	defffe04 	addi	sp,sp,-8
   4d0dc:	dc000015 	stw	r16,0(sp)
   4d0e0:	dfc00115 	stw	ra,4(sp)
   4d0e4:	2021883a 	mov	r16,r4
   4d0e8:	20001f26 	beq	r4,zero,4d168 <__floatunsidf+0x90>
   4d0ec:	00430880 	call	43088 <__clzsi2>
   4d0f0:	01010784 	movi	r4,1054
   4d0f4:	00c00284 	movi	r3,10
   4d0f8:	2089c83a 	sub	r4,r4,r2
   4d0fc:	1880100e 	bge	r3,r2,4d140 <__floatunsidf+0x68>
   4d100:	117ffd44 	addi	r5,r2,-11
   4d104:	814a983a 	sll	r5,r16,r5
   4d108:	00800434 	movhi	r2,16
   4d10c:	10bfffc4 	addi	r2,r2,-1
   4d110:	2101ffcc 	andi	r4,r4,2047
   4d114:	288a703a 	and	r5,r5,r2
   4d118:	0005883a 	mov	r2,zero
   4d11c:	2008953a 	slli	r4,r4,20
   4d120:	00c00434 	movhi	r3,16
   4d124:	18ffffc4 	addi	r3,r3,-1
   4d128:	28c6703a 	and	r3,r5,r3
   4d12c:	1906b03a 	or	r3,r3,r4
   4d130:	dfc00117 	ldw	ra,4(sp)
   4d134:	dc000017 	ldw	r16,0(sp)
   4d138:	dec00204 	addi	sp,sp,8
   4d13c:	f800283a 	ret
   4d140:	014002c4 	movi	r5,11
   4d144:	288bc83a 	sub	r5,r5,r2
   4d148:	814ad83a 	srl	r5,r16,r5
   4d14c:	10800544 	addi	r2,r2,21
   4d150:	00c00434 	movhi	r3,16
   4d154:	18ffffc4 	addi	r3,r3,-1
   4d158:	8084983a 	sll	r2,r16,r2
   4d15c:	28ca703a 	and	r5,r5,r3
   4d160:	2101ffcc 	andi	r4,r4,2047
   4d164:	003fed06 	br	4d11c <__floatunsidf+0x44>
   4d168:	0009883a 	mov	r4,zero
   4d16c:	000b883a 	mov	r5,zero
   4d170:	0005883a 	mov	r2,zero
   4d174:	003fe906 	br	4d11c <__floatunsidf+0x44>

0004d178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d178:	defffe04 	addi	sp,sp,-8
   4d17c:	dfc00115 	stw	ra,4(sp)
   4d180:	df000015 	stw	fp,0(sp)
   4d184:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d188:	00800174 	movhi	r2,5
   4d18c:	10870a04 	addi	r2,r2,7208
   4d190:	10800017 	ldw	r2,0(r2)
   4d194:	10000526 	beq	r2,zero,4d1ac <alt_get_errno+0x34>
   4d198:	00800174 	movhi	r2,5
   4d19c:	10870a04 	addi	r2,r2,7208
   4d1a0:	10800017 	ldw	r2,0(r2)
   4d1a4:	103ee83a 	callr	r2
   4d1a8:	00000206 	br	4d1b4 <alt_get_errno+0x3c>
   4d1ac:	00800174 	movhi	r2,5
   4d1b0:	10871504 	addi	r2,r2,7252
}
   4d1b4:	e037883a 	mov	sp,fp
   4d1b8:	dfc00117 	ldw	ra,4(sp)
   4d1bc:	df000017 	ldw	fp,0(sp)
   4d1c0:	dec00204 	addi	sp,sp,8
   4d1c4:	f800283a 	ret

0004d1c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4d1c8:	defffb04 	addi	sp,sp,-20
   4d1cc:	dfc00415 	stw	ra,16(sp)
   4d1d0:	df000315 	stw	fp,12(sp)
   4d1d4:	df000304 	addi	fp,sp,12
   4d1d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4d1dc:	e0bfff17 	ldw	r2,-4(fp)
   4d1e0:	10000616 	blt	r2,zero,4d1fc <close+0x34>
   4d1e4:	e0bfff17 	ldw	r2,-4(fp)
   4d1e8:	10c00324 	muli	r3,r2,12
   4d1ec:	00800174 	movhi	r2,5
   4d1f0:	10828704 	addi	r2,r2,2588
   4d1f4:	1885883a 	add	r2,r3,r2
   4d1f8:	00000106 	br	4d200 <close+0x38>
   4d1fc:	0005883a 	mov	r2,zero
   4d200:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4d204:	e0bffd17 	ldw	r2,-12(fp)
   4d208:	10001826 	beq	r2,zero,4d26c <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4d20c:	e0bffd17 	ldw	r2,-12(fp)
   4d210:	10800017 	ldw	r2,0(r2)
   4d214:	10800417 	ldw	r2,16(r2)
   4d218:	10000626 	beq	r2,zero,4d234 <close+0x6c>
   4d21c:	e0bffd17 	ldw	r2,-12(fp)
   4d220:	10800017 	ldw	r2,0(r2)
   4d224:	10800417 	ldw	r2,16(r2)
   4d228:	e13ffd17 	ldw	r4,-12(fp)
   4d22c:	103ee83a 	callr	r2
   4d230:	00000106 	br	4d238 <close+0x70>
   4d234:	0005883a 	mov	r2,zero
   4d238:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4d23c:	e13fff17 	ldw	r4,-4(fp)
   4d240:	004d7c00 	call	4d7c0 <alt_release_fd>
    if (rval < 0)
   4d244:	e0bffe17 	ldw	r2,-8(fp)
   4d248:	1000060e 	bge	r2,zero,4d264 <close+0x9c>
    {
      ALT_ERRNO = -rval;
   4d24c:	004d1780 	call	4d178 <alt_get_errno>
   4d250:	e0fffe17 	ldw	r3,-8(fp)
   4d254:	00c7c83a 	sub	r3,zero,r3
   4d258:	10c00015 	stw	r3,0(r2)
      return -1;
   4d25c:	00bfffc4 	movi	r2,-1
   4d260:	00000606 	br	4d27c <close+0xb4>
    }
    return 0;
   4d264:	0005883a 	mov	r2,zero
   4d268:	00000406 	br	4d27c <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d26c:	004d1780 	call	4d178 <alt_get_errno>
   4d270:	00c01444 	movi	r3,81
   4d274:	10c00015 	stw	r3,0(r2)
    return -1;
   4d278:	00bfffc4 	movi	r2,-1
  }
}
   4d27c:	e037883a 	mov	sp,fp
   4d280:	dfc00117 	ldw	ra,4(sp)
   4d284:	df000017 	ldw	fp,0(sp)
   4d288:	dec00204 	addi	sp,sp,8
   4d28c:	f800283a 	ret

0004d290 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4d290:	defffc04 	addi	sp,sp,-16
   4d294:	df000315 	stw	fp,12(sp)
   4d298:	df000304 	addi	fp,sp,12
   4d29c:	e13ffd15 	stw	r4,-12(fp)
   4d2a0:	e17ffe15 	stw	r5,-8(fp)
   4d2a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4d2a8:	e0bfff17 	ldw	r2,-4(fp)
}
   4d2ac:	e037883a 	mov	sp,fp
   4d2b0:	df000017 	ldw	fp,0(sp)
   4d2b4:	dec00104 	addi	sp,sp,4
   4d2b8:	f800283a 	ret

0004d2bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d2bc:	defffe04 	addi	sp,sp,-8
   4d2c0:	dfc00115 	stw	ra,4(sp)
   4d2c4:	df000015 	stw	fp,0(sp)
   4d2c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d2cc:	00800174 	movhi	r2,5
   4d2d0:	10870a04 	addi	r2,r2,7208
   4d2d4:	10800017 	ldw	r2,0(r2)
   4d2d8:	10000526 	beq	r2,zero,4d2f0 <alt_get_errno+0x34>
   4d2dc:	00800174 	movhi	r2,5
   4d2e0:	10870a04 	addi	r2,r2,7208
   4d2e4:	10800017 	ldw	r2,0(r2)
   4d2e8:	103ee83a 	callr	r2
   4d2ec:	00000206 	br	4d2f8 <alt_get_errno+0x3c>
   4d2f0:	00800174 	movhi	r2,5
   4d2f4:	10871504 	addi	r2,r2,7252
}
   4d2f8:	e037883a 	mov	sp,fp
   4d2fc:	dfc00117 	ldw	ra,4(sp)
   4d300:	df000017 	ldw	fp,0(sp)
   4d304:	dec00204 	addi	sp,sp,8
   4d308:	f800283a 	ret

0004d30c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4d30c:	defffb04 	addi	sp,sp,-20
   4d310:	dfc00415 	stw	ra,16(sp)
   4d314:	df000315 	stw	fp,12(sp)
   4d318:	df000304 	addi	fp,sp,12
   4d31c:	e13ffe15 	stw	r4,-8(fp)
   4d320:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d324:	e0bffe17 	ldw	r2,-8(fp)
   4d328:	10000616 	blt	r2,zero,4d344 <fstat+0x38>
   4d32c:	e0bffe17 	ldw	r2,-8(fp)
   4d330:	10c00324 	muli	r3,r2,12
   4d334:	00800174 	movhi	r2,5
   4d338:	10828704 	addi	r2,r2,2588
   4d33c:	1885883a 	add	r2,r3,r2
   4d340:	00000106 	br	4d348 <fstat+0x3c>
   4d344:	0005883a 	mov	r2,zero
   4d348:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4d34c:	e0bffd17 	ldw	r2,-12(fp)
   4d350:	10001026 	beq	r2,zero,4d394 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4d354:	e0bffd17 	ldw	r2,-12(fp)
   4d358:	10800017 	ldw	r2,0(r2)
   4d35c:	10800817 	ldw	r2,32(r2)
   4d360:	10000726 	beq	r2,zero,4d380 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4d364:	e0bffd17 	ldw	r2,-12(fp)
   4d368:	10800017 	ldw	r2,0(r2)
   4d36c:	10800817 	ldw	r2,32(r2)
   4d370:	e13ffd17 	ldw	r4,-12(fp)
   4d374:	e17fff17 	ldw	r5,-4(fp)
   4d378:	103ee83a 	callr	r2
   4d37c:	00000906 	br	4d3a4 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4d380:	e0bfff17 	ldw	r2,-4(fp)
   4d384:	00c80004 	movi	r3,8192
   4d388:	10c00115 	stw	r3,4(r2)
      return 0;
   4d38c:	0005883a 	mov	r2,zero
   4d390:	00000406 	br	4d3a4 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d394:	004d2bc0 	call	4d2bc <alt_get_errno>
   4d398:	00c01444 	movi	r3,81
   4d39c:	10c00015 	stw	r3,0(r2)
    return -1;
   4d3a0:	00bfffc4 	movi	r2,-1
  }
}
   4d3a4:	e037883a 	mov	sp,fp
   4d3a8:	dfc00117 	ldw	ra,4(sp)
   4d3ac:	df000017 	ldw	fp,0(sp)
   4d3b0:	dec00204 	addi	sp,sp,8
   4d3b4:	f800283a 	ret

0004d3b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d3b8:	defffe04 	addi	sp,sp,-8
   4d3bc:	dfc00115 	stw	ra,4(sp)
   4d3c0:	df000015 	stw	fp,0(sp)
   4d3c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d3c8:	00800174 	movhi	r2,5
   4d3cc:	10870a04 	addi	r2,r2,7208
   4d3d0:	10800017 	ldw	r2,0(r2)
   4d3d4:	10000526 	beq	r2,zero,4d3ec <alt_get_errno+0x34>
   4d3d8:	00800174 	movhi	r2,5
   4d3dc:	10870a04 	addi	r2,r2,7208
   4d3e0:	10800017 	ldw	r2,0(r2)
   4d3e4:	103ee83a 	callr	r2
   4d3e8:	00000206 	br	4d3f4 <alt_get_errno+0x3c>
   4d3ec:	00800174 	movhi	r2,5
   4d3f0:	10871504 	addi	r2,r2,7252
}
   4d3f4:	e037883a 	mov	sp,fp
   4d3f8:	dfc00117 	ldw	ra,4(sp)
   4d3fc:	df000017 	ldw	fp,0(sp)
   4d400:	dec00204 	addi	sp,sp,8
   4d404:	f800283a 	ret

0004d408 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4d408:	deffed04 	addi	sp,sp,-76
   4d40c:	dfc01215 	stw	ra,72(sp)
   4d410:	df001115 	stw	fp,68(sp)
   4d414:	df001104 	addi	fp,sp,68
   4d418:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d41c:	e0bfff17 	ldw	r2,-4(fp)
   4d420:	10000616 	blt	r2,zero,4d43c <isatty+0x34>
   4d424:	e0bfff17 	ldw	r2,-4(fp)
   4d428:	10c00324 	muli	r3,r2,12
   4d42c:	00800174 	movhi	r2,5
   4d430:	10828704 	addi	r2,r2,2588
   4d434:	1885883a 	add	r2,r3,r2
   4d438:	00000106 	br	4d440 <isatty+0x38>
   4d43c:	0005883a 	mov	r2,zero
   4d440:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4d444:	e0bfef17 	ldw	r2,-68(fp)
   4d448:	10000e26 	beq	r2,zero,4d484 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4d44c:	e0bfef17 	ldw	r2,-68(fp)
   4d450:	10800017 	ldw	r2,0(r2)
   4d454:	10800817 	ldw	r2,32(r2)
   4d458:	1000021e 	bne	r2,zero,4d464 <isatty+0x5c>
    {
      return 1;
   4d45c:	00800044 	movi	r2,1
   4d460:	00000c06 	br	4d494 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4d464:	e0bff004 	addi	r2,fp,-64
   4d468:	e13fff17 	ldw	r4,-4(fp)
   4d46c:	100b883a 	mov	r5,r2
   4d470:	004d30c0 	call	4d30c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4d474:	e0bff117 	ldw	r2,-60(fp)
   4d478:	10880020 	cmpeqi	r2,r2,8192
   4d47c:	10803fcc 	andi	r2,r2,255
   4d480:	00000406 	br	4d494 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4d484:	004d3b80 	call	4d3b8 <alt_get_errno>
   4d488:	00c01444 	movi	r3,81
   4d48c:	10c00015 	stw	r3,0(r2)
    return 0;
   4d490:	0005883a 	mov	r2,zero
  }
}
   4d494:	e037883a 	mov	sp,fp
   4d498:	dfc00117 	ldw	ra,4(sp)
   4d49c:	df000017 	ldw	fp,0(sp)
   4d4a0:	dec00204 	addi	sp,sp,8
   4d4a4:	f800283a 	ret

0004d4a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d4a8:	defffe04 	addi	sp,sp,-8
   4d4ac:	dfc00115 	stw	ra,4(sp)
   4d4b0:	df000015 	stw	fp,0(sp)
   4d4b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d4b8:	00800174 	movhi	r2,5
   4d4bc:	10870a04 	addi	r2,r2,7208
   4d4c0:	10800017 	ldw	r2,0(r2)
   4d4c4:	10000526 	beq	r2,zero,4d4dc <alt_get_errno+0x34>
   4d4c8:	00800174 	movhi	r2,5
   4d4cc:	10870a04 	addi	r2,r2,7208
   4d4d0:	10800017 	ldw	r2,0(r2)
   4d4d4:	103ee83a 	callr	r2
   4d4d8:	00000206 	br	4d4e4 <alt_get_errno+0x3c>
   4d4dc:	00800174 	movhi	r2,5
   4d4e0:	10871504 	addi	r2,r2,7252
}
   4d4e4:	e037883a 	mov	sp,fp
   4d4e8:	dfc00117 	ldw	ra,4(sp)
   4d4ec:	df000017 	ldw	fp,0(sp)
   4d4f0:	dec00204 	addi	sp,sp,8
   4d4f4:	f800283a 	ret

0004d4f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4d4f8:	defff904 	addi	sp,sp,-28
   4d4fc:	dfc00615 	stw	ra,24(sp)
   4d500:	df000515 	stw	fp,20(sp)
   4d504:	df000504 	addi	fp,sp,20
   4d508:	e13ffd15 	stw	r4,-12(fp)
   4d50c:	e17ffe15 	stw	r5,-8(fp)
   4d510:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4d514:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d518:	e0bffd17 	ldw	r2,-12(fp)
   4d51c:	10000616 	blt	r2,zero,4d538 <lseek+0x40>
   4d520:	e0bffd17 	ldw	r2,-12(fp)
   4d524:	10c00324 	muli	r3,r2,12
   4d528:	00800174 	movhi	r2,5
   4d52c:	10828704 	addi	r2,r2,2588
   4d530:	1885883a 	add	r2,r3,r2
   4d534:	00000106 	br	4d53c <lseek+0x44>
   4d538:	0005883a 	mov	r2,zero
   4d53c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4d540:	e0bffc17 	ldw	r2,-16(fp)
   4d544:	10001026 	beq	r2,zero,4d588 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4d548:	e0bffc17 	ldw	r2,-16(fp)
   4d54c:	10800017 	ldw	r2,0(r2)
   4d550:	10800717 	ldw	r2,28(r2)
   4d554:	10000926 	beq	r2,zero,4d57c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4d558:	e0bffc17 	ldw	r2,-16(fp)
   4d55c:	10800017 	ldw	r2,0(r2)
   4d560:	10800717 	ldw	r2,28(r2)
   4d564:	e13ffc17 	ldw	r4,-16(fp)
   4d568:	e17ffe17 	ldw	r5,-8(fp)
   4d56c:	e1bfff17 	ldw	r6,-4(fp)
   4d570:	103ee83a 	callr	r2
   4d574:	e0bffb15 	stw	r2,-20(fp)
   4d578:	00000506 	br	4d590 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4d57c:	00bfde84 	movi	r2,-134
   4d580:	e0bffb15 	stw	r2,-20(fp)
   4d584:	00000206 	br	4d590 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4d588:	00bfebc4 	movi	r2,-81
   4d58c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4d590:	e0bffb17 	ldw	r2,-20(fp)
   4d594:	1000060e 	bge	r2,zero,4d5b0 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
   4d598:	004d4a80 	call	4d4a8 <alt_get_errno>
   4d59c:	e0fffb17 	ldw	r3,-20(fp)
   4d5a0:	00c7c83a 	sub	r3,zero,r3
   4d5a4:	10c00015 	stw	r3,0(r2)
    rc = -1;
   4d5a8:	00bfffc4 	movi	r2,-1
   4d5ac:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4d5b0:	e0bffb17 	ldw	r2,-20(fp)
}
   4d5b4:	e037883a 	mov	sp,fp
   4d5b8:	dfc00117 	ldw	ra,4(sp)
   4d5bc:	df000017 	ldw	fp,0(sp)
   4d5c0:	dec00204 	addi	sp,sp,8
   4d5c4:	f800283a 	ret

0004d5c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4d5c8:	defffd04 	addi	sp,sp,-12
   4d5cc:	dfc00215 	stw	ra,8(sp)
   4d5d0:	df000115 	stw	fp,4(sp)
   4d5d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4d5d8:	0009883a 	mov	r4,zero
   4d5dc:	004da440 	call	4da44 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4d5e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4d5e4:	004da780 	call	4da78 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4d5e8:	01000174 	movhi	r4,5
   4d5ec:	21000c04 	addi	r4,r4,48
   4d5f0:	01400174 	movhi	r5,5
   4d5f4:	29400c04 	addi	r5,r5,48
   4d5f8:	01800174 	movhi	r6,5
   4d5fc:	31800c04 	addi	r6,r6,48
   4d600:	004ef280 	call	4ef28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4d604:	004eae80 	call	4eae8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4d608:	01000174 	movhi	r4,5
   4d60c:	213ad104 	addi	r4,r4,-5308
   4d610:	004f7a40 	call	4f7a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4d614:	d1201717 	ldw	r4,-32676(gp)
   4d618:	d0e01817 	ldw	r3,-32672(gp)
   4d61c:	d0a01917 	ldw	r2,-32668(gp)
   4d620:	180b883a 	mov	r5,r3
   4d624:	100d883a 	mov	r6,r2
   4d628:	0040e140 	call	40e14 <main>
   4d62c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4d630:	01000044 	movi	r4,1
   4d634:	004d1c80 	call	4d1c8 <close>
  exit (result);
   4d638:	e13fff17 	ldw	r4,-4(fp)
   4d63c:	004f7b80 	call	4f7b8 <exit>

0004d640 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4d640:	defffe04 	addi	sp,sp,-8
   4d644:	df000115 	stw	fp,4(sp)
   4d648:	df000104 	addi	fp,sp,4
   4d64c:	e13fff15 	stw	r4,-4(fp)
}
   4d650:	e037883a 	mov	sp,fp
   4d654:	df000017 	ldw	fp,0(sp)
   4d658:	dec00104 	addi	sp,sp,4
   4d65c:	f800283a 	ret

0004d660 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4d660:	defffe04 	addi	sp,sp,-8
   4d664:	df000115 	stw	fp,4(sp)
   4d668:	df000104 	addi	fp,sp,4
   4d66c:	e13fff15 	stw	r4,-4(fp)
}
   4d670:	e037883a 	mov	sp,fp
   4d674:	df000017 	ldw	fp,0(sp)
   4d678:	dec00104 	addi	sp,sp,4
   4d67c:	f800283a 	ret

0004d680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d680:	defffe04 	addi	sp,sp,-8
   4d684:	dfc00115 	stw	ra,4(sp)
   4d688:	df000015 	stw	fp,0(sp)
   4d68c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d690:	00800174 	movhi	r2,5
   4d694:	10870a04 	addi	r2,r2,7208
   4d698:	10800017 	ldw	r2,0(r2)
   4d69c:	10000526 	beq	r2,zero,4d6b4 <alt_get_errno+0x34>
   4d6a0:	00800174 	movhi	r2,5
   4d6a4:	10870a04 	addi	r2,r2,7208
   4d6a8:	10800017 	ldw	r2,0(r2)
   4d6ac:	103ee83a 	callr	r2
   4d6b0:	00000206 	br	4d6bc <alt_get_errno+0x3c>
   4d6b4:	00800174 	movhi	r2,5
   4d6b8:	10871504 	addi	r2,r2,7252
}
   4d6bc:	e037883a 	mov	sp,fp
   4d6c0:	dfc00117 	ldw	ra,4(sp)
   4d6c4:	df000017 	ldw	fp,0(sp)
   4d6c8:	dec00204 	addi	sp,sp,8
   4d6cc:	f800283a 	ret

0004d6d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4d6d0:	defff904 	addi	sp,sp,-28
   4d6d4:	dfc00615 	stw	ra,24(sp)
   4d6d8:	df000515 	stw	fp,20(sp)
   4d6dc:	df000504 	addi	fp,sp,20
   4d6e0:	e13ffd15 	stw	r4,-12(fp)
   4d6e4:	e17ffe15 	stw	r5,-8(fp)
   4d6e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d6ec:	e0bffd17 	ldw	r2,-12(fp)
   4d6f0:	10000616 	blt	r2,zero,4d70c <read+0x3c>
   4d6f4:	e0bffd17 	ldw	r2,-12(fp)
   4d6f8:	10c00324 	muli	r3,r2,12
   4d6fc:	00800174 	movhi	r2,5
   4d700:	10828704 	addi	r2,r2,2588
   4d704:	1885883a 	add	r2,r3,r2
   4d708:	00000106 	br	4d710 <read+0x40>
   4d70c:	0005883a 	mov	r2,zero
   4d710:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4d714:	e0bffb17 	ldw	r2,-20(fp)
   4d718:	10002026 	beq	r2,zero,4d79c <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4d71c:	e0bffb17 	ldw	r2,-20(fp)
   4d720:	10800217 	ldw	r2,8(r2)
   4d724:	108000cc 	andi	r2,r2,3
   4d728:	10800060 	cmpeqi	r2,r2,1
   4d72c:	1000171e 	bne	r2,zero,4d78c <read+0xbc>
        (fd->dev->read))
   4d730:	e0bffb17 	ldw	r2,-20(fp)
   4d734:	10800017 	ldw	r2,0(r2)
   4d738:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4d73c:	10001326 	beq	r2,zero,4d78c <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4d740:	e0bffb17 	ldw	r2,-20(fp)
   4d744:	10800017 	ldw	r2,0(r2)
   4d748:	10800517 	ldw	r2,20(r2)
   4d74c:	e0ffff17 	ldw	r3,-4(fp)
   4d750:	e13ffb17 	ldw	r4,-20(fp)
   4d754:	e17ffe17 	ldw	r5,-8(fp)
   4d758:	180d883a 	mov	r6,r3
   4d75c:	103ee83a 	callr	r2
   4d760:	e0bffc15 	stw	r2,-16(fp)
   4d764:	e0bffc17 	ldw	r2,-16(fp)
   4d768:	1000060e 	bge	r2,zero,4d784 <read+0xb4>
        {
          ALT_ERRNO = -rval;
   4d76c:	004d6800 	call	4d680 <alt_get_errno>
   4d770:	e0fffc17 	ldw	r3,-16(fp)
   4d774:	00c7c83a 	sub	r3,zero,r3
   4d778:	10c00015 	stw	r3,0(r2)
          return -1;
   4d77c:	00bfffc4 	movi	r2,-1
   4d780:	00000a06 	br	4d7ac <read+0xdc>
        }
        return rval;
   4d784:	e0bffc17 	ldw	r2,-16(fp)
   4d788:	00000806 	br	4d7ac <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4d78c:	004d6800 	call	4d680 <alt_get_errno>
   4d790:	00c00344 	movi	r3,13
   4d794:	10c00015 	stw	r3,0(r2)
   4d798:	00000306 	br	4d7a8 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4d79c:	004d6800 	call	4d680 <alt_get_errno>
   4d7a0:	00c01444 	movi	r3,81
   4d7a4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4d7a8:	00bfffc4 	movi	r2,-1
}
   4d7ac:	e037883a 	mov	sp,fp
   4d7b0:	dfc00117 	ldw	ra,4(sp)
   4d7b4:	df000017 	ldw	fp,0(sp)
   4d7b8:	dec00204 	addi	sp,sp,8
   4d7bc:	f800283a 	ret

0004d7c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4d7c0:	defffe04 	addi	sp,sp,-8
   4d7c4:	df000115 	stw	fp,4(sp)
   4d7c8:	df000104 	addi	fp,sp,4
   4d7cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4d7d0:	e0bfff17 	ldw	r2,-4(fp)
   4d7d4:	108000d0 	cmplti	r2,r2,3
   4d7d8:	10000d1e 	bne	r2,zero,4d810 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4d7dc:	00c00174 	movhi	r3,5
   4d7e0:	18c28704 	addi	r3,r3,2588
   4d7e4:	e0bfff17 	ldw	r2,-4(fp)
   4d7e8:	10800324 	muli	r2,r2,12
   4d7ec:	1885883a 	add	r2,r3,r2
   4d7f0:	10800204 	addi	r2,r2,8
   4d7f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4d7f8:	00c00174 	movhi	r3,5
   4d7fc:	18c28704 	addi	r3,r3,2588
   4d800:	e0bfff17 	ldw	r2,-4(fp)
   4d804:	10800324 	muli	r2,r2,12
   4d808:	1885883a 	add	r2,r3,r2
   4d80c:	10000015 	stw	zero,0(r2)
  }
}
   4d810:	e037883a 	mov	sp,fp
   4d814:	df000017 	ldw	fp,0(sp)
   4d818:	dec00104 	addi	sp,sp,4
   4d81c:	f800283a 	ret

0004d820 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4d820:	defff904 	addi	sp,sp,-28
   4d824:	df000615 	stw	fp,24(sp)
   4d828:	df000604 	addi	fp,sp,24
   4d82c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d830:	0005303a 	rdctl	r2,status
   4d834:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d838:	e0fffc17 	ldw	r3,-16(fp)
   4d83c:	00bfff84 	movi	r2,-2
   4d840:	1884703a 	and	r2,r3,r2
   4d844:	1001703a 	wrctl	status,r2
  
  return context;
   4d848:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4d84c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4d850:	d0a00c17 	ldw	r2,-32720(gp)
   4d854:	10c000c4 	addi	r3,r2,3
   4d858:	00bfff04 	movi	r2,-4
   4d85c:	1884703a 	and	r2,r3,r2
   4d860:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4d864:	d0e00c17 	ldw	r3,-32720(gp)
   4d868:	e0bfff17 	ldw	r2,-4(fp)
   4d86c:	1885883a 	add	r2,r3,r2
   4d870:	00c00234 	movhi	r3,8
   4d874:	18c00004 	addi	r3,r3,0
   4d878:	1880062e 	bgeu	r3,r2,4d894 <sbrk+0x74>
   4d87c:	e0bffa17 	ldw	r2,-24(fp)
   4d880:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d884:	e0bffd17 	ldw	r2,-12(fp)
   4d888:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4d88c:	00bfffc4 	movi	r2,-1
   4d890:	00000b06 	br	4d8c0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4d894:	d0a00c17 	ldw	r2,-32720(gp)
   4d898:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4d89c:	d0e00c17 	ldw	r3,-32720(gp)
   4d8a0:	e0bfff17 	ldw	r2,-4(fp)
   4d8a4:	1885883a 	add	r2,r3,r2
   4d8a8:	d0a00c15 	stw	r2,-32720(gp)
   4d8ac:	e0bffa17 	ldw	r2,-24(fp)
   4d8b0:	e0bffe15 	stw	r2,-8(fp)
   4d8b4:	e0bffe17 	ldw	r2,-8(fp)
   4d8b8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4d8bc:	e0bffb17 	ldw	r2,-20(fp)
} 
   4d8c0:	e037883a 	mov	sp,fp
   4d8c4:	df000017 	ldw	fp,0(sp)
   4d8c8:	dec00104 	addi	sp,sp,4
   4d8cc:	f800283a 	ret

0004d8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d8d0:	defffe04 	addi	sp,sp,-8
   4d8d4:	dfc00115 	stw	ra,4(sp)
   4d8d8:	df000015 	stw	fp,0(sp)
   4d8dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d8e0:	00800174 	movhi	r2,5
   4d8e4:	10870a04 	addi	r2,r2,7208
   4d8e8:	10800017 	ldw	r2,0(r2)
   4d8ec:	10000526 	beq	r2,zero,4d904 <alt_get_errno+0x34>
   4d8f0:	00800174 	movhi	r2,5
   4d8f4:	10870a04 	addi	r2,r2,7208
   4d8f8:	10800017 	ldw	r2,0(r2)
   4d8fc:	103ee83a 	callr	r2
   4d900:	00000206 	br	4d90c <alt_get_errno+0x3c>
   4d904:	00800174 	movhi	r2,5
   4d908:	10871504 	addi	r2,r2,7252
}
   4d90c:	e037883a 	mov	sp,fp
   4d910:	dfc00117 	ldw	ra,4(sp)
   4d914:	df000017 	ldw	fp,0(sp)
   4d918:	dec00204 	addi	sp,sp,8
   4d91c:	f800283a 	ret

0004d920 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4d920:	defff904 	addi	sp,sp,-28
   4d924:	dfc00615 	stw	ra,24(sp)
   4d928:	df000515 	stw	fp,20(sp)
   4d92c:	df000504 	addi	fp,sp,20
   4d930:	e13ffd15 	stw	r4,-12(fp)
   4d934:	e17ffe15 	stw	r5,-8(fp)
   4d938:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4d93c:	e0bffd17 	ldw	r2,-12(fp)
   4d940:	10000616 	blt	r2,zero,4d95c <write+0x3c>
   4d944:	e0bffd17 	ldw	r2,-12(fp)
   4d948:	10c00324 	muli	r3,r2,12
   4d94c:	00800174 	movhi	r2,5
   4d950:	10828704 	addi	r2,r2,2588
   4d954:	1885883a 	add	r2,r3,r2
   4d958:	00000106 	br	4d960 <write+0x40>
   4d95c:	0005883a 	mov	r2,zero
   4d960:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4d964:	e0bffb17 	ldw	r2,-20(fp)
   4d968:	10001f26 	beq	r2,zero,4d9e8 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4d96c:	e0bffb17 	ldw	r2,-20(fp)
   4d970:	10800217 	ldw	r2,8(r2)
   4d974:	108000cc 	andi	r2,r2,3
   4d978:	10001726 	beq	r2,zero,4d9d8 <write+0xb8>
   4d97c:	e0bffb17 	ldw	r2,-20(fp)
   4d980:	10800017 	ldw	r2,0(r2)
   4d984:	10800617 	ldw	r2,24(r2)
   4d988:	10001326 	beq	r2,zero,4d9d8 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4d98c:	e0bffb17 	ldw	r2,-20(fp)
   4d990:	10800017 	ldw	r2,0(r2)
   4d994:	10800617 	ldw	r2,24(r2)
   4d998:	e0ffff17 	ldw	r3,-4(fp)
   4d99c:	e13ffb17 	ldw	r4,-20(fp)
   4d9a0:	e17ffe17 	ldw	r5,-8(fp)
   4d9a4:	180d883a 	mov	r6,r3
   4d9a8:	103ee83a 	callr	r2
   4d9ac:	e0bffc15 	stw	r2,-16(fp)
   4d9b0:	e0bffc17 	ldw	r2,-16(fp)
   4d9b4:	1000060e 	bge	r2,zero,4d9d0 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   4d9b8:	004d8d00 	call	4d8d0 <alt_get_errno>
   4d9bc:	e0fffc17 	ldw	r3,-16(fp)
   4d9c0:	00c7c83a 	sub	r3,zero,r3
   4d9c4:	10c00015 	stw	r3,0(r2)
        return -1;
   4d9c8:	00bfffc4 	movi	r2,-1
   4d9cc:	00000a06 	br	4d9f8 <write+0xd8>
      }
      return rval;
   4d9d0:	e0bffc17 	ldw	r2,-16(fp)
   4d9d4:	00000806 	br	4d9f8 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4d9d8:	004d8d00 	call	4d8d0 <alt_get_errno>
   4d9dc:	00c00344 	movi	r3,13
   4d9e0:	10c00015 	stw	r3,0(r2)
   4d9e4:	00000306 	br	4d9f4 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4d9e8:	004d8d00 	call	4d8d0 <alt_get_errno>
   4d9ec:	00c01444 	movi	r3,81
   4d9f0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4d9f4:	00bfffc4 	movi	r2,-1
}
   4d9f8:	e037883a 	mov	sp,fp
   4d9fc:	dfc00117 	ldw	ra,4(sp)
   4da00:	df000017 	ldw	fp,0(sp)
   4da04:	dec00204 	addi	sp,sp,8
   4da08:	f800283a 	ret

0004da0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4da0c:	defffd04 	addi	sp,sp,-12
   4da10:	dfc00215 	stw	ra,8(sp)
   4da14:	df000115 	stw	fp,4(sp)
   4da18:	df000104 	addi	fp,sp,4
   4da1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4da20:	e13fff17 	ldw	r4,-4(fp)
   4da24:	01400174 	movhi	r5,5
   4da28:	29470704 	addi	r5,r5,7196
   4da2c:	004ea480 	call	4ea48 <alt_dev_llist_insert>
}
   4da30:	e037883a 	mov	sp,fp
   4da34:	dfc00117 	ldw	ra,4(sp)
   4da38:	df000017 	ldw	fp,0(sp)
   4da3c:	dec00204 	addi	sp,sp,8
   4da40:	f800283a 	ret

0004da44 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4da44:	defffd04 	addi	sp,sp,-12
   4da48:	dfc00215 	stw	ra,8(sp)
   4da4c:	df000115 	stw	fp,4(sp)
   4da50:	df000104 	addi	fp,sp,4
   4da54:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   4da58:	004f3ac0 	call	4f3ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4da5c:	00800044 	movi	r2,1
   4da60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4da64:	e037883a 	mov	sp,fp
   4da68:	dfc00117 	ldw	ra,4(sp)
   4da6c:	df000017 	ldw	fp,0(sp)
   4da70:	dec00204 	addi	sp,sp,8
   4da74:	f800283a 	ret

0004da78 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4da78:	defffe04 	addi	sp,sp,-8
   4da7c:	dfc00115 	stw	ra,4(sp)
   4da80:	df000015 	stw	fp,0(sp)
   4da84:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   4da88:	01000234 	movhi	r4,8
   4da8c:	21040004 	addi	r4,r4,4096
   4da90:	000b883a 	mov	r5,zero
   4da94:	01800044 	movi	r6,1
   4da98:	01c0fa04 	movi	r7,1000
   4da9c:	004e5b40 	call	4e5b4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP, timestamp);
   4daa0:	00800174 	movhi	r2,5
   4daa4:	10871904 	addi	r2,r2,7268
   4daa8:	00c00234 	movhi	r3,8
   4daac:	18c40804 	addi	r3,r3,4128
   4dab0:	10c00015 	stw	r3,0(r2)
   4dab4:	00800174 	movhi	r2,5
   4dab8:	10871a04 	addi	r2,r2,7272
   4dabc:	00c05f74 	movhi	r3,381
   4dac0:	18de1004 	addi	r3,r3,30784
   4dac4:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4dac8:	01000174 	movhi	r4,5
   4dacc:	2102f104 	addi	r4,r4,3012
   4dad0:	000b883a 	mov	r5,zero
   4dad4:	01800084 	movi	r6,2
   4dad8:	004dc6c0 	call	4dc6c <altera_avalon_jtag_uart_init>
   4dadc:	01000174 	movhi	r4,5
   4dae0:	2102e704 	addi	r4,r4,2972
   4dae4:	004da0c0 	call	4da0c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
   4dae8:	00c00044 	movi	r3,1
   4daec:	0005883a 	mov	r2,zero
   4daf0:	10c00035 	stwio	r3,0(r2)
}
   4daf4:	e037883a 	mov	sp,fp
   4daf8:	dfc00117 	ldw	ra,4(sp)
   4dafc:	df000017 	ldw	fp,0(sp)
   4db00:	dec00204 	addi	sp,sp,8
   4db04:	f800283a 	ret

0004db08 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4db08:	defffa04 	addi	sp,sp,-24
   4db0c:	dfc00515 	stw	ra,20(sp)
   4db10:	df000415 	stw	fp,16(sp)
   4db14:	df000404 	addi	fp,sp,16
   4db18:	e13ffd15 	stw	r4,-12(fp)
   4db1c:	e17ffe15 	stw	r5,-8(fp)
   4db20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4db24:	e0bffd17 	ldw	r2,-12(fp)
   4db28:	10800017 	ldw	r2,0(r2)
   4db2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4db30:	e0bffc17 	ldw	r2,-16(fp)
   4db34:	10c00a04 	addi	r3,r2,40
   4db38:	e0bffd17 	ldw	r2,-12(fp)
   4db3c:	10800217 	ldw	r2,8(r2)
   4db40:	1809883a 	mov	r4,r3
   4db44:	e17ffe17 	ldw	r5,-8(fp)
   4db48:	e1bfff17 	ldw	r6,-4(fp)
   4db4c:	100f883a 	mov	r7,r2
   4db50:	004e1200 	call	4e120 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4db54:	e037883a 	mov	sp,fp
   4db58:	dfc00117 	ldw	ra,4(sp)
   4db5c:	df000017 	ldw	fp,0(sp)
   4db60:	dec00204 	addi	sp,sp,8
   4db64:	f800283a 	ret

0004db68 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4db68:	defffa04 	addi	sp,sp,-24
   4db6c:	dfc00515 	stw	ra,20(sp)
   4db70:	df000415 	stw	fp,16(sp)
   4db74:	df000404 	addi	fp,sp,16
   4db78:	e13ffd15 	stw	r4,-12(fp)
   4db7c:	e17ffe15 	stw	r5,-8(fp)
   4db80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4db84:	e0bffd17 	ldw	r2,-12(fp)
   4db88:	10800017 	ldw	r2,0(r2)
   4db8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4db90:	e0bffc17 	ldw	r2,-16(fp)
   4db94:	10c00a04 	addi	r3,r2,40
   4db98:	e0bffd17 	ldw	r2,-12(fp)
   4db9c:	10800217 	ldw	r2,8(r2)
   4dba0:	1809883a 	mov	r4,r3
   4dba4:	e17ffe17 	ldw	r5,-8(fp)
   4dba8:	e1bfff17 	ldw	r6,-4(fp)
   4dbac:	100f883a 	mov	r7,r2
   4dbb0:	004e3280 	call	4e328 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4dbb4:	e037883a 	mov	sp,fp
   4dbb8:	dfc00117 	ldw	ra,4(sp)
   4dbbc:	df000017 	ldw	fp,0(sp)
   4dbc0:	dec00204 	addi	sp,sp,8
   4dbc4:	f800283a 	ret

0004dbc8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4dbc8:	defffc04 	addi	sp,sp,-16
   4dbcc:	dfc00315 	stw	ra,12(sp)
   4dbd0:	df000215 	stw	fp,8(sp)
   4dbd4:	df000204 	addi	fp,sp,8
   4dbd8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4dbdc:	e0bfff17 	ldw	r2,-4(fp)
   4dbe0:	10800017 	ldw	r2,0(r2)
   4dbe4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4dbe8:	e0bffe17 	ldw	r2,-8(fp)
   4dbec:	10c00a04 	addi	r3,r2,40
   4dbf0:	e0bfff17 	ldw	r2,-4(fp)
   4dbf4:	10800217 	ldw	r2,8(r2)
   4dbf8:	1809883a 	mov	r4,r3
   4dbfc:	100b883a 	mov	r5,r2
   4dc00:	004dfcc0 	call	4dfcc <altera_avalon_jtag_uart_close>
}
   4dc04:	e037883a 	mov	sp,fp
   4dc08:	dfc00117 	ldw	ra,4(sp)
   4dc0c:	df000017 	ldw	fp,0(sp)
   4dc10:	dec00204 	addi	sp,sp,8
   4dc14:	f800283a 	ret

0004dc18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4dc18:	defffa04 	addi	sp,sp,-24
   4dc1c:	dfc00515 	stw	ra,20(sp)
   4dc20:	df000415 	stw	fp,16(sp)
   4dc24:	df000404 	addi	fp,sp,16
   4dc28:	e13ffd15 	stw	r4,-12(fp)
   4dc2c:	e17ffe15 	stw	r5,-8(fp)
   4dc30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4dc34:	e0bffd17 	ldw	r2,-12(fp)
   4dc38:	10800017 	ldw	r2,0(r2)
   4dc3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4dc40:	e0bffc17 	ldw	r2,-16(fp)
   4dc44:	10800a04 	addi	r2,r2,40
   4dc48:	1009883a 	mov	r4,r2
   4dc4c:	e17ffe17 	ldw	r5,-8(fp)
   4dc50:	e1bfff17 	ldw	r6,-4(fp)
   4dc54:	004e0340 	call	4e034 <altera_avalon_jtag_uart_ioctl>
}
   4dc58:	e037883a 	mov	sp,fp
   4dc5c:	dfc00117 	ldw	ra,4(sp)
   4dc60:	df000017 	ldw	fp,0(sp)
   4dc64:	dec00204 	addi	sp,sp,8
   4dc68:	f800283a 	ret

0004dc6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4dc6c:	defffa04 	addi	sp,sp,-24
   4dc70:	dfc00515 	stw	ra,20(sp)
   4dc74:	df000415 	stw	fp,16(sp)
   4dc78:	df000404 	addi	fp,sp,16
   4dc7c:	e13ffd15 	stw	r4,-12(fp)
   4dc80:	e17ffe15 	stw	r5,-8(fp)
   4dc84:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4dc88:	e0bffd17 	ldw	r2,-12(fp)
   4dc8c:	00c00044 	movi	r3,1
   4dc90:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4dc94:	e0bffd17 	ldw	r2,-12(fp)
   4dc98:	10800017 	ldw	r2,0(r2)
   4dc9c:	10800104 	addi	r2,r2,4
   4dca0:	e0fffd17 	ldw	r3,-12(fp)
   4dca4:	18c00817 	ldw	r3,32(r3)
   4dca8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4dcac:	e0fffe17 	ldw	r3,-8(fp)
   4dcb0:	e0bfff17 	ldw	r2,-4(fp)
   4dcb4:	d8000015 	stw	zero,0(sp)
   4dcb8:	1809883a 	mov	r4,r3
   4dcbc:	100b883a 	mov	r5,r2
   4dcc0:	01800174 	movhi	r6,5
   4dcc4:	31b74b04 	addi	r6,r6,-8916
   4dcc8:	e1fffd17 	ldw	r7,-12(fp)
   4dccc:	004eba00 	call	4eba0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4dcd0:	e0bffd17 	ldw	r2,-12(fp)
   4dcd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4dcd8:	e0bffd17 	ldw	r2,-12(fp)
   4dcdc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4dce0:	00800174 	movhi	r2,5
   4dce4:	10871c04 	addi	r2,r2,7280
   4dce8:	10800017 	ldw	r2,0(r2)
   4dcec:	1809883a 	mov	r4,r3
   4dcf0:	100b883a 	mov	r5,r2
   4dcf4:	01800174 	movhi	r6,5
   4dcf8:	31b7ca04 	addi	r6,r6,-8408
   4dcfc:	e1fffd17 	ldw	r7,-12(fp)
   4dd00:	004e8b80 	call	4e8b8 <alt_alarm_start>
   4dd04:	1000040e 	bge	r2,zero,4dd18 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4dd08:	e0bffd17 	ldw	r2,-12(fp)
   4dd0c:	00e00034 	movhi	r3,32768
   4dd10:	18ffffc4 	addi	r3,r3,-1
   4dd14:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4dd18:	e037883a 	mov	sp,fp
   4dd1c:	dfc00117 	ldw	ra,4(sp)
   4dd20:	df000017 	ldw	fp,0(sp)
   4dd24:	dec00204 	addi	sp,sp,8
   4dd28:	f800283a 	ret

0004dd2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4dd2c:	defff804 	addi	sp,sp,-32
   4dd30:	df000715 	stw	fp,28(sp)
   4dd34:	df000704 	addi	fp,sp,28
   4dd38:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4dd3c:	e0bfff17 	ldw	r2,-4(fp)
   4dd40:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4dd44:	e0bffb17 	ldw	r2,-20(fp)
   4dd48:	10800017 	ldw	r2,0(r2)
   4dd4c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4dd50:	e0bffc17 	ldw	r2,-16(fp)
   4dd54:	10800104 	addi	r2,r2,4
   4dd58:	10800037 	ldwio	r2,0(r2)
   4dd5c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4dd60:	e0bffd17 	ldw	r2,-12(fp)
   4dd64:	1080c00c 	andi	r2,r2,768
   4dd68:	1000011e 	bne	r2,zero,4dd70 <altera_avalon_jtag_uart_irq+0x44>
      break;
   4dd6c:	00006a06 	br	4df18 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4dd70:	e0bffd17 	ldw	r2,-12(fp)
   4dd74:	1080400c 	andi	r2,r2,256
   4dd78:	10003226 	beq	r2,zero,4de44 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4dd7c:	00800074 	movhi	r2,1
   4dd80:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4dd84:	e0bffb17 	ldw	r2,-20(fp)
   4dd88:	10800a17 	ldw	r2,40(r2)
   4dd8c:	10800044 	addi	r2,r2,1
   4dd90:	1081ffcc 	andi	r2,r2,2047
   4dd94:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4dd98:	e0bffb17 	ldw	r2,-20(fp)
   4dd9c:	10c00b17 	ldw	r3,44(r2)
   4dda0:	e0bffe17 	ldw	r2,-8(fp)
   4dda4:	1880011e 	bne	r3,r2,4ddac <altera_avalon_jtag_uart_irq+0x80>
          break;
   4dda8:	00001506 	br	4de00 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4ddac:	e0bffc17 	ldw	r2,-16(fp)
   4ddb0:	10800037 	ldwio	r2,0(r2)
   4ddb4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4ddb8:	e0bff917 	ldw	r2,-28(fp)
   4ddbc:	10a0000c 	andi	r2,r2,32768
   4ddc0:	1000011e 	bne	r2,zero,4ddc8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   4ddc4:	00000e06 	br	4de00 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4ddc8:	e0bffb17 	ldw	r2,-20(fp)
   4ddcc:	10800a17 	ldw	r2,40(r2)
   4ddd0:	e0fff917 	ldw	r3,-28(fp)
   4ddd4:	e13ffb17 	ldw	r4,-20(fp)
   4ddd8:	2085883a 	add	r2,r4,r2
   4dddc:	10800e04 	addi	r2,r2,56
   4dde0:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4dde4:	e0bffb17 	ldw	r2,-20(fp)
   4dde8:	10800a17 	ldw	r2,40(r2)
   4ddec:	10800044 	addi	r2,r2,1
   4ddf0:	10c1ffcc 	andi	r3,r2,2047
   4ddf4:	e0bffb17 	ldw	r2,-20(fp)
   4ddf8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4ddfc:	003fe106 	br	4dd84 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4de00:	e0bff917 	ldw	r2,-28(fp)
   4de04:	10bfffec 	andhi	r2,r2,65535
   4de08:	10000e26 	beq	r2,zero,4de44 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4de0c:	e0bffb17 	ldw	r2,-20(fp)
   4de10:	10c00817 	ldw	r3,32(r2)
   4de14:	00bfff84 	movi	r2,-2
   4de18:	1886703a 	and	r3,r3,r2
   4de1c:	e0bffb17 	ldw	r2,-20(fp)
   4de20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4de24:	e0bffc17 	ldw	r2,-16(fp)
   4de28:	10800104 	addi	r2,r2,4
   4de2c:	e0fffb17 	ldw	r3,-20(fp)
   4de30:	18c00817 	ldw	r3,32(r3)
   4de34:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4de38:	e0bffc17 	ldw	r2,-16(fp)
   4de3c:	10800104 	addi	r2,r2,4
   4de40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4de44:	e0bffd17 	ldw	r2,-12(fp)
   4de48:	1080800c 	andi	r2,r2,512
   4de4c:	10003126 	beq	r2,zero,4df14 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4de50:	e0bffd17 	ldw	r2,-12(fp)
   4de54:	1004d43a 	srli	r2,r2,16
   4de58:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4de5c:	00001406 	br	4deb0 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4de60:	e0bffc17 	ldw	r2,-16(fp)
   4de64:	e0fffb17 	ldw	r3,-20(fp)
   4de68:	18c00d17 	ldw	r3,52(r3)
   4de6c:	e13ffb17 	ldw	r4,-20(fp)
   4de70:	20c7883a 	add	r3,r4,r3
   4de74:	18c20e04 	addi	r3,r3,2104
   4de78:	18c00003 	ldbu	r3,0(r3)
   4de7c:	18c03fcc 	andi	r3,r3,255
   4de80:	18c0201c 	xori	r3,r3,128
   4de84:	18ffe004 	addi	r3,r3,-128
   4de88:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4de8c:	e0bffb17 	ldw	r2,-20(fp)
   4de90:	10800d17 	ldw	r2,52(r2)
   4de94:	10800044 	addi	r2,r2,1
   4de98:	10c1ffcc 	andi	r3,r2,2047
   4de9c:	e0bffb17 	ldw	r2,-20(fp)
   4dea0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4dea4:	e0bffa17 	ldw	r2,-24(fp)
   4dea8:	10bfffc4 	addi	r2,r2,-1
   4deac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4deb0:	e0bffa17 	ldw	r2,-24(fp)
   4deb4:	10000526 	beq	r2,zero,4decc <altera_avalon_jtag_uart_irq+0x1a0>
   4deb8:	e0bffb17 	ldw	r2,-20(fp)
   4debc:	10c00d17 	ldw	r3,52(r2)
   4dec0:	e0bffb17 	ldw	r2,-20(fp)
   4dec4:	10800c17 	ldw	r2,48(r2)
   4dec8:	18bfe51e 	bne	r3,r2,4de60 <altera_avalon_jtag_uart_irq+0x134>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4decc:	e0bffa17 	ldw	r2,-24(fp)
   4ded0:	10001026 	beq	r2,zero,4df14 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4ded4:	e0bffb17 	ldw	r2,-20(fp)
   4ded8:	10c00817 	ldw	r3,32(r2)
   4dedc:	00bfff44 	movi	r2,-3
   4dee0:	1886703a 	and	r3,r3,r2
   4dee4:	e0bffb17 	ldw	r2,-20(fp)
   4dee8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4deec:	e0bffb17 	ldw	r2,-20(fp)
   4def0:	10800017 	ldw	r2,0(r2)
   4def4:	10800104 	addi	r2,r2,4
   4def8:	e0fffb17 	ldw	r3,-20(fp)
   4defc:	18c00817 	ldw	r3,32(r3)
   4df00:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4df04:	e0bffc17 	ldw	r2,-16(fp)
   4df08:	10800104 	addi	r2,r2,4
   4df0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4df10:	003f8f06 	br	4dd50 <altera_avalon_jtag_uart_irq+0x24>
   4df14:	003f8e06 	br	4dd50 <altera_avalon_jtag_uart_irq+0x24>
}
   4df18:	e037883a 	mov	sp,fp
   4df1c:	df000017 	ldw	fp,0(sp)
   4df20:	dec00104 	addi	sp,sp,4
   4df24:	f800283a 	ret

0004df28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4df28:	defff804 	addi	sp,sp,-32
   4df2c:	df000715 	stw	fp,28(sp)
   4df30:	df000704 	addi	fp,sp,28
   4df34:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4df38:	e0bffb17 	ldw	r2,-20(fp)
   4df3c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4df40:	e0bff917 	ldw	r2,-28(fp)
   4df44:	10800017 	ldw	r2,0(r2)
   4df48:	10800104 	addi	r2,r2,4
   4df4c:	10800037 	ldwio	r2,0(r2)
   4df50:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4df54:	e0bffa17 	ldw	r2,-24(fp)
   4df58:	1081000c 	andi	r2,r2,1024
   4df5c:	10000a26 	beq	r2,zero,4df88 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4df60:	e0bff917 	ldw	r2,-28(fp)
   4df64:	10800017 	ldw	r2,0(r2)
   4df68:	10800104 	addi	r2,r2,4
   4df6c:	e0fff917 	ldw	r3,-28(fp)
   4df70:	18c00817 	ldw	r3,32(r3)
   4df74:	18c10014 	ori	r3,r3,1024
   4df78:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4df7c:	e0bff917 	ldw	r2,-28(fp)
   4df80:	10000915 	stw	zero,36(r2)
   4df84:	00000a06 	br	4dfb0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4df88:	e0bff917 	ldw	r2,-28(fp)
   4df8c:	10800917 	ldw	r2,36(r2)
   4df90:	00e00034 	movhi	r3,32768
   4df94:	18ffff04 	addi	r3,r3,-4
   4df98:	18800536 	bltu	r3,r2,4dfb0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4df9c:	e0bff917 	ldw	r2,-28(fp)
   4dfa0:	10800917 	ldw	r2,36(r2)
   4dfa4:	10c00044 	addi	r3,r2,1
   4dfa8:	e0bff917 	ldw	r2,-28(fp)
   4dfac:	10c00915 	stw	r3,36(r2)
   4dfb0:	00800174 	movhi	r2,5
   4dfb4:	10871c04 	addi	r2,r2,7280
   4dfb8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4dfbc:	e037883a 	mov	sp,fp
   4dfc0:	df000017 	ldw	fp,0(sp)
   4dfc4:	dec00104 	addi	sp,sp,4
   4dfc8:	f800283a 	ret

0004dfcc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4dfcc:	defffd04 	addi	sp,sp,-12
   4dfd0:	df000215 	stw	fp,8(sp)
   4dfd4:	df000204 	addi	fp,sp,8
   4dfd8:	e13ffe15 	stw	r4,-8(fp)
   4dfdc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4dfe0:	00000506 	br	4dff8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4dfe4:	e0bfff17 	ldw	r2,-4(fp)
   4dfe8:	1090000c 	andi	r2,r2,16384
   4dfec:	10000226 	beq	r2,zero,4dff8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4dff0:	00bffd44 	movi	r2,-11
   4dff4:	00000b06 	br	4e024 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4dff8:	e0bffe17 	ldw	r2,-8(fp)
   4dffc:	10c00d17 	ldw	r3,52(r2)
   4e000:	e0bffe17 	ldw	r2,-8(fp)
   4e004:	10800c17 	ldw	r2,48(r2)
   4e008:	18800526 	beq	r3,r2,4e020 <altera_avalon_jtag_uart_close+0x54>
   4e00c:	e0bffe17 	ldw	r2,-8(fp)
   4e010:	10c00917 	ldw	r3,36(r2)
   4e014:	e0bffe17 	ldw	r2,-8(fp)
   4e018:	10800117 	ldw	r2,4(r2)
   4e01c:	18bff136 	bltu	r3,r2,4dfe4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4e020:	0005883a 	mov	r2,zero
}
   4e024:	e037883a 	mov	sp,fp
   4e028:	df000017 	ldw	fp,0(sp)
   4e02c:	dec00104 	addi	sp,sp,4
   4e030:	f800283a 	ret

0004e034 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4e034:	defffa04 	addi	sp,sp,-24
   4e038:	df000515 	stw	fp,20(sp)
   4e03c:	df000504 	addi	fp,sp,20
   4e040:	e13ffd15 	stw	r4,-12(fp)
   4e044:	e17ffe15 	stw	r5,-8(fp)
   4e048:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4e04c:	00bff9c4 	movi	r2,-25
   4e050:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4e054:	e0bffe17 	ldw	r2,-8(fp)
   4e058:	10da8060 	cmpeqi	r3,r2,27137
   4e05c:	1800031e 	bne	r3,zero,4e06c <altera_avalon_jtag_uart_ioctl+0x38>
   4e060:	109a80a0 	cmpeqi	r2,r2,27138
   4e064:	1000191e 	bne	r2,zero,4e0cc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   4e068:	00002806 	br	4e10c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4e06c:	e0bffd17 	ldw	r2,-12(fp)
   4e070:	10c00117 	ldw	r3,4(r2)
   4e074:	00a00034 	movhi	r2,32768
   4e078:	10bfffc4 	addi	r2,r2,-1
   4e07c:	18801226 	beq	r3,r2,4e0c8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   4e080:	e0bfff17 	ldw	r2,-4(fp)
   4e084:	10800017 	ldw	r2,0(r2)
   4e088:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4e08c:	e0bffc17 	ldw	r2,-16(fp)
   4e090:	10800090 	cmplti	r2,r2,2
   4e094:	1000061e 	bne	r2,zero,4e0b0 <altera_avalon_jtag_uart_ioctl+0x7c>
   4e098:	e0fffc17 	ldw	r3,-16(fp)
   4e09c:	00a00034 	movhi	r2,32768
   4e0a0:	10bfffc4 	addi	r2,r2,-1
   4e0a4:	18800226 	beq	r3,r2,4e0b0 <altera_avalon_jtag_uart_ioctl+0x7c>
   4e0a8:	e0bffc17 	ldw	r2,-16(fp)
   4e0ac:	00000206 	br	4e0b8 <altera_avalon_jtag_uart_ioctl+0x84>
   4e0b0:	00a00034 	movhi	r2,32768
   4e0b4:	10bfff84 	addi	r2,r2,-2
   4e0b8:	e0fffd17 	ldw	r3,-12(fp)
   4e0bc:	18800115 	stw	r2,4(r3)
      rc = 0;
   4e0c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4e0c4:	00001106 	br	4e10c <altera_avalon_jtag_uart_ioctl+0xd8>
   4e0c8:	00001006 	br	4e10c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4e0cc:	e0bffd17 	ldw	r2,-12(fp)
   4e0d0:	10c00117 	ldw	r3,4(r2)
   4e0d4:	00a00034 	movhi	r2,32768
   4e0d8:	10bfffc4 	addi	r2,r2,-1
   4e0dc:	18800a26 	beq	r3,r2,4e108 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4e0e0:	e0bffd17 	ldw	r2,-12(fp)
   4e0e4:	10c00917 	ldw	r3,36(r2)
   4e0e8:	e0bffd17 	ldw	r2,-12(fp)
   4e0ec:	10800117 	ldw	r2,4(r2)
   4e0f0:	1885803a 	cmpltu	r2,r3,r2
   4e0f4:	10c03fcc 	andi	r3,r2,255
   4e0f8:	e0bfff17 	ldw	r2,-4(fp)
   4e0fc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4e100:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4e104:	00000006 	br	4e108 <altera_avalon_jtag_uart_ioctl+0xd4>
   4e108:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4e10c:	e0bffb17 	ldw	r2,-20(fp)
}
   4e110:	e037883a 	mov	sp,fp
   4e114:	df000017 	ldw	fp,0(sp)
   4e118:	dec00104 	addi	sp,sp,4
   4e11c:	f800283a 	ret

0004e120 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4e120:	defff304 	addi	sp,sp,-52
   4e124:	dfc00c15 	stw	ra,48(sp)
   4e128:	df000b15 	stw	fp,44(sp)
   4e12c:	df000b04 	addi	fp,sp,44
   4e130:	e13ffc15 	stw	r4,-16(fp)
   4e134:	e17ffd15 	stw	r5,-12(fp)
   4e138:	e1bffe15 	stw	r6,-8(fp)
   4e13c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4e140:	e0bffd17 	ldw	r2,-12(fp)
   4e144:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e148:	00004906 	br	4e270 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4e14c:	e0bffc17 	ldw	r2,-16(fp)
   4e150:	10800a17 	ldw	r2,40(r2)
   4e154:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4e158:	e0bffc17 	ldw	r2,-16(fp)
   4e15c:	10800b17 	ldw	r2,44(r2)
   4e160:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4e164:	e0fff717 	ldw	r3,-36(fp)
   4e168:	e0bff817 	ldw	r2,-32(fp)
   4e16c:	18800536 	bltu	r3,r2,4e184 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4e170:	e0fff717 	ldw	r3,-36(fp)
   4e174:	e0bff817 	ldw	r2,-32(fp)
   4e178:	1885c83a 	sub	r2,r3,r2
   4e17c:	e0bff615 	stw	r2,-40(fp)
   4e180:	00000406 	br	4e194 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4e184:	00c20004 	movi	r3,2048
   4e188:	e0bff817 	ldw	r2,-32(fp)
   4e18c:	1885c83a 	sub	r2,r3,r2
   4e190:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4e194:	e0bff617 	ldw	r2,-40(fp)
   4e198:	1000011e 	bne	r2,zero,4e1a0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   4e19c:	00001d06 	br	4e214 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   4e1a0:	e0fffe17 	ldw	r3,-8(fp)
   4e1a4:	e0bff617 	ldw	r2,-40(fp)
   4e1a8:	1880022e 	bgeu	r3,r2,4e1b4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4e1ac:	e0bffe17 	ldw	r2,-8(fp)
   4e1b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4e1b4:	e0bff817 	ldw	r2,-32(fp)
   4e1b8:	10800e04 	addi	r2,r2,56
   4e1bc:	e0fffc17 	ldw	r3,-16(fp)
   4e1c0:	1885883a 	add	r2,r3,r2
   4e1c4:	e13ff517 	ldw	r4,-44(fp)
   4e1c8:	100b883a 	mov	r5,r2
   4e1cc:	e1bff617 	ldw	r6,-40(fp)
   4e1d0:	00431340 	call	43134 <memcpy>
      ptr   += n;
   4e1d4:	e0fff517 	ldw	r3,-44(fp)
   4e1d8:	e0bff617 	ldw	r2,-40(fp)
   4e1dc:	1885883a 	add	r2,r3,r2
   4e1e0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4e1e4:	e0fffe17 	ldw	r3,-8(fp)
   4e1e8:	e0bff617 	ldw	r2,-40(fp)
   4e1ec:	1885c83a 	sub	r2,r3,r2
   4e1f0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e1f4:	e0fff817 	ldw	r3,-32(fp)
   4e1f8:	e0bff617 	ldw	r2,-40(fp)
   4e1fc:	1885883a 	add	r2,r3,r2
   4e200:	10c1ffcc 	andi	r3,r2,2047
   4e204:	e0bffc17 	ldw	r2,-16(fp)
   4e208:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4e20c:	e0bffe17 	ldw	r2,-8(fp)
   4e210:	00bfce16 	blt	zero,r2,4e14c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4e214:	e0fff517 	ldw	r3,-44(fp)
   4e218:	e0bffd17 	ldw	r2,-12(fp)
   4e21c:	18800126 	beq	r3,r2,4e224 <altera_avalon_jtag_uart_read+0x104>
      break;
   4e220:	00001506 	br	4e278 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4e224:	e0bfff17 	ldw	r2,-4(fp)
   4e228:	1090000c 	andi	r2,r2,16384
   4e22c:	10000126 	beq	r2,zero,4e234 <altera_avalon_jtag_uart_read+0x114>
      break;
   4e230:	00001106 	br	4e278 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4e234:	0001883a 	nop
   4e238:	e0bffc17 	ldw	r2,-16(fp)
   4e23c:	10c00a17 	ldw	r3,40(r2)
   4e240:	e0bff717 	ldw	r2,-36(fp)
   4e244:	1880051e 	bne	r3,r2,4e25c <altera_avalon_jtag_uart_read+0x13c>
   4e248:	e0bffc17 	ldw	r2,-16(fp)
   4e24c:	10c00917 	ldw	r3,36(r2)
   4e250:	e0bffc17 	ldw	r2,-16(fp)
   4e254:	10800117 	ldw	r2,4(r2)
   4e258:	18bff736 	bltu	r3,r2,4e238 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4e25c:	e0bffc17 	ldw	r2,-16(fp)
   4e260:	10c00a17 	ldw	r3,40(r2)
   4e264:	e0bff717 	ldw	r2,-36(fp)
   4e268:	1880011e 	bne	r3,r2,4e270 <altera_avalon_jtag_uart_read+0x150>
      break;
   4e26c:	00000206 	br	4e278 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4e270:	e0bffe17 	ldw	r2,-8(fp)
   4e274:	00bfb516 	blt	zero,r2,4e14c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4e278:	e0fff517 	ldw	r3,-44(fp)
   4e27c:	e0bffd17 	ldw	r2,-12(fp)
   4e280:	18801726 	beq	r3,r2,4e2e0 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e284:	0005303a 	rdctl	r2,status
   4e288:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e28c:	e0fffa17 	ldw	r3,-24(fp)
   4e290:	00bfff84 	movi	r2,-2
   4e294:	1884703a 	and	r2,r3,r2
   4e298:	1001703a 	wrctl	status,r2
  
  return context;
   4e29c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4e2a0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4e2a4:	e0bffc17 	ldw	r2,-16(fp)
   4e2a8:	10800817 	ldw	r2,32(r2)
   4e2ac:	10c00054 	ori	r3,r2,1
   4e2b0:	e0bffc17 	ldw	r2,-16(fp)
   4e2b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e2b8:	e0bffc17 	ldw	r2,-16(fp)
   4e2bc:	10800017 	ldw	r2,0(r2)
   4e2c0:	10800104 	addi	r2,r2,4
   4e2c4:	e0fffc17 	ldw	r3,-16(fp)
   4e2c8:	18c00817 	ldw	r3,32(r3)
   4e2cc:	10c00035 	stwio	r3,0(r2)
   4e2d0:	e0bff917 	ldw	r2,-28(fp)
   4e2d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e2d8:	e0bffb17 	ldw	r2,-20(fp)
   4e2dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4e2e0:	e0fff517 	ldw	r3,-44(fp)
   4e2e4:	e0bffd17 	ldw	r2,-12(fp)
   4e2e8:	18800426 	beq	r3,r2,4e2fc <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
   4e2ec:	e0fff517 	ldw	r3,-44(fp)
   4e2f0:	e0bffd17 	ldw	r2,-12(fp)
   4e2f4:	1885c83a 	sub	r2,r3,r2
   4e2f8:	00000606 	br	4e314 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
   4e2fc:	e0bfff17 	ldw	r2,-4(fp)
   4e300:	1090000c 	andi	r2,r2,16384
   4e304:	10000226 	beq	r2,zero,4e310 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
   4e308:	00bffd44 	movi	r2,-11
   4e30c:	00000106 	br	4e314 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
   4e310:	00bffec4 	movi	r2,-5
}
   4e314:	e037883a 	mov	sp,fp
   4e318:	dfc00117 	ldw	ra,4(sp)
   4e31c:	df000017 	ldw	fp,0(sp)
   4e320:	dec00204 	addi	sp,sp,8
   4e324:	f800283a 	ret

0004e328 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4e328:	defff304 	addi	sp,sp,-52
   4e32c:	dfc00c15 	stw	ra,48(sp)
   4e330:	df000b15 	stw	fp,44(sp)
   4e334:	df000b04 	addi	fp,sp,44
   4e338:	e13ffc15 	stw	r4,-16(fp)
   4e33c:	e17ffd15 	stw	r5,-12(fp)
   4e340:	e1bffe15 	stw	r6,-8(fp)
   4e344:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4e348:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4e34c:	e0bffd17 	ldw	r2,-12(fp)
   4e350:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e354:	00003906 	br	4e43c <altera_avalon_jtag_uart_write+0x114>
   4e358:	00003806 	br	4e43c <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4e35c:	e0bffc17 	ldw	r2,-16(fp)
   4e360:	10800c17 	ldw	r2,48(r2)
   4e364:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4e368:	e0bffc17 	ldw	r2,-16(fp)
   4e36c:	10800d17 	ldw	r2,52(r2)
   4e370:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4e374:	e0fff817 	ldw	r3,-32(fp)
   4e378:	e0bff517 	ldw	r2,-44(fp)
   4e37c:	1880062e 	bgeu	r3,r2,4e398 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
   4e380:	e0fff517 	ldw	r3,-44(fp)
   4e384:	e0bff817 	ldw	r2,-32(fp)
   4e388:	1885c83a 	sub	r2,r3,r2
   4e38c:	10bfffc4 	addi	r2,r2,-1
   4e390:	e0bff615 	stw	r2,-40(fp)
   4e394:	00000b06 	br	4e3c4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   4e398:	e0bff517 	ldw	r2,-44(fp)
   4e39c:	10000526 	beq	r2,zero,4e3b4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4e3a0:	00c20004 	movi	r3,2048
   4e3a4:	e0bff817 	ldw	r2,-32(fp)
   4e3a8:	1885c83a 	sub	r2,r3,r2
   4e3ac:	e0bff615 	stw	r2,-40(fp)
   4e3b0:	00000406 	br	4e3c4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4e3b4:	00c1ffc4 	movi	r3,2047
   4e3b8:	e0bff817 	ldw	r2,-32(fp)
   4e3bc:	1885c83a 	sub	r2,r3,r2
   4e3c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4e3c4:	e0bff617 	ldw	r2,-40(fp)
   4e3c8:	1000011e 	bne	r2,zero,4e3d0 <altera_avalon_jtag_uart_write+0xa8>
        break;
   4e3cc:	00001d06 	br	4e444 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
   4e3d0:	e0fffe17 	ldw	r3,-8(fp)
   4e3d4:	e0bff617 	ldw	r2,-40(fp)
   4e3d8:	1880022e 	bgeu	r3,r2,4e3e4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   4e3dc:	e0bffe17 	ldw	r2,-8(fp)
   4e3e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4e3e4:	e0bff817 	ldw	r2,-32(fp)
   4e3e8:	10820e04 	addi	r2,r2,2104
   4e3ec:	e0fffc17 	ldw	r3,-16(fp)
   4e3f0:	1885883a 	add	r2,r3,r2
   4e3f4:	1009883a 	mov	r4,r2
   4e3f8:	e17ffd17 	ldw	r5,-12(fp)
   4e3fc:	e1bff617 	ldw	r6,-40(fp)
   4e400:	00431340 	call	43134 <memcpy>
      ptr   += n;
   4e404:	e0fffd17 	ldw	r3,-12(fp)
   4e408:	e0bff617 	ldw	r2,-40(fp)
   4e40c:	1885883a 	add	r2,r3,r2
   4e410:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4e414:	e0fffe17 	ldw	r3,-8(fp)
   4e418:	e0bff617 	ldw	r2,-40(fp)
   4e41c:	1885c83a 	sub	r2,r3,r2
   4e420:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4e424:	e0fff817 	ldw	r3,-32(fp)
   4e428:	e0bff617 	ldw	r2,-40(fp)
   4e42c:	1885883a 	add	r2,r3,r2
   4e430:	10c1ffcc 	andi	r3,r2,2047
   4e434:	e0bffc17 	ldw	r2,-16(fp)
   4e438:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4e43c:	e0bffe17 	ldw	r2,-8(fp)
   4e440:	00bfc616 	blt	zero,r2,4e35c <altera_avalon_jtag_uart_write+0x34>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e444:	0005303a 	rdctl	r2,status
   4e448:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e44c:	e0fffa17 	ldw	r3,-24(fp)
   4e450:	00bfff84 	movi	r2,-2
   4e454:	1884703a 	and	r2,r3,r2
   4e458:	1001703a 	wrctl	status,r2
  
  return context;
   4e45c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4e460:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4e464:	e0bffc17 	ldw	r2,-16(fp)
   4e468:	10800817 	ldw	r2,32(r2)
   4e46c:	10c00094 	ori	r3,r2,2
   4e470:	e0bffc17 	ldw	r2,-16(fp)
   4e474:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4e478:	e0bffc17 	ldw	r2,-16(fp)
   4e47c:	10800017 	ldw	r2,0(r2)
   4e480:	10800104 	addi	r2,r2,4
   4e484:	e0fffc17 	ldw	r3,-16(fp)
   4e488:	18c00817 	ldw	r3,32(r3)
   4e48c:	10c00035 	stwio	r3,0(r2)
   4e490:	e0bff917 	ldw	r2,-28(fp)
   4e494:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e498:	e0bffb17 	ldw	r2,-20(fp)
   4e49c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4e4a0:	e0bffe17 	ldw	r2,-8(fp)
   4e4a4:	0080120e 	bge	zero,r2,4e4f0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   4e4a8:	e0bfff17 	ldw	r2,-4(fp)
   4e4ac:	1090000c 	andi	r2,r2,16384
   4e4b0:	10000126 	beq	r2,zero,4e4b8 <altera_avalon_jtag_uart_write+0x190>
        break;
   4e4b4:	00001006 	br	4e4f8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4e4b8:	0001883a 	nop
   4e4bc:	e0bffc17 	ldw	r2,-16(fp)
   4e4c0:	10c00d17 	ldw	r3,52(r2)
   4e4c4:	e0bff517 	ldw	r2,-44(fp)
   4e4c8:	1880051e 	bne	r3,r2,4e4e0 <altera_avalon_jtag_uart_write+0x1b8>
   4e4cc:	e0bffc17 	ldw	r2,-16(fp)
   4e4d0:	10c00917 	ldw	r3,36(r2)
   4e4d4:	e0bffc17 	ldw	r2,-16(fp)
   4e4d8:	10800117 	ldw	r2,4(r2)
   4e4dc:	18bff736 	bltu	r3,r2,4e4bc <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4e4e0:	e0bffc17 	ldw	r2,-16(fp)
   4e4e4:	10800917 	ldw	r2,36(r2)
   4e4e8:	10000126 	beq	r2,zero,4e4f0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   4e4ec:	00000206 	br	4e4f8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   4e4f0:	e0bffe17 	ldw	r2,-8(fp)
   4e4f4:	00bf9816 	blt	zero,r2,4e358 <altera_avalon_jtag_uart_write+0x30>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4e4f8:	e0fffd17 	ldw	r3,-12(fp)
   4e4fc:	e0bff717 	ldw	r2,-36(fp)
   4e500:	18800426 	beq	r3,r2,4e514 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   4e504:	e0fffd17 	ldw	r3,-12(fp)
   4e508:	e0bff717 	ldw	r2,-36(fp)
   4e50c:	1885c83a 	sub	r2,r3,r2
   4e510:	00000606 	br	4e52c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   4e514:	e0bfff17 	ldw	r2,-4(fp)
   4e518:	1090000c 	andi	r2,r2,16384
   4e51c:	10000226 	beq	r2,zero,4e528 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   4e520:	00bffd44 	movi	r2,-11
   4e524:	00000106 	br	4e52c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4e528:	00bffec4 	movi	r2,-5
}
   4e52c:	e037883a 	mov	sp,fp
   4e530:	dfc00117 	ldw	ra,4(sp)
   4e534:	df000017 	ldw	fp,0(sp)
   4e538:	dec00204 	addi	sp,sp,8
   4e53c:	f800283a 	ret

0004e540 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4e540:	defffa04 	addi	sp,sp,-24
   4e544:	dfc00515 	stw	ra,20(sp)
   4e548:	df000415 	stw	fp,16(sp)
   4e54c:	df000404 	addi	fp,sp,16
   4e550:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4e554:	0007883a 	mov	r3,zero
   4e558:	e0bfff17 	ldw	r2,-4(fp)
   4e55c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4e560:	e0bfff17 	ldw	r2,-4(fp)
   4e564:	10800104 	addi	r2,r2,4
   4e568:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e56c:	0005303a 	rdctl	r2,status
   4e570:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e574:	e0fffd17 	ldw	r3,-12(fp)
   4e578:	00bfff84 	movi	r2,-2
   4e57c:	1884703a 	and	r2,r3,r2
   4e580:	1001703a 	wrctl	status,r2
  
  return context;
   4e584:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4e588:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4e58c:	004f2a80 	call	4f2a8 <alt_tick>
   4e590:	e0bffc17 	ldw	r2,-16(fp)
   4e594:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e598:	e0bffe17 	ldw	r2,-8(fp)
   4e59c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4e5a0:	e037883a 	mov	sp,fp
   4e5a4:	dfc00117 	ldw	ra,4(sp)
   4e5a8:	df000017 	ldw	fp,0(sp)
   4e5ac:	dec00204 	addi	sp,sp,8
   4e5b0:	f800283a 	ret

0004e5b4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4e5b4:	defff804 	addi	sp,sp,-32
   4e5b8:	dfc00715 	stw	ra,28(sp)
   4e5bc:	df000615 	stw	fp,24(sp)
   4e5c0:	df000604 	addi	fp,sp,24
   4e5c4:	e13ffc15 	stw	r4,-16(fp)
   4e5c8:	e17ffd15 	stw	r5,-12(fp)
   4e5cc:	e1bffe15 	stw	r6,-8(fp)
   4e5d0:	e1ffff15 	stw	r7,-4(fp)
   4e5d4:	e0bfff17 	ldw	r2,-4(fp)
   4e5d8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4e5dc:	00800174 	movhi	r2,5
   4e5e0:	10871c04 	addi	r2,r2,7280
   4e5e4:	10800017 	ldw	r2,0(r2)
   4e5e8:	1000041e 	bne	r2,zero,4e5fc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4e5ec:	00800174 	movhi	r2,5
   4e5f0:	10871c04 	addi	r2,r2,7280
   4e5f4:	e0fffb17 	ldw	r3,-20(fp)
   4e5f8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4e5fc:	e0bffc17 	ldw	r2,-16(fp)
   4e600:	10800104 	addi	r2,r2,4
   4e604:	00c001c4 	movi	r3,7
   4e608:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4e60c:	d8000015 	stw	zero,0(sp)
   4e610:	e13ffd17 	ldw	r4,-12(fp)
   4e614:	e17ffe17 	ldw	r5,-8(fp)
   4e618:	01800174 	movhi	r6,5
   4e61c:	31b95004 	addi	r6,r6,-6848
   4e620:	e1fffc17 	ldw	r7,-16(fp)
   4e624:	004eba00 	call	4eba0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4e628:	e037883a 	mov	sp,fp
   4e62c:	dfc00117 	ldw	ra,4(sp)
   4e630:	df000017 	ldw	fp,0(sp)
   4e634:	dec00204 	addi	sp,sp,8
   4e638:	f800283a 	ret

0004e63c <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   4e63c:	deffe504 	addi	sp,sp,-108
   4e640:	dfc01915 	stw	ra,100(sp)
   4e644:	df001815 	stw	fp,96(sp)
   4e648:	dcc01715 	stw	r19,92(sp)
   4e64c:	dc801615 	stw	r18,88(sp)
   4e650:	dc401515 	stw	r17,84(sp)
   4e654:	dc001415 	stw	r16,80(sp)
   4e658:	df001804 	addi	fp,sp,96
   4e65c:	e13ff915 	stw	r4,-28(fp)
   4e660:	e17ffa15 	stw	r5,-24(fp)
   4e664:	e1c00215 	stw	r7,8(fp)
   4e668:	e1bffb15 	stw	r6,-20(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
   4e66c:	00800044 	movi	r2,1
   4e670:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
   4e674:	00800174 	movhi	r2,5
   4e678:	10801404 	addi	r2,r2,80
   4e67c:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
   4e680:	00800174 	movhi	r2,5
   4e684:	10802504 	addi	r2,r2,148
   4e688:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
   4e68c:	0007883a 	mov	r3,zero
   4e690:	e0bff917 	ldw	r2,-28(fp)
   4e694:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
   4e698:	e0800204 	addi	r2,fp,8
   4e69c:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
   4e6a0:	e13ff917 	ldw	r4,-28(fp)
   4e6a4:	004f4800 	call	4f480 <perf_get_total_time>
   4e6a8:	e0bff215 	stw	r2,-56(fp)
   4e6ac:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
   4e6b0:	e13ff217 	ldw	r4,-56(fp)
   4e6b4:	e17ff317 	ldw	r5,-52(fp)
   4e6b8:	004fb2c0 	call	4fb2c <__floatundidf>
   4e6bc:	1021883a 	mov	r16,r2
   4e6c0:	1823883a 	mov	r17,r3
   4e6c4:	e13ffa17 	ldw	r4,-24(fp)
   4e6c8:	004d0d80 	call	4d0d8 <__floatunsidf>
   4e6cc:	100f883a 	mov	r7,r2
   4e6d0:	1811883a 	mov	r8,r3
   4e6d4:	8009883a 	mov	r4,r16
   4e6d8:	880b883a 	mov	r5,r17
   4e6dc:	380d883a 	mov	r6,r7
   4e6e0:	400f883a 	mov	r7,r8
   4e6e4:	00418400 	call	41840 <__divdf3>
   4e6e8:	1009883a 	mov	r4,r2
   4e6ec:	180b883a 	mov	r5,r3
   4e6f0:	e13ff415 	stw	r4,-48(fp)
   4e6f4:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
   4e6f8:	e0bff017 	ldw	r2,-64(fp)
   4e6fc:	d8800115 	stw	r2,4(sp)
   4e700:	e0bff117 	ldw	r2,-60(fp)
   4e704:	d8800215 	stw	r2,8(sp)
   4e708:	e0bff017 	ldw	r2,-64(fp)
   4e70c:	d8800315 	stw	r2,12(sp)
   4e710:	e0bff317 	ldw	r2,-52(fp)
   4e714:	d8800015 	stw	r2,0(sp)
   4e718:	e1fff217 	ldw	r7,-56(fp)
   4e71c:	01000174 	movhi	r4,5
   4e720:	21003604 	addi	r4,r4,216
   4e724:	e17ff417 	ldw	r5,-48(fp)
   4e728:	e1bff517 	ldw	r6,-44(fp)
   4e72c:	004326c0 	call	4326c <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
   4e730:	e0bff817 	ldw	r2,-32(fp)
   4e734:	10c00104 	addi	r3,r2,4
   4e738:	e0fff815 	stw	r3,-32(fp)
   4e73c:	10800017 	ldw	r2,0(r2)
   4e740:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
   4e744:	00800044 	movi	r2,1
   4e748:	e0bfef15 	stw	r2,-68(fp)
   4e74c:	00004d06 	br	4e884 <perf_print_formatted_report+0x248>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
   4e750:	e13ff917 	ldw	r4,-28(fp)
   4e754:	e17fef17 	ldw	r5,-68(fp)
   4e758:	004f3cc0 	call	4f3cc <perf_get_section_time>
   4e75c:	e0bff615 	stw	r2,-40(fp)
   4e760:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
   4e764:	e13ff617 	ldw	r4,-40(fp)
   4e768:	e17ff717 	ldw	r5,-36(fp)
   4e76c:	004fb2c0 	call	4fb2c <__floatundidf>
   4e770:	100b883a 	mov	r5,r2
   4e774:	180d883a 	mov	r6,r3
   4e778:	2809883a 	mov	r4,r5
   4e77c:	300b883a 	mov	r5,r6
   4e780:	000d883a 	mov	r6,zero
   4e784:	01d01674 	movhi	r7,16473
   4e788:	00421140 	call	42114 <__muldf3>
   4e78c:	1009883a 	mov	r4,r2
   4e790:	180b883a 	mov	r5,r3
   4e794:	2021883a 	mov	r16,r4
   4e798:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   4e79c:	e13ff217 	ldw	r4,-56(fp)
   4e7a0:	e17ff317 	ldw	r5,-52(fp)
   4e7a4:	004fb2c0 	call	4fb2c <__floatundidf>
   4e7a8:	100f883a 	mov	r7,r2
   4e7ac:	1811883a 	mov	r8,r3
   4e7b0:	8009883a 	mov	r4,r16
   4e7b4:	880b883a 	mov	r5,r17
   4e7b8:	380d883a 	mov	r6,r7
   4e7bc:	400f883a 	mov	r7,r8
   4e7c0:	00418400 	call	41840 <__divdf3>
   4e7c4:	1009883a 	mov	r4,r2
   4e7c8:	180b883a 	mov	r5,r3
   4e7cc:	2021883a 	mov	r16,r4
   4e7d0:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
   4e7d4:	e13ff617 	ldw	r4,-40(fp)
   4e7d8:	e17ff717 	ldw	r5,-36(fp)
   4e7dc:	004fb2c0 	call	4fb2c <__floatundidf>
   4e7e0:	1025883a 	mov	r18,r2
   4e7e4:	1827883a 	mov	r19,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   4e7e8:	e13ffa17 	ldw	r4,-24(fp)
   4e7ec:	004d0d80 	call	4d0d8 <__floatunsidf>
   4e7f0:	100f883a 	mov	r7,r2
   4e7f4:	1811883a 	mov	r8,r3
   4e7f8:	9009883a 	mov	r4,r18
   4e7fc:	980b883a 	mov	r5,r19
   4e800:	380d883a 	mov	r6,r7
   4e804:	400f883a 	mov	r7,r8
   4e808:	00418400 	call	41840 <__divdf3>
   4e80c:	1009883a 	mov	r4,r2
   4e810:	180b883a 	mov	r5,r3
   4e814:	2025883a 	mov	r18,r4
   4e818:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
   4e81c:	e13ff917 	ldw	r4,-28(fp)
   4e820:	e17fef17 	ldw	r5,-68(fp)
   4e824:	004f4cc0 	call	4f4cc <perf_get_num_starts>

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   4e828:	dc800015 	stw	r18,0(sp)
   4e82c:	dcc00115 	stw	r19,4(sp)
   4e830:	e0fff617 	ldw	r3,-40(fp)
   4e834:	d8c00215 	stw	r3,8(sp)
   4e838:	e0fff717 	ldw	r3,-36(fp)
   4e83c:	d8c00315 	stw	r3,12(sp)
   4e840:	d8800415 	stw	r2,16(sp)
   4e844:	e0bff017 	ldw	r2,-64(fp)
   4e848:	d8800515 	stw	r2,20(sp)
   4e84c:	01000174 	movhi	r4,5
   4e850:	21004b04 	addi	r4,r4,300
   4e854:	e17fee17 	ldw	r5,-72(fp)
   4e858:	800d883a 	mov	r6,r16
   4e85c:	880f883a 	mov	r7,r17
   4e860:	004326c0 	call	4326c <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
   4e864:	e0bff817 	ldw	r2,-32(fp)
   4e868:	10c00104 	addi	r3,r2,4
   4e86c:	e0fff815 	stw	r3,-32(fp)
   4e870:	10800017 	ldw	r2,0(r2)
   4e874:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
   4e878:	e0bfef17 	ldw	r2,-68(fp)
   4e87c:	10800044 	addi	r2,r2,1
   4e880:	e0bfef15 	stw	r2,-68(fp)
   4e884:	e0bfef17 	ldw	r2,-68(fp)
   4e888:	e0fffb17 	ldw	r3,-20(fp)
   4e88c:	18bfb00e 	bge	r3,r2,4e750 <perf_print_formatted_report+0x114>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
   4e890:	0005883a 	mov	r2,zero
}
   4e894:	e6fffc04 	addi	sp,fp,-16
   4e898:	dfc00517 	ldw	ra,20(sp)
   4e89c:	df000417 	ldw	fp,16(sp)
   4e8a0:	dcc00317 	ldw	r19,12(sp)
   4e8a4:	dc800217 	ldw	r18,8(sp)
   4e8a8:	dc400117 	ldw	r17,4(sp)
   4e8ac:	dc000017 	ldw	r16,0(sp)
   4e8b0:	dec00704 	addi	sp,sp,28
   4e8b4:	f800283a 	ret

0004e8b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4e8b8:	defff504 	addi	sp,sp,-44
   4e8bc:	df000a15 	stw	fp,40(sp)
   4e8c0:	df000a04 	addi	fp,sp,40
   4e8c4:	e13ffc15 	stw	r4,-16(fp)
   4e8c8:	e17ffd15 	stw	r5,-12(fp)
   4e8cc:	e1bffe15 	stw	r6,-8(fp)
   4e8d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4e8d4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4e8d8:	00800174 	movhi	r2,5
   4e8dc:	10871c04 	addi	r2,r2,7280
   4e8e0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4e8e4:	10003f26 	beq	r2,zero,4e9e4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   4e8e8:	e0bffc17 	ldw	r2,-16(fp)
   4e8ec:	10003b26 	beq	r2,zero,4e9dc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4e8f0:	e0bffc17 	ldw	r2,-16(fp)
   4e8f4:	e0fffe17 	ldw	r3,-8(fp)
   4e8f8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4e8fc:	e0bffc17 	ldw	r2,-16(fp)
   4e900:	e0ffff17 	ldw	r3,-4(fp)
   4e904:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e908:	0005303a 	rdctl	r2,status
   4e90c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e910:	e0fff817 	ldw	r3,-32(fp)
   4e914:	00bfff84 	movi	r2,-2
   4e918:	1884703a 	and	r2,r3,r2
   4e91c:	1001703a 	wrctl	status,r2
  
  return context;
   4e920:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4e924:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4e928:	00800174 	movhi	r2,5
   4e92c:	10871d04 	addi	r2,r2,7284
   4e930:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4e934:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4e938:	e0fffd17 	ldw	r3,-12(fp)
   4e93c:	e0bff617 	ldw	r2,-40(fp)
   4e940:	1885883a 	add	r2,r3,r2
   4e944:	10c00044 	addi	r3,r2,1
   4e948:	e0bffc17 	ldw	r2,-16(fp)
   4e94c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4e950:	e0bffc17 	ldw	r2,-16(fp)
   4e954:	10c00217 	ldw	r3,8(r2)
   4e958:	e0bff617 	ldw	r2,-40(fp)
   4e95c:	1880042e 	bgeu	r3,r2,4e970 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4e960:	e0bffc17 	ldw	r2,-16(fp)
   4e964:	00c00044 	movi	r3,1
   4e968:	10c00405 	stb	r3,16(r2)
   4e96c:	00000206 	br	4e978 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4e970:	e0bffc17 	ldw	r2,-16(fp)
   4e974:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4e978:	e0bffc17 	ldw	r2,-16(fp)
   4e97c:	00c00174 	movhi	r3,5
   4e980:	18c70d04 	addi	r3,r3,7220
   4e984:	e0fff915 	stw	r3,-28(fp)
   4e988:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4e98c:	e0bffa17 	ldw	r2,-24(fp)
   4e990:	e0fff917 	ldw	r3,-28(fp)
   4e994:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4e998:	e0bff917 	ldw	r2,-28(fp)
   4e99c:	10c00017 	ldw	r3,0(r2)
   4e9a0:	e0bffa17 	ldw	r2,-24(fp)
   4e9a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4e9a8:	e0bff917 	ldw	r2,-28(fp)
   4e9ac:	10800017 	ldw	r2,0(r2)
   4e9b0:	e0fffa17 	ldw	r3,-24(fp)
   4e9b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4e9b8:	e0bff917 	ldw	r2,-28(fp)
   4e9bc:	e0fffa17 	ldw	r3,-24(fp)
   4e9c0:	10c00015 	stw	r3,0(r2)
   4e9c4:	e0bff717 	ldw	r2,-36(fp)
   4e9c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e9cc:	e0bffb17 	ldw	r2,-20(fp)
   4e9d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4e9d4:	0005883a 	mov	r2,zero
   4e9d8:	00000306 	br	4e9e8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4e9dc:	00bffa84 	movi	r2,-22
   4e9e0:	00000106 	br	4e9e8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4e9e4:	00bfde84 	movi	r2,-134
  }
}
   4e9e8:	e037883a 	mov	sp,fp
   4e9ec:	df000017 	ldw	fp,0(sp)
   4e9f0:	dec00104 	addi	sp,sp,4
   4e9f4:	f800283a 	ret

0004e9f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e9f8:	defffe04 	addi	sp,sp,-8
   4e9fc:	dfc00115 	stw	ra,4(sp)
   4ea00:	df000015 	stw	fp,0(sp)
   4ea04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ea08:	00800174 	movhi	r2,5
   4ea0c:	10870a04 	addi	r2,r2,7208
   4ea10:	10800017 	ldw	r2,0(r2)
   4ea14:	10000526 	beq	r2,zero,4ea2c <alt_get_errno+0x34>
   4ea18:	00800174 	movhi	r2,5
   4ea1c:	10870a04 	addi	r2,r2,7208
   4ea20:	10800017 	ldw	r2,0(r2)
   4ea24:	103ee83a 	callr	r2
   4ea28:	00000206 	br	4ea34 <alt_get_errno+0x3c>
   4ea2c:	00800174 	movhi	r2,5
   4ea30:	10871504 	addi	r2,r2,7252
}
   4ea34:	e037883a 	mov	sp,fp
   4ea38:	dfc00117 	ldw	ra,4(sp)
   4ea3c:	df000017 	ldw	fp,0(sp)
   4ea40:	dec00204 	addi	sp,sp,8
   4ea44:	f800283a 	ret

0004ea48 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4ea48:	defffa04 	addi	sp,sp,-24
   4ea4c:	dfc00515 	stw	ra,20(sp)
   4ea50:	df000415 	stw	fp,16(sp)
   4ea54:	df000404 	addi	fp,sp,16
   4ea58:	e13ffe15 	stw	r4,-8(fp)
   4ea5c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4ea60:	e0bffe17 	ldw	r2,-8(fp)
   4ea64:	10000326 	beq	r2,zero,4ea74 <alt_dev_llist_insert+0x2c>
   4ea68:	e0bffe17 	ldw	r2,-8(fp)
   4ea6c:	10800217 	ldw	r2,8(r2)
   4ea70:	1000051e 	bne	r2,zero,4ea88 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   4ea74:	004e9f80 	call	4e9f8 <alt_get_errno>
   4ea78:	00c00584 	movi	r3,22
   4ea7c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4ea80:	00bffa84 	movi	r2,-22
   4ea84:	00001306 	br	4ead4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4ea88:	e0bffe17 	ldw	r2,-8(fp)
   4ea8c:	e0ffff17 	ldw	r3,-4(fp)
   4ea90:	e0fffc15 	stw	r3,-16(fp)
   4ea94:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4ea98:	e0bffd17 	ldw	r2,-12(fp)
   4ea9c:	e0fffc17 	ldw	r3,-16(fp)
   4eaa0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4eaa4:	e0bffc17 	ldw	r2,-16(fp)
   4eaa8:	10c00017 	ldw	r3,0(r2)
   4eaac:	e0bffd17 	ldw	r2,-12(fp)
   4eab0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4eab4:	e0bffc17 	ldw	r2,-16(fp)
   4eab8:	10800017 	ldw	r2,0(r2)
   4eabc:	e0fffd17 	ldw	r3,-12(fp)
   4eac0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4eac4:	e0bffc17 	ldw	r2,-16(fp)
   4eac8:	e0fffd17 	ldw	r3,-12(fp)
   4eacc:	10c00015 	stw	r3,0(r2)

  return 0;  
   4ead0:	0005883a 	mov	r2,zero
}
   4ead4:	e037883a 	mov	sp,fp
   4ead8:	dfc00117 	ldw	ra,4(sp)
   4eadc:	df000017 	ldw	fp,0(sp)
   4eae0:	dec00204 	addi	sp,sp,8
   4eae4:	f800283a 	ret

0004eae8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4eae8:	defffd04 	addi	sp,sp,-12
   4eaec:	dfc00215 	stw	ra,8(sp)
   4eaf0:	df000115 	stw	fp,4(sp)
   4eaf4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4eaf8:	00800174 	movhi	r2,5
   4eafc:	10bef304 	addi	r2,r2,-1076
   4eb00:	e0bfff15 	stw	r2,-4(fp)
   4eb04:	00000606 	br	4eb20 <_do_ctors+0x38>
        (*ctor) (); 
   4eb08:	e0bfff17 	ldw	r2,-4(fp)
   4eb0c:	10800017 	ldw	r2,0(r2)
   4eb10:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4eb14:	e0bfff17 	ldw	r2,-4(fp)
   4eb18:	10bfff04 	addi	r2,r2,-4
   4eb1c:	e0bfff15 	stw	r2,-4(fp)
   4eb20:	e0ffff17 	ldw	r3,-4(fp)
   4eb24:	00800174 	movhi	r2,5
   4eb28:	10bef404 	addi	r2,r2,-1072
   4eb2c:	18bff62e 	bgeu	r3,r2,4eb08 <_do_ctors+0x20>
        (*ctor) (); 
}
   4eb30:	e037883a 	mov	sp,fp
   4eb34:	dfc00117 	ldw	ra,4(sp)
   4eb38:	df000017 	ldw	fp,0(sp)
   4eb3c:	dec00204 	addi	sp,sp,8
   4eb40:	f800283a 	ret

0004eb44 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4eb44:	defffd04 	addi	sp,sp,-12
   4eb48:	dfc00215 	stw	ra,8(sp)
   4eb4c:	df000115 	stw	fp,4(sp)
   4eb50:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4eb54:	00800174 	movhi	r2,5
   4eb58:	10bef304 	addi	r2,r2,-1076
   4eb5c:	e0bfff15 	stw	r2,-4(fp)
   4eb60:	00000606 	br	4eb7c <_do_dtors+0x38>
        (*dtor) (); 
   4eb64:	e0bfff17 	ldw	r2,-4(fp)
   4eb68:	10800017 	ldw	r2,0(r2)
   4eb6c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4eb70:	e0bfff17 	ldw	r2,-4(fp)
   4eb74:	10bfff04 	addi	r2,r2,-4
   4eb78:	e0bfff15 	stw	r2,-4(fp)
   4eb7c:	e0ffff17 	ldw	r3,-4(fp)
   4eb80:	00800174 	movhi	r2,5
   4eb84:	10bef404 	addi	r2,r2,-1072
   4eb88:	18bff62e 	bgeu	r3,r2,4eb64 <_do_dtors+0x20>
        (*dtor) (); 
}
   4eb8c:	e037883a 	mov	sp,fp
   4eb90:	dfc00117 	ldw	ra,4(sp)
   4eb94:	df000017 	ldw	fp,0(sp)
   4eb98:	dec00204 	addi	sp,sp,8
   4eb9c:	f800283a 	ret

0004eba0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4eba0:	defff904 	addi	sp,sp,-28
   4eba4:	dfc00615 	stw	ra,24(sp)
   4eba8:	df000515 	stw	fp,20(sp)
   4ebac:	df000504 	addi	fp,sp,20
   4ebb0:	e13ffc15 	stw	r4,-16(fp)
   4ebb4:	e17ffd15 	stw	r5,-12(fp)
   4ebb8:	e1bffe15 	stw	r6,-8(fp)
   4ebbc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4ebc0:	e0800217 	ldw	r2,8(fp)
   4ebc4:	d8800015 	stw	r2,0(sp)
   4ebc8:	e13ffc17 	ldw	r4,-16(fp)
   4ebcc:	e17ffd17 	ldw	r5,-12(fp)
   4ebd0:	e1bffe17 	ldw	r6,-8(fp)
   4ebd4:	e1ffff17 	ldw	r7,-4(fp)
   4ebd8:	004ed780 	call	4ed78 <alt_iic_isr_register>
}  
   4ebdc:	e037883a 	mov	sp,fp
   4ebe0:	dfc00117 	ldw	ra,4(sp)
   4ebe4:	df000017 	ldw	fp,0(sp)
   4ebe8:	dec00204 	addi	sp,sp,8
   4ebec:	f800283a 	ret

0004ebf0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4ebf0:	defff904 	addi	sp,sp,-28
   4ebf4:	df000615 	stw	fp,24(sp)
   4ebf8:	df000604 	addi	fp,sp,24
   4ebfc:	e13ffe15 	stw	r4,-8(fp)
   4ec00:	e17fff15 	stw	r5,-4(fp)
   4ec04:	e0bfff17 	ldw	r2,-4(fp)
   4ec08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ec0c:	0005303a 	rdctl	r2,status
   4ec10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ec14:	e0fffb17 	ldw	r3,-20(fp)
   4ec18:	00bfff84 	movi	r2,-2
   4ec1c:	1884703a 	and	r2,r3,r2
   4ec20:	1001703a 	wrctl	status,r2
  
  return context;
   4ec24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4ec28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4ec2c:	e0bffa17 	ldw	r2,-24(fp)
   4ec30:	00c00044 	movi	r3,1
   4ec34:	1884983a 	sll	r2,r3,r2
   4ec38:	1007883a 	mov	r3,r2
   4ec3c:	00800174 	movhi	r2,5
   4ec40:	10871b04 	addi	r2,r2,7276
   4ec44:	10800017 	ldw	r2,0(r2)
   4ec48:	1886b03a 	or	r3,r3,r2
   4ec4c:	00800174 	movhi	r2,5
   4ec50:	10871b04 	addi	r2,r2,7276
   4ec54:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4ec58:	00800174 	movhi	r2,5
   4ec5c:	10871b04 	addi	r2,r2,7276
   4ec60:	10800017 	ldw	r2,0(r2)
   4ec64:	100170fa 	wrctl	ienable,r2
   4ec68:	e0bffc17 	ldw	r2,-16(fp)
   4ec6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ec70:	e0bffd17 	ldw	r2,-12(fp)
   4ec74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4ec78:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4ec7c:	e037883a 	mov	sp,fp
   4ec80:	df000017 	ldw	fp,0(sp)
   4ec84:	dec00104 	addi	sp,sp,4
   4ec88:	f800283a 	ret

0004ec8c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4ec8c:	defff904 	addi	sp,sp,-28
   4ec90:	df000615 	stw	fp,24(sp)
   4ec94:	df000604 	addi	fp,sp,24
   4ec98:	e13ffe15 	stw	r4,-8(fp)
   4ec9c:	e17fff15 	stw	r5,-4(fp)
   4eca0:	e0bfff17 	ldw	r2,-4(fp)
   4eca4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4eca8:	0005303a 	rdctl	r2,status
   4ecac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ecb0:	e0fffb17 	ldw	r3,-20(fp)
   4ecb4:	00bfff84 	movi	r2,-2
   4ecb8:	1884703a 	and	r2,r3,r2
   4ecbc:	1001703a 	wrctl	status,r2
  
  return context;
   4ecc0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4ecc4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4ecc8:	e0bffa17 	ldw	r2,-24(fp)
   4eccc:	00c00044 	movi	r3,1
   4ecd0:	1884983a 	sll	r2,r3,r2
   4ecd4:	0084303a 	nor	r2,zero,r2
   4ecd8:	1007883a 	mov	r3,r2
   4ecdc:	00800174 	movhi	r2,5
   4ece0:	10871b04 	addi	r2,r2,7276
   4ece4:	10800017 	ldw	r2,0(r2)
   4ece8:	1886703a 	and	r3,r3,r2
   4ecec:	00800174 	movhi	r2,5
   4ecf0:	10871b04 	addi	r2,r2,7276
   4ecf4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4ecf8:	00800174 	movhi	r2,5
   4ecfc:	10871b04 	addi	r2,r2,7276
   4ed00:	10800017 	ldw	r2,0(r2)
   4ed04:	100170fa 	wrctl	ienable,r2
   4ed08:	e0bffc17 	ldw	r2,-16(fp)
   4ed0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ed10:	e0bffd17 	ldw	r2,-12(fp)
   4ed14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4ed18:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4ed1c:	e037883a 	mov	sp,fp
   4ed20:	df000017 	ldw	fp,0(sp)
   4ed24:	dec00104 	addi	sp,sp,4
   4ed28:	f800283a 	ret

0004ed2c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4ed2c:	defffc04 	addi	sp,sp,-16
   4ed30:	df000315 	stw	fp,12(sp)
   4ed34:	df000304 	addi	fp,sp,12
   4ed38:	e13ffe15 	stw	r4,-8(fp)
   4ed3c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4ed40:	000530fa 	rdctl	r2,ienable
   4ed44:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4ed48:	e0bfff17 	ldw	r2,-4(fp)
   4ed4c:	00c00044 	movi	r3,1
   4ed50:	1884983a 	sll	r2,r3,r2
   4ed54:	1007883a 	mov	r3,r2
   4ed58:	e0bffd17 	ldw	r2,-12(fp)
   4ed5c:	1884703a 	and	r2,r3,r2
   4ed60:	1004c03a 	cmpne	r2,r2,zero
   4ed64:	10803fcc 	andi	r2,r2,255
}
   4ed68:	e037883a 	mov	sp,fp
   4ed6c:	df000017 	ldw	fp,0(sp)
   4ed70:	dec00104 	addi	sp,sp,4
   4ed74:	f800283a 	ret

0004ed78 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4ed78:	defff504 	addi	sp,sp,-44
   4ed7c:	dfc00a15 	stw	ra,40(sp)
   4ed80:	df000915 	stw	fp,36(sp)
   4ed84:	df000904 	addi	fp,sp,36
   4ed88:	e13ffc15 	stw	r4,-16(fp)
   4ed8c:	e17ffd15 	stw	r5,-12(fp)
   4ed90:	e1bffe15 	stw	r6,-8(fp)
   4ed94:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4ed98:	00bffa84 	movi	r2,-22
   4ed9c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4eda0:	e0bffd17 	ldw	r2,-12(fp)
   4eda4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4eda8:	e0bff817 	ldw	r2,-32(fp)
   4edac:	10800808 	cmpgei	r2,r2,32
   4edb0:	1000271e 	bne	r2,zero,4ee50 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4edb4:	0005303a 	rdctl	r2,status
   4edb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4edbc:	e0fffa17 	ldw	r3,-24(fp)
   4edc0:	00bfff84 	movi	r2,-2
   4edc4:	1884703a 	and	r2,r3,r2
   4edc8:	1001703a 	wrctl	status,r2
  
  return context;
   4edcc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4edd0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4edd4:	00c00174 	movhi	r3,5
   4edd8:	18c72804 	addi	r3,r3,7328
   4eddc:	e0bff817 	ldw	r2,-32(fp)
   4ede0:	100490fa 	slli	r2,r2,3
   4ede4:	1885883a 	add	r2,r3,r2
   4ede8:	e0fffe17 	ldw	r3,-8(fp)
   4edec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4edf0:	00c00174 	movhi	r3,5
   4edf4:	18c72804 	addi	r3,r3,7328
   4edf8:	e0bff817 	ldw	r2,-32(fp)
   4edfc:	100490fa 	slli	r2,r2,3
   4ee00:	1885883a 	add	r2,r3,r2
   4ee04:	10800104 	addi	r2,r2,4
   4ee08:	e0ffff17 	ldw	r3,-4(fp)
   4ee0c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4ee10:	e0bffe17 	ldw	r2,-8(fp)
   4ee14:	10000526 	beq	r2,zero,4ee2c <alt_iic_isr_register+0xb4>
   4ee18:	e0bff817 	ldw	r2,-32(fp)
   4ee1c:	e13ffc17 	ldw	r4,-16(fp)
   4ee20:	100b883a 	mov	r5,r2
   4ee24:	004ebf00 	call	4ebf0 <alt_ic_irq_enable>
   4ee28:	00000406 	br	4ee3c <alt_iic_isr_register+0xc4>
   4ee2c:	e0bff817 	ldw	r2,-32(fp)
   4ee30:	e13ffc17 	ldw	r4,-16(fp)
   4ee34:	100b883a 	mov	r5,r2
   4ee38:	004ec8c0 	call	4ec8c <alt_ic_irq_disable>
   4ee3c:	e0bff715 	stw	r2,-36(fp)
   4ee40:	e0bff917 	ldw	r2,-28(fp)
   4ee44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ee48:	e0bffb17 	ldw	r2,-20(fp)
   4ee4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4ee50:	e0bff717 	ldw	r2,-36(fp)
}
   4ee54:	e037883a 	mov	sp,fp
   4ee58:	dfc00117 	ldw	ra,4(sp)
   4ee5c:	df000017 	ldw	fp,0(sp)
   4ee60:	dec00204 	addi	sp,sp,8
   4ee64:	f800283a 	ret

0004ee68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4ee68:	defff904 	addi	sp,sp,-28
   4ee6c:	dfc00615 	stw	ra,24(sp)
   4ee70:	df000515 	stw	fp,20(sp)
   4ee74:	df000504 	addi	fp,sp,20
   4ee78:	e13ffc15 	stw	r4,-16(fp)
   4ee7c:	e17ffd15 	stw	r5,-12(fp)
   4ee80:	e1bffe15 	stw	r6,-8(fp)
   4ee84:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4ee88:	e13ffd17 	ldw	r4,-12(fp)
   4ee8c:	e17ffe17 	ldw	r5,-8(fp)
   4ee90:	e1bfff17 	ldw	r6,-4(fp)
   4ee94:	004f0bc0 	call	4f0bc <open>
   4ee98:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4ee9c:	e0bffb17 	ldw	r2,-20(fp)
   4eea0:	10001c16 	blt	r2,zero,4ef14 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4eea4:	00c00174 	movhi	r3,5
   4eea8:	18c28704 	addi	r3,r3,2588
   4eeac:	e0bffb17 	ldw	r2,-20(fp)
   4eeb0:	10800324 	muli	r2,r2,12
   4eeb4:	1885883a 	add	r2,r3,r2
   4eeb8:	10c00017 	ldw	r3,0(r2)
   4eebc:	e0bffc17 	ldw	r2,-16(fp)
   4eec0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4eec4:	00c00174 	movhi	r3,5
   4eec8:	18c28704 	addi	r3,r3,2588
   4eecc:	e0bffb17 	ldw	r2,-20(fp)
   4eed0:	10800324 	muli	r2,r2,12
   4eed4:	1885883a 	add	r2,r3,r2
   4eed8:	10800104 	addi	r2,r2,4
   4eedc:	10c00017 	ldw	r3,0(r2)
   4eee0:	e0bffc17 	ldw	r2,-16(fp)
   4eee4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4eee8:	00c00174 	movhi	r3,5
   4eeec:	18c28704 	addi	r3,r3,2588
   4eef0:	e0bffb17 	ldw	r2,-20(fp)
   4eef4:	10800324 	muli	r2,r2,12
   4eef8:	1885883a 	add	r2,r3,r2
   4eefc:	10800204 	addi	r2,r2,8
   4ef00:	10c00017 	ldw	r3,0(r2)
   4ef04:	e0bffc17 	ldw	r2,-16(fp)
   4ef08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4ef0c:	e13ffb17 	ldw	r4,-20(fp)
   4ef10:	004d7c00 	call	4d7c0 <alt_release_fd>
  }
} 
   4ef14:	e037883a 	mov	sp,fp
   4ef18:	dfc00117 	ldw	ra,4(sp)
   4ef1c:	df000017 	ldw	fp,0(sp)
   4ef20:	dec00204 	addi	sp,sp,8
   4ef24:	f800283a 	ret

0004ef28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4ef28:	defffb04 	addi	sp,sp,-20
   4ef2c:	dfc00415 	stw	ra,16(sp)
   4ef30:	df000315 	stw	fp,12(sp)
   4ef34:	df000304 	addi	fp,sp,12
   4ef38:	e13ffd15 	stw	r4,-12(fp)
   4ef3c:	e17ffe15 	stw	r5,-8(fp)
   4ef40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4ef44:	01000174 	movhi	r4,5
   4ef48:	21028a04 	addi	r4,r4,2600
   4ef4c:	e17ffd17 	ldw	r5,-12(fp)
   4ef50:	01800044 	movi	r6,1
   4ef54:	01c07fc4 	movi	r7,511
   4ef58:	004ee680 	call	4ee68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4ef5c:	01000174 	movhi	r4,5
   4ef60:	21028704 	addi	r4,r4,2588
   4ef64:	e17ffe17 	ldw	r5,-8(fp)
   4ef68:	000d883a 	mov	r6,zero
   4ef6c:	01c07fc4 	movi	r7,511
   4ef70:	004ee680 	call	4ee68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4ef74:	01000174 	movhi	r4,5
   4ef78:	21028d04 	addi	r4,r4,2612
   4ef7c:	e17fff17 	ldw	r5,-4(fp)
   4ef80:	01800044 	movi	r6,1
   4ef84:	01c07fc4 	movi	r7,511
   4ef88:	004ee680 	call	4ee68 <alt_open_fd>
}  
   4ef8c:	e037883a 	mov	sp,fp
   4ef90:	dfc00117 	ldw	ra,4(sp)
   4ef94:	df000017 	ldw	fp,0(sp)
   4ef98:	dec00204 	addi	sp,sp,8
   4ef9c:	f800283a 	ret

0004efa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4efa0:	defffe04 	addi	sp,sp,-8
   4efa4:	dfc00115 	stw	ra,4(sp)
   4efa8:	df000015 	stw	fp,0(sp)
   4efac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4efb0:	00800174 	movhi	r2,5
   4efb4:	10870a04 	addi	r2,r2,7208
   4efb8:	10800017 	ldw	r2,0(r2)
   4efbc:	10000526 	beq	r2,zero,4efd4 <alt_get_errno+0x34>
   4efc0:	00800174 	movhi	r2,5
   4efc4:	10870a04 	addi	r2,r2,7208
   4efc8:	10800017 	ldw	r2,0(r2)
   4efcc:	103ee83a 	callr	r2
   4efd0:	00000206 	br	4efdc <alt_get_errno+0x3c>
   4efd4:	00800174 	movhi	r2,5
   4efd8:	10871504 	addi	r2,r2,7252
}
   4efdc:	e037883a 	mov	sp,fp
   4efe0:	dfc00117 	ldw	ra,4(sp)
   4efe4:	df000017 	ldw	fp,0(sp)
   4efe8:	dec00204 	addi	sp,sp,8
   4efec:	f800283a 	ret

0004eff0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4eff0:	defffd04 	addi	sp,sp,-12
   4eff4:	df000215 	stw	fp,8(sp)
   4eff8:	df000204 	addi	fp,sp,8
   4effc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4f000:	e0bfff17 	ldw	r2,-4(fp)
   4f004:	10800217 	ldw	r2,8(r2)
   4f008:	10d00034 	orhi	r3,r2,16384
   4f00c:	e0bfff17 	ldw	r2,-4(fp)
   4f010:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4f014:	e03ffe15 	stw	zero,-8(fp)
   4f018:	00001d06 	br	4f090 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4f01c:	00c00174 	movhi	r3,5
   4f020:	18c28704 	addi	r3,r3,2588
   4f024:	e0bffe17 	ldw	r2,-8(fp)
   4f028:	10800324 	muli	r2,r2,12
   4f02c:	1885883a 	add	r2,r3,r2
   4f030:	10c00017 	ldw	r3,0(r2)
   4f034:	e0bfff17 	ldw	r2,-4(fp)
   4f038:	10800017 	ldw	r2,0(r2)
   4f03c:	1880111e 	bne	r3,r2,4f084 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4f040:	00c00174 	movhi	r3,5
   4f044:	18c28704 	addi	r3,r3,2588
   4f048:	e0bffe17 	ldw	r2,-8(fp)
   4f04c:	10800324 	muli	r2,r2,12
   4f050:	1885883a 	add	r2,r3,r2
   4f054:	10800204 	addi	r2,r2,8
   4f058:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4f05c:	1000090e 	bge	r2,zero,4f084 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4f060:	e0bffe17 	ldw	r2,-8(fp)
   4f064:	10c00324 	muli	r3,r2,12
   4f068:	00800174 	movhi	r2,5
   4f06c:	10828704 	addi	r2,r2,2588
   4f070:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4f074:	e0bfff17 	ldw	r2,-4(fp)
   4f078:	18800226 	beq	r3,r2,4f084 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4f07c:	00bffcc4 	movi	r2,-13
   4f080:	00000a06 	br	4f0ac <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4f084:	e0bffe17 	ldw	r2,-8(fp)
   4f088:	10800044 	addi	r2,r2,1
   4f08c:	e0bffe15 	stw	r2,-8(fp)
   4f090:	00800174 	movhi	r2,5
   4f094:	10870904 	addi	r2,r2,7204
   4f098:	10800017 	ldw	r2,0(r2)
   4f09c:	1007883a 	mov	r3,r2
   4f0a0:	e0bffe17 	ldw	r2,-8(fp)
   4f0a4:	18bfdd2e 	bgeu	r3,r2,4f01c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4f0a8:	0005883a 	mov	r2,zero
}
   4f0ac:	e037883a 	mov	sp,fp
   4f0b0:	df000017 	ldw	fp,0(sp)
   4f0b4:	dec00104 	addi	sp,sp,4
   4f0b8:	f800283a 	ret

0004f0bc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4f0bc:	defff604 	addi	sp,sp,-40
   4f0c0:	dfc00915 	stw	ra,36(sp)
   4f0c4:	df000815 	stw	fp,32(sp)
   4f0c8:	df000804 	addi	fp,sp,32
   4f0cc:	e13ffd15 	stw	r4,-12(fp)
   4f0d0:	e17ffe15 	stw	r5,-8(fp)
   4f0d4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4f0d8:	00bfffc4 	movi	r2,-1
   4f0dc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4f0e0:	00bffb44 	movi	r2,-19
   4f0e4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4f0e8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4f0ec:	e13ffd17 	ldw	r4,-12(fp)
   4f0f0:	01400174 	movhi	r5,5
   4f0f4:	29470704 	addi	r5,r5,7196
   4f0f8:	004f54c0 	call	4f54c <alt_find_dev>
   4f0fc:	e0bff815 	stw	r2,-32(fp)
   4f100:	e0bff817 	ldw	r2,-32(fp)
   4f104:	1000051e 	bne	r2,zero,4f11c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4f108:	e13ffd17 	ldw	r4,-12(fp)
   4f10c:	004f5dc0 	call	4f5dc <alt_find_file>
   4f110:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4f114:	00800044 	movi	r2,1
   4f118:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4f11c:	e0bff817 	ldw	r2,-32(fp)
   4f120:	10002926 	beq	r2,zero,4f1c8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4f124:	e13ff817 	ldw	r4,-32(fp)
   4f128:	004f6f00 	call	4f6f0 <alt_get_fd>
   4f12c:	e0bff915 	stw	r2,-28(fp)
   4f130:	e0bff917 	ldw	r2,-28(fp)
   4f134:	1000030e 	bge	r2,zero,4f144 <open+0x88>
    {
      status = index;
   4f138:	e0bff917 	ldw	r2,-28(fp)
   4f13c:	e0bffa15 	stw	r2,-24(fp)
   4f140:	00002306 	br	4f1d0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   4f144:	e0bff917 	ldw	r2,-28(fp)
   4f148:	10c00324 	muli	r3,r2,12
   4f14c:	00800174 	movhi	r2,5
   4f150:	10828704 	addi	r2,r2,2588
   4f154:	1885883a 	add	r2,r3,r2
   4f158:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4f15c:	e0fffe17 	ldw	r3,-8(fp)
   4f160:	00900034 	movhi	r2,16384
   4f164:	10bfffc4 	addi	r2,r2,-1
   4f168:	1886703a 	and	r3,r3,r2
   4f16c:	e0bffc17 	ldw	r2,-16(fp)
   4f170:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4f174:	e0bffb17 	ldw	r2,-20(fp)
   4f178:	1000051e 	bne	r2,zero,4f190 <open+0xd4>
   4f17c:	e13ffc17 	ldw	r4,-16(fp)
   4f180:	004eff00 	call	4eff0 <alt_file_locked>
   4f184:	e0bffa15 	stw	r2,-24(fp)
   4f188:	e0bffa17 	ldw	r2,-24(fp)
   4f18c:	10001016 	blt	r2,zero,4f1d0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4f190:	e0bff817 	ldw	r2,-32(fp)
   4f194:	10800317 	ldw	r2,12(r2)
   4f198:	10000826 	beq	r2,zero,4f1bc <open+0x100>
   4f19c:	e0bff817 	ldw	r2,-32(fp)
   4f1a0:	10800317 	ldw	r2,12(r2)
   4f1a4:	e13ffc17 	ldw	r4,-16(fp)
   4f1a8:	e17ffd17 	ldw	r5,-12(fp)
   4f1ac:	e1bffe17 	ldw	r6,-8(fp)
   4f1b0:	e1ffff17 	ldw	r7,-4(fp)
   4f1b4:	103ee83a 	callr	r2
   4f1b8:	00000106 	br	4f1c0 <open+0x104>
   4f1bc:	0005883a 	mov	r2,zero
   4f1c0:	e0bffa15 	stw	r2,-24(fp)
   4f1c4:	00000206 	br	4f1d0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4f1c8:	00bffb44 	movi	r2,-19
   4f1cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4f1d0:	e0bffa17 	ldw	r2,-24(fp)
   4f1d4:	1000080e 	bge	r2,zero,4f1f8 <open+0x13c>
  {
    alt_release_fd (index);  
   4f1d8:	e13ff917 	ldw	r4,-28(fp)
   4f1dc:	004d7c00 	call	4d7c0 <alt_release_fd>
    ALT_ERRNO = -status;
   4f1e0:	004efa00 	call	4efa0 <alt_get_errno>
   4f1e4:	e0fffa17 	ldw	r3,-24(fp)
   4f1e8:	00c7c83a 	sub	r3,zero,r3
   4f1ec:	10c00015 	stw	r3,0(r2)
    return -1;
   4f1f0:	00bfffc4 	movi	r2,-1
   4f1f4:	00000106 	br	4f1fc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4f1f8:	e0bff917 	ldw	r2,-28(fp)
}
   4f1fc:	e037883a 	mov	sp,fp
   4f200:	dfc00117 	ldw	ra,4(sp)
   4f204:	df000017 	ldw	fp,0(sp)
   4f208:	dec00204 	addi	sp,sp,8
   4f20c:	f800283a 	ret

0004f210 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4f210:	defffa04 	addi	sp,sp,-24
   4f214:	df000515 	stw	fp,20(sp)
   4f218:	df000504 	addi	fp,sp,20
   4f21c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f220:	0005303a 	rdctl	r2,status
   4f224:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f228:	e0fffc17 	ldw	r3,-16(fp)
   4f22c:	00bfff84 	movi	r2,-2
   4f230:	1884703a 	and	r2,r3,r2
   4f234:	1001703a 	wrctl	status,r2
  
  return context;
   4f238:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4f23c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4f240:	e0bfff17 	ldw	r2,-4(fp)
   4f244:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4f248:	e0bffd17 	ldw	r2,-12(fp)
   4f24c:	10800017 	ldw	r2,0(r2)
   4f250:	e0fffd17 	ldw	r3,-12(fp)
   4f254:	18c00117 	ldw	r3,4(r3)
   4f258:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4f25c:	e0bffd17 	ldw	r2,-12(fp)
   4f260:	10800117 	ldw	r2,4(r2)
   4f264:	e0fffd17 	ldw	r3,-12(fp)
   4f268:	18c00017 	ldw	r3,0(r3)
   4f26c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4f270:	e0bffd17 	ldw	r2,-12(fp)
   4f274:	e0fffd17 	ldw	r3,-12(fp)
   4f278:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4f27c:	e0bffd17 	ldw	r2,-12(fp)
   4f280:	e0fffd17 	ldw	r3,-12(fp)
   4f284:	10c00015 	stw	r3,0(r2)
   4f288:	e0bffb17 	ldw	r2,-20(fp)
   4f28c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f290:	e0bffe17 	ldw	r2,-8(fp)
   4f294:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4f298:	e037883a 	mov	sp,fp
   4f29c:	df000017 	ldw	fp,0(sp)
   4f2a0:	dec00104 	addi	sp,sp,4
   4f2a4:	f800283a 	ret

0004f2a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4f2a8:	defffb04 	addi	sp,sp,-20
   4f2ac:	dfc00415 	stw	ra,16(sp)
   4f2b0:	df000315 	stw	fp,12(sp)
   4f2b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4f2b8:	d0a00e17 	ldw	r2,-32712(gp)
   4f2bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4f2c0:	d0a01e17 	ldw	r2,-32648(gp)
   4f2c4:	10800044 	addi	r2,r2,1
   4f2c8:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f2cc:	00002e06 	br	4f388 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4f2d0:	e0bffd17 	ldw	r2,-12(fp)
   4f2d4:	10800017 	ldw	r2,0(r2)
   4f2d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4f2dc:	e0bffd17 	ldw	r2,-12(fp)
   4f2e0:	10800403 	ldbu	r2,16(r2)
   4f2e4:	10803fcc 	andi	r2,r2,255
   4f2e8:	10000426 	beq	r2,zero,4f2fc <alt_tick+0x54>
   4f2ec:	d0a01e17 	ldw	r2,-32648(gp)
   4f2f0:	1000021e 	bne	r2,zero,4f2fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4f2f4:	e0bffd17 	ldw	r2,-12(fp)
   4f2f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4f2fc:	e0bffd17 	ldw	r2,-12(fp)
   4f300:	10800217 	ldw	r2,8(r2)
   4f304:	d0e01e17 	ldw	r3,-32648(gp)
   4f308:	18801d36 	bltu	r3,r2,4f380 <alt_tick+0xd8>
   4f30c:	e0bffd17 	ldw	r2,-12(fp)
   4f310:	10800403 	ldbu	r2,16(r2)
   4f314:	10803fcc 	andi	r2,r2,255
   4f318:	1000191e 	bne	r2,zero,4f380 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4f31c:	e0bffd17 	ldw	r2,-12(fp)
   4f320:	10800317 	ldw	r2,12(r2)
   4f324:	e0fffd17 	ldw	r3,-12(fp)
   4f328:	18c00517 	ldw	r3,20(r3)
   4f32c:	1809883a 	mov	r4,r3
   4f330:	103ee83a 	callr	r2
   4f334:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4f338:	e0bfff17 	ldw	r2,-4(fp)
   4f33c:	1000031e 	bne	r2,zero,4f34c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4f340:	e13ffd17 	ldw	r4,-12(fp)
   4f344:	004f2100 	call	4f210 <alt_alarm_stop>
   4f348:	00000d06 	br	4f380 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4f34c:	e0bffd17 	ldw	r2,-12(fp)
   4f350:	10c00217 	ldw	r3,8(r2)
   4f354:	e0bfff17 	ldw	r2,-4(fp)
   4f358:	1887883a 	add	r3,r3,r2
   4f35c:	e0bffd17 	ldw	r2,-12(fp)
   4f360:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4f364:	e0bffd17 	ldw	r2,-12(fp)
   4f368:	10c00217 	ldw	r3,8(r2)
   4f36c:	d0a01e17 	ldw	r2,-32648(gp)
   4f370:	1880032e 	bgeu	r3,r2,4f380 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4f374:	e0bffd17 	ldw	r2,-12(fp)
   4f378:	00c00044 	movi	r3,1
   4f37c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4f380:	e0bffe17 	ldw	r2,-8(fp)
   4f384:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4f388:	e0fffd17 	ldw	r3,-12(fp)
   4f38c:	d0a00e04 	addi	r2,gp,-32712
   4f390:	18bfcf1e 	bne	r3,r2,4f2d0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4f394:	0001883a 	nop
}
   4f398:	e037883a 	mov	sp,fp
   4f39c:	dfc00117 	ldw	ra,4(sp)
   4f3a0:	df000017 	ldw	fp,0(sp)
   4f3a4:	dec00204 	addi	sp,sp,8
   4f3a8:	f800283a 	ret

0004f3ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4f3ac:	deffff04 	addi	sp,sp,-4
   4f3b0:	df000015 	stw	fp,0(sp)
   4f3b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4f3b8:	000170fa 	wrctl	ienable,zero
}
   4f3bc:	e037883a 	mov	sp,fp
   4f3c0:	df000017 	ldw	fp,0(sp)
   4f3c4:	dec00104 	addi	sp,sp,4
   4f3c8:	f800283a 	ret

0004f3cc <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   4f3cc:	defff904 	addi	sp,sp,-28
   4f3d0:	df000615 	stw	fp,24(sp)
   4f3d4:	df000604 	addi	fp,sp,24
   4f3d8:	e13ffe15 	stw	r4,-8(fp)
   4f3dc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   4f3e0:	e03ffa15 	stw	zero,-24(fp)
   4f3e4:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   4f3e8:	000b883a 	mov	r5,zero
   4f3ec:	e13ffe17 	ldw	r4,-8(fp)
   4f3f0:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
   4f3f4:	e13fff17 	ldw	r4,-4(fp)
   4f3f8:	2008913a 	slli	r4,r4,4
   4f3fc:	e17ffe17 	ldw	r5,-8(fp)
   4f400:	2909883a 	add	r4,r5,r4
   4f404:	21000037 	ldwio	r4,0(r4)
   4f408:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   4f40c:	e13fff17 	ldw	r4,-4(fp)
   4f410:	2008913a 	slli	r4,r4,4
   4f414:	21000104 	addi	r4,r4,4
   4f418:	e17ffe17 	ldw	r5,-8(fp)
   4f41c:	2909883a 	add	r4,r5,r4
   4f420:	21000037 	ldwio	r4,0(r4)
   4f424:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   4f428:	e13ffd17 	ldw	r4,-12(fp)
   4f42c:	2011883a 	mov	r8,r4
   4f430:	0013883a 	mov	r9,zero
   4f434:	400e983a 	sll	r7,r8,zero
   4f438:	000d883a 	mov	r6,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
   4f43c:	e13ffc17 	ldw	r4,-16(fp)
   4f440:	2005883a 	mov	r2,r4
   4f444:	0007883a 	mov	r3,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   4f448:	3088b03a 	or	r4,r6,r2
   4f44c:	e13ffa15 	stw	r4,-24(fp)
   4f450:	38c4b03a 	or	r2,r7,r3
   4f454:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   4f458:	e17ffa17 	ldw	r5,-24(fp)
   4f45c:	e1bffb17 	ldw	r6,-20(fp)
   4f460:	2807883a 	mov	r3,r5
   4f464:	3009883a 	mov	r4,r6
}
   4f468:	1805883a 	mov	r2,r3
   4f46c:	2007883a 	mov	r3,r4
   4f470:	e037883a 	mov	sp,fp
   4f474:	df000017 	ldw	fp,0(sp)
   4f478:	dec00104 	addi	sp,sp,4
   4f47c:	f800283a 	ret

0004f480 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   4f480:	defffd04 	addi	sp,sp,-12
   4f484:	dfc00215 	stw	ra,8(sp)
   4f488:	df000115 	stw	fp,4(sp)
   4f48c:	df000104 	addi	fp,sp,4
   4f490:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   4f494:	e13fff17 	ldw	r4,-4(fp)
   4f498:	000b883a 	mov	r5,zero
   4f49c:	004f3cc0 	call	4f3cc <perf_get_section_time>
   4f4a0:	100b883a 	mov	r5,r2
   4f4a4:	180d883a 	mov	r6,r3
   4f4a8:	2807883a 	mov	r3,r5
   4f4ac:	3009883a 	mov	r4,r6
}
   4f4b0:	1805883a 	mov	r2,r3
   4f4b4:	2007883a 	mov	r3,r4
   4f4b8:	e037883a 	mov	sp,fp
   4f4bc:	dfc00117 	ldw	ra,4(sp)
   4f4c0:	df000017 	ldw	fp,0(sp)
   4f4c4:	dec00204 	addi	sp,sp,8
   4f4c8:	f800283a 	ret

0004f4cc <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   4f4cc:	defffd04 	addi	sp,sp,-12
   4f4d0:	df000215 	stw	fp,8(sp)
   4f4d4:	df000204 	addi	fp,sp,8
   4f4d8:	e13ffe15 	stw	r4,-8(fp)
   4f4dc:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   4f4e0:	e0bfff17 	ldw	r2,-4(fp)
   4f4e4:	1004913a 	slli	r2,r2,4
   4f4e8:	10800204 	addi	r2,r2,8
   4f4ec:	e0fffe17 	ldw	r3,-8(fp)
   4f4f0:	1885883a 	add	r2,r3,r2
   4f4f4:	10800037 	ldwio	r2,0(r2)
}
   4f4f8:	e037883a 	mov	sp,fp
   4f4fc:	df000017 	ldw	fp,0(sp)
   4f500:	dec00104 	addi	sp,sp,4
   4f504:	f800283a 	ret

0004f508 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   4f508:	deffff04 	addi	sp,sp,-4
   4f50c:	df000015 	stw	fp,0(sp)
   4f510:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
   4f514:	0005883a 	mov	r2,zero
#endif
}
   4f518:	e037883a 	mov	sp,fp
   4f51c:	df000017 	ldw	fp,0(sp)
   4f520:	dec00104 	addi	sp,sp,4
   4f524:	f800283a 	ret

0004f528 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   4f528:	deffff04 	addi	sp,sp,-4
   4f52c:	df000015 	stw	fp,0(sp)
   4f530:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   4f534:	00805f74 	movhi	r2,381
   4f538:	109e1004 	addi	r2,r2,30784
}
   4f53c:	e037883a 	mov	sp,fp
   4f540:	df000017 	ldw	fp,0(sp)
   4f544:	dec00104 	addi	sp,sp,4
   4f548:	f800283a 	ret

0004f54c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4f54c:	defffa04 	addi	sp,sp,-24
   4f550:	dfc00515 	stw	ra,20(sp)
   4f554:	df000415 	stw	fp,16(sp)
   4f558:	df000404 	addi	fp,sp,16
   4f55c:	e13ffe15 	stw	r4,-8(fp)
   4f560:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4f564:	e0bfff17 	ldw	r2,-4(fp)
   4f568:	10800017 	ldw	r2,0(r2)
   4f56c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4f570:	e13ffe17 	ldw	r4,-8(fp)
   4f574:	00433980 	call	43398 <strlen>
   4f578:	10800044 	addi	r2,r2,1
   4f57c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f580:	00000d06 	br	4f5b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4f584:	e0bffc17 	ldw	r2,-16(fp)
   4f588:	10c00217 	ldw	r3,8(r2)
   4f58c:	e0bffd17 	ldw	r2,-12(fp)
   4f590:	1809883a 	mov	r4,r3
   4f594:	e17ffe17 	ldw	r5,-8(fp)
   4f598:	100d883a 	mov	r6,r2
   4f59c:	004f7f00 	call	4f7f0 <memcmp>
   4f5a0:	1000021e 	bne	r2,zero,4f5ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4f5a4:	e0bffc17 	ldw	r2,-16(fp)
   4f5a8:	00000706 	br	4f5c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4f5ac:	e0bffc17 	ldw	r2,-16(fp)
   4f5b0:	10800017 	ldw	r2,0(r2)
   4f5b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4f5b8:	e0fffc17 	ldw	r3,-16(fp)
   4f5bc:	e0bfff17 	ldw	r2,-4(fp)
   4f5c0:	18bff01e 	bne	r3,r2,4f584 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4f5c4:	0005883a 	mov	r2,zero
}
   4f5c8:	e037883a 	mov	sp,fp
   4f5cc:	dfc00117 	ldw	ra,4(sp)
   4f5d0:	df000017 	ldw	fp,0(sp)
   4f5d4:	dec00204 	addi	sp,sp,8
   4f5d8:	f800283a 	ret

0004f5dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4f5dc:	defffb04 	addi	sp,sp,-20
   4f5e0:	dfc00415 	stw	ra,16(sp)
   4f5e4:	df000315 	stw	fp,12(sp)
   4f5e8:	df000304 	addi	fp,sp,12
   4f5ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4f5f0:	00800174 	movhi	r2,5
   4f5f4:	10870504 	addi	r2,r2,7188
   4f5f8:	10800017 	ldw	r2,0(r2)
   4f5fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f600:	00003106 	br	4f6c8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4f604:	e0bffd17 	ldw	r2,-12(fp)
   4f608:	10800217 	ldw	r2,8(r2)
   4f60c:	1009883a 	mov	r4,r2
   4f610:	00433980 	call	43398 <strlen>
   4f614:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4f618:	e0bffd17 	ldw	r2,-12(fp)
   4f61c:	10c00217 	ldw	r3,8(r2)
   4f620:	e0bffe17 	ldw	r2,-8(fp)
   4f624:	10bfffc4 	addi	r2,r2,-1
   4f628:	1885883a 	add	r2,r3,r2
   4f62c:	10800003 	ldbu	r2,0(r2)
   4f630:	10803fcc 	andi	r2,r2,255
   4f634:	1080201c 	xori	r2,r2,128
   4f638:	10bfe004 	addi	r2,r2,-128
   4f63c:	10800bd8 	cmpnei	r2,r2,47
   4f640:	1000031e 	bne	r2,zero,4f650 <alt_find_file+0x74>
    {
      len -= 1;
   4f644:	e0bffe17 	ldw	r2,-8(fp)
   4f648:	10bfffc4 	addi	r2,r2,-1
   4f64c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4f650:	e0bffe17 	ldw	r2,-8(fp)
   4f654:	e0ffff17 	ldw	r3,-4(fp)
   4f658:	1885883a 	add	r2,r3,r2
   4f65c:	10800003 	ldbu	r2,0(r2)
   4f660:	10803fcc 	andi	r2,r2,255
   4f664:	1080201c 	xori	r2,r2,128
   4f668:	10bfe004 	addi	r2,r2,-128
   4f66c:	10800be0 	cmpeqi	r2,r2,47
   4f670:	1000081e 	bne	r2,zero,4f694 <alt_find_file+0xb8>
   4f674:	e0bffe17 	ldw	r2,-8(fp)
   4f678:	e0ffff17 	ldw	r3,-4(fp)
   4f67c:	1885883a 	add	r2,r3,r2
   4f680:	10800003 	ldbu	r2,0(r2)
   4f684:	10803fcc 	andi	r2,r2,255
   4f688:	1080201c 	xori	r2,r2,128
   4f68c:	10bfe004 	addi	r2,r2,-128
   4f690:	10000a1e 	bne	r2,zero,4f6bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4f694:	e0bffd17 	ldw	r2,-12(fp)
   4f698:	10c00217 	ldw	r3,8(r2)
   4f69c:	e0bffe17 	ldw	r2,-8(fp)
   4f6a0:	1809883a 	mov	r4,r3
   4f6a4:	e17fff17 	ldw	r5,-4(fp)
   4f6a8:	100d883a 	mov	r6,r2
   4f6ac:	004f7f00 	call	4f7f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4f6b0:	1000021e 	bne	r2,zero,4f6bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4f6b4:	e0bffd17 	ldw	r2,-12(fp)
   4f6b8:	00000806 	br	4f6dc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4f6bc:	e0bffd17 	ldw	r2,-12(fp)
   4f6c0:	10800017 	ldw	r2,0(r2)
   4f6c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4f6c8:	e0fffd17 	ldw	r3,-12(fp)
   4f6cc:	00800174 	movhi	r2,5
   4f6d0:	10870504 	addi	r2,r2,7188
   4f6d4:	18bfcb1e 	bne	r3,r2,4f604 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4f6d8:	0005883a 	mov	r2,zero
}
   4f6dc:	e037883a 	mov	sp,fp
   4f6e0:	dfc00117 	ldw	ra,4(sp)
   4f6e4:	df000017 	ldw	fp,0(sp)
   4f6e8:	dec00204 	addi	sp,sp,8
   4f6ec:	f800283a 	ret

0004f6f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4f6f0:	defffc04 	addi	sp,sp,-16
   4f6f4:	df000315 	stw	fp,12(sp)
   4f6f8:	df000304 	addi	fp,sp,12
   4f6fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4f700:	00bffa04 	movi	r2,-24
   4f704:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f708:	e03ffd15 	stw	zero,-12(fp)
   4f70c:	00001d06 	br	4f784 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   4f710:	00c00174 	movhi	r3,5
   4f714:	18c28704 	addi	r3,r3,2588
   4f718:	e0bffd17 	ldw	r2,-12(fp)
   4f71c:	10800324 	muli	r2,r2,12
   4f720:	1885883a 	add	r2,r3,r2
   4f724:	10800017 	ldw	r2,0(r2)
   4f728:	1000131e 	bne	r2,zero,4f778 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   4f72c:	00c00174 	movhi	r3,5
   4f730:	18c28704 	addi	r3,r3,2588
   4f734:	e0bffd17 	ldw	r2,-12(fp)
   4f738:	10800324 	muli	r2,r2,12
   4f73c:	1885883a 	add	r2,r3,r2
   4f740:	e0ffff17 	ldw	r3,-4(fp)
   4f744:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4f748:	00800174 	movhi	r2,5
   4f74c:	10870904 	addi	r2,r2,7204
   4f750:	10c00017 	ldw	r3,0(r2)
   4f754:	e0bffd17 	ldw	r2,-12(fp)
   4f758:	1880040e 	bge	r3,r2,4f76c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   4f75c:	00800174 	movhi	r2,5
   4f760:	10870904 	addi	r2,r2,7204
   4f764:	e0fffd17 	ldw	r3,-12(fp)
   4f768:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4f76c:	e0bffd17 	ldw	r2,-12(fp)
   4f770:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4f774:	00000606 	br	4f790 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4f778:	e0bffd17 	ldw	r2,-12(fp)
   4f77c:	10800044 	addi	r2,r2,1
   4f780:	e0bffd15 	stw	r2,-12(fp)
   4f784:	e0bffd17 	ldw	r2,-12(fp)
   4f788:	10800810 	cmplti	r2,r2,32
   4f78c:	103fe01e 	bne	r2,zero,4f710 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4f790:	e0bffe17 	ldw	r2,-8(fp)
}
   4f794:	e037883a 	mov	sp,fp
   4f798:	df000017 	ldw	fp,0(sp)
   4f79c:	dec00104 	addi	sp,sp,4
   4f7a0:	f800283a 	ret

0004f7a4 <atexit>:
   4f7a4:	200b883a 	mov	r5,r4
   4f7a8:	000d883a 	mov	r6,zero
   4f7ac:	0009883a 	mov	r4,zero
   4f7b0:	000f883a 	mov	r7,zero
   4f7b4:	004f86c1 	jmpi	4f86c <__register_exitproc>

0004f7b8 <exit>:
   4f7b8:	defffe04 	addi	sp,sp,-8
   4f7bc:	000b883a 	mov	r5,zero
   4f7c0:	dc000015 	stw	r16,0(sp)
   4f7c4:	dfc00115 	stw	ra,4(sp)
   4f7c8:	2021883a 	mov	r16,r4
   4f7cc:	004f9880 	call	4f988 <__call_exitprocs>
   4f7d0:	00800174 	movhi	r2,5
   4f7d4:	1086ff04 	addi	r2,r2,7164
   4f7d8:	11000017 	ldw	r4,0(r2)
   4f7dc:	20800f17 	ldw	r2,60(r4)
   4f7e0:	10000126 	beq	r2,zero,4f7e8 <exit+0x30>
   4f7e4:	103ee83a 	callr	r2
   4f7e8:	8009883a 	mov	r4,r16
   4f7ec:	004fb9c0 	call	4fb9c <_exit>

0004f7f0 <memcmp>:
   4f7f0:	01c000c4 	movi	r7,3
   4f7f4:	3980192e 	bgeu	r7,r6,4f85c <memcmp+0x6c>
   4f7f8:	2144b03a 	or	r2,r4,r5
   4f7fc:	11c4703a 	and	r2,r2,r7
   4f800:	10000f26 	beq	r2,zero,4f840 <memcmp+0x50>
   4f804:	21c00003 	ldbu	r7,0(r4)
   4f808:	28800003 	ldbu	r2,0(r5)
   4f80c:	3880151e 	bne	r7,r2,4f864 <memcmp+0x74>
   4f810:	30ffff84 	addi	r3,r6,-2
   4f814:	01bfffc4 	movi	r6,-1
   4f818:	00000406 	br	4f82c <memcmp+0x3c>
   4f81c:	21c00003 	ldbu	r7,0(r4)
   4f820:	28800003 	ldbu	r2,0(r5)
   4f824:	18ffffc4 	addi	r3,r3,-1
   4f828:	38800e1e 	bne	r7,r2,4f864 <memcmp+0x74>
   4f82c:	21000044 	addi	r4,r4,1
   4f830:	29400044 	addi	r5,r5,1
   4f834:	19bff91e 	bne	r3,r6,4f81c <memcmp+0x2c>
   4f838:	0005883a 	mov	r2,zero
   4f83c:	f800283a 	ret
   4f840:	20c00017 	ldw	r3,0(r4)
   4f844:	28800017 	ldw	r2,0(r5)
   4f848:	1880041e 	bne	r3,r2,4f85c <memcmp+0x6c>
   4f84c:	31bfff04 	addi	r6,r6,-4
   4f850:	21000104 	addi	r4,r4,4
   4f854:	29400104 	addi	r5,r5,4
   4f858:	39bff936 	bltu	r7,r6,4f840 <memcmp+0x50>
   4f85c:	303fe91e 	bne	r6,zero,4f804 <memcmp+0x14>
   4f860:	003ff506 	br	4f838 <memcmp+0x48>
   4f864:	3885c83a 	sub	r2,r7,r2
   4f868:	f800283a 	ret

0004f86c <__register_exitproc>:
   4f86c:	defffa04 	addi	sp,sp,-24
   4f870:	00800174 	movhi	r2,5
   4f874:	1086ff04 	addi	r2,r2,7164
   4f878:	dc000315 	stw	r16,12(sp)
   4f87c:	14000017 	ldw	r16,0(r2)
   4f880:	dc400415 	stw	r17,16(sp)
   4f884:	dfc00515 	stw	ra,20(sp)
   4f888:	80805217 	ldw	r2,328(r16)
   4f88c:	2023883a 	mov	r17,r4
   4f890:	10003a26 	beq	r2,zero,4f97c <__register_exitproc+0x110>
   4f894:	10c00117 	ldw	r3,4(r2)
   4f898:	020007c4 	movi	r8,31
   4f89c:	40c0190e 	bge	r8,r3,4f904 <__register_exitproc+0x98>
   4f8a0:	00800034 	movhi	r2,0
   4f8a4:	10800004 	addi	r2,r2,0
   4f8a8:	1000061e 	bne	r2,zero,4f8c4 <__register_exitproc+0x58>
   4f8ac:	00bfffc4 	movi	r2,-1
   4f8b0:	dfc00517 	ldw	ra,20(sp)
   4f8b4:	dc400417 	ldw	r17,16(sp)
   4f8b8:	dc000317 	ldw	r16,12(sp)
   4f8bc:	dec00604 	addi	sp,sp,24
   4f8c0:	f800283a 	ret
   4f8c4:	01006404 	movi	r4,400
   4f8c8:	d9400015 	stw	r5,0(sp)
   4f8cc:	d9800115 	stw	r6,4(sp)
   4f8d0:	d9c00215 	stw	r7,8(sp)
   4f8d4:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   4f8d8:	d9400017 	ldw	r5,0(sp)
   4f8dc:	d9800117 	ldw	r6,4(sp)
   4f8e0:	d9c00217 	ldw	r7,8(sp)
   4f8e4:	103ff126 	beq	r2,zero,4f8ac <__register_exitproc+0x40>
   4f8e8:	81005217 	ldw	r4,328(r16)
   4f8ec:	10000115 	stw	zero,4(r2)
   4f8f0:	0007883a 	mov	r3,zero
   4f8f4:	11000015 	stw	r4,0(r2)
   4f8f8:	80805215 	stw	r2,328(r16)
   4f8fc:	10006215 	stw	zero,392(r2)
   4f900:	10006315 	stw	zero,396(r2)
   4f904:	88000d1e 	bne	r17,zero,4f93c <__register_exitproc+0xd0>
   4f908:	19000084 	addi	r4,r3,2
   4f90c:	2109883a 	add	r4,r4,r4
   4f910:	18c00044 	addi	r3,r3,1
   4f914:	2109883a 	add	r4,r4,r4
   4f918:	10c00115 	stw	r3,4(r2)
   4f91c:	1105883a 	add	r2,r2,r4
   4f920:	11400015 	stw	r5,0(r2)
   4f924:	0005883a 	mov	r2,zero
   4f928:	dfc00517 	ldw	ra,20(sp)
   4f92c:	dc400417 	ldw	r17,16(sp)
   4f930:	dc000317 	ldw	r16,12(sp)
   4f934:	dec00604 	addi	sp,sp,24
   4f938:	f800283a 	ret
   4f93c:	18c9883a 	add	r4,r3,r3
   4f940:	2109883a 	add	r4,r4,r4
   4f944:	1109883a 	add	r4,r2,r4
   4f948:	21802215 	stw	r6,136(r4)
   4f94c:	01800044 	movi	r6,1
   4f950:	12006217 	ldw	r8,392(r2)
   4f954:	30cc983a 	sll	r6,r6,r3
   4f958:	4190b03a 	or	r8,r8,r6
   4f95c:	12006215 	stw	r8,392(r2)
   4f960:	21c04215 	stw	r7,264(r4)
   4f964:	01000084 	movi	r4,2
   4f968:	893fe71e 	bne	r17,r4,4f908 <__register_exitproc+0x9c>
   4f96c:	11006317 	ldw	r4,396(r2)
   4f970:	218cb03a 	or	r6,r4,r6
   4f974:	11806315 	stw	r6,396(r2)
   4f978:	003fe306 	br	4f908 <__register_exitproc+0x9c>
   4f97c:	80805304 	addi	r2,r16,332
   4f980:	80805215 	stw	r2,328(r16)
   4f984:	003fc306 	br	4f894 <__register_exitproc+0x28>

0004f988 <__call_exitprocs>:
   4f988:	00800174 	movhi	r2,5
   4f98c:	1086ff04 	addi	r2,r2,7164
   4f990:	10800017 	ldw	r2,0(r2)
   4f994:	defff304 	addi	sp,sp,-52
   4f998:	df000b15 	stw	fp,44(sp)
   4f99c:	d8800015 	stw	r2,0(sp)
   4f9a0:	10805204 	addi	r2,r2,328
   4f9a4:	dd400815 	stw	r21,32(sp)
   4f9a8:	dfc00c15 	stw	ra,48(sp)
   4f9ac:	ddc00a15 	stw	r23,40(sp)
   4f9b0:	dd800915 	stw	r22,36(sp)
   4f9b4:	dd000715 	stw	r20,28(sp)
   4f9b8:	dcc00615 	stw	r19,24(sp)
   4f9bc:	dc800515 	stw	r18,20(sp)
   4f9c0:	dc400415 	stw	r17,16(sp)
   4f9c4:	dc000315 	stw	r16,12(sp)
   4f9c8:	d9000115 	stw	r4,4(sp)
   4f9cc:	2839883a 	mov	fp,r5
   4f9d0:	d8800215 	stw	r2,8(sp)
   4f9d4:	057fffc4 	movi	r21,-1
   4f9d8:	d8800017 	ldw	r2,0(sp)
   4f9dc:	14805217 	ldw	r18,328(r2)
   4f9e0:	90001826 	beq	r18,zero,4fa44 <__call_exitprocs+0xbc>
   4f9e4:	ddc00217 	ldw	r23,8(sp)
   4f9e8:	90c00117 	ldw	r3,4(r18)
   4f9ec:	1c3fffc4 	addi	r16,r3,-1
   4f9f0:	80001116 	blt	r16,zero,4fa38 <__call_exitprocs+0xb0>
   4f9f4:	18c00044 	addi	r3,r3,1
   4f9f8:	8427883a 	add	r19,r16,r16
   4f9fc:	18c7883a 	add	r3,r3,r3
   4fa00:	95802204 	addi	r22,r18,136
   4fa04:	9ce7883a 	add	r19,r19,r19
   4fa08:	18c7883a 	add	r3,r3,r3
   4fa0c:	b4e7883a 	add	r19,r22,r19
   4fa10:	90e3883a 	add	r17,r18,r3
   4fa14:	e0001726 	beq	fp,zero,4fa74 <__call_exitprocs+0xec>
   4fa18:	8c87c83a 	sub	r3,r17,r18
   4fa1c:	b0c7883a 	add	r3,r22,r3
   4fa20:	18c01e17 	ldw	r3,120(r3)
   4fa24:	1f001326 	beq	r3,fp,4fa74 <__call_exitprocs+0xec>
   4fa28:	843fffc4 	addi	r16,r16,-1
   4fa2c:	9cffff04 	addi	r19,r19,-4
   4fa30:	8c7fff04 	addi	r17,r17,-4
   4fa34:	857ff71e 	bne	r16,r21,4fa14 <__call_exitprocs+0x8c>
   4fa38:	00800034 	movhi	r2,0
   4fa3c:	10800004 	addi	r2,r2,0
   4fa40:	10002a1e 	bne	r2,zero,4faec <__call_exitprocs+0x164>
   4fa44:	dfc00c17 	ldw	ra,48(sp)
   4fa48:	df000b17 	ldw	fp,44(sp)
   4fa4c:	ddc00a17 	ldw	r23,40(sp)
   4fa50:	dd800917 	ldw	r22,36(sp)
   4fa54:	dd400817 	ldw	r21,32(sp)
   4fa58:	dd000717 	ldw	r20,28(sp)
   4fa5c:	dcc00617 	ldw	r19,24(sp)
   4fa60:	dc800517 	ldw	r18,20(sp)
   4fa64:	dc400417 	ldw	r17,16(sp)
   4fa68:	dc000317 	ldw	r16,12(sp)
   4fa6c:	dec00d04 	addi	sp,sp,52
   4fa70:	f800283a 	ret
   4fa74:	91000117 	ldw	r4,4(r18)
   4fa78:	88c00017 	ldw	r3,0(r17)
   4fa7c:	213fffc4 	addi	r4,r4,-1
   4fa80:	24001526 	beq	r4,r16,4fad8 <__call_exitprocs+0x150>
   4fa84:	88000015 	stw	zero,0(r17)
   4fa88:	183fe726 	beq	r3,zero,4fa28 <__call_exitprocs+0xa0>
   4fa8c:	00800044 	movi	r2,1
   4fa90:	1408983a 	sll	r4,r2,r16
   4fa94:	91406217 	ldw	r5,392(r18)
   4fa98:	95000117 	ldw	r20,4(r18)
   4fa9c:	214a703a 	and	r5,r4,r5
   4faa0:	28000b26 	beq	r5,zero,4fad0 <__call_exitprocs+0x148>
   4faa4:	91406317 	ldw	r5,396(r18)
   4faa8:	2148703a 	and	r4,r4,r5
   4faac:	20000c1e 	bne	r4,zero,4fae0 <__call_exitprocs+0x158>
   4fab0:	99400017 	ldw	r5,0(r19)
   4fab4:	d9000117 	ldw	r4,4(sp)
   4fab8:	183ee83a 	callr	r3
   4fabc:	90c00117 	ldw	r3,4(r18)
   4fac0:	1d3fc51e 	bne	r3,r20,4f9d8 <__call_exitprocs+0x50>
   4fac4:	b8c00017 	ldw	r3,0(r23)
   4fac8:	1cbfd726 	beq	r3,r18,4fa28 <__call_exitprocs+0xa0>
   4facc:	003fc206 	br	4f9d8 <__call_exitprocs+0x50>
   4fad0:	183ee83a 	callr	r3
   4fad4:	003ff906 	br	4fabc <__call_exitprocs+0x134>
   4fad8:	94000115 	stw	r16,4(r18)
   4fadc:	003fea06 	br	4fa88 <__call_exitprocs+0x100>
   4fae0:	99000017 	ldw	r4,0(r19)
   4fae4:	183ee83a 	callr	r3
   4fae8:	003ff406 	br	4fabc <__call_exitprocs+0x134>
   4faec:	90c00117 	ldw	r3,4(r18)
   4faf0:	1800081e 	bne	r3,zero,4fb14 <__call_exitprocs+0x18c>
   4faf4:	90c00017 	ldw	r3,0(r18)
   4faf8:	18000a26 	beq	r3,zero,4fb24 <__call_exitprocs+0x19c>
   4fafc:	9009883a 	mov	r4,r18
   4fb00:	b8c00015 	stw	r3,0(r23)
   4fb04:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   4fb08:	bc800017 	ldw	r18,0(r23)
   4fb0c:	903fb61e 	bne	r18,zero,4f9e8 <__call_exitprocs+0x60>
   4fb10:	003fcc06 	br	4fa44 <__call_exitprocs+0xbc>
   4fb14:	90c00017 	ldw	r3,0(r18)
   4fb18:	902f883a 	mov	r23,r18
   4fb1c:	1825883a 	mov	r18,r3
   4fb20:	003ffa06 	br	4fb0c <__call_exitprocs+0x184>
   4fb24:	0007883a 	mov	r3,zero
   4fb28:	003ffb06 	br	4fb18 <__call_exitprocs+0x190>

0004fb2c <__floatundidf>:
   4fb2c:	defffc04 	addi	sp,sp,-16
   4fb30:	dc000015 	stw	r16,0(sp)
   4fb34:	2021883a 	mov	r16,r4
   4fb38:	2809883a 	mov	r4,r5
   4fb3c:	dfc00315 	stw	ra,12(sp)
   4fb40:	dc800215 	stw	r18,8(sp)
   4fb44:	dc400115 	stw	r17,4(sp)
   4fb48:	004d0d80 	call	4d0d8 <__floatunsidf>
   4fb4c:	180b883a 	mov	r5,r3
   4fb50:	000d883a 	mov	r6,zero
   4fb54:	01d07c34 	movhi	r7,16880
   4fb58:	1009883a 	mov	r4,r2
   4fb5c:	00421140 	call	42114 <__muldf3>
   4fb60:	8009883a 	mov	r4,r16
   4fb64:	1025883a 	mov	r18,r2
   4fb68:	1823883a 	mov	r17,r3
   4fb6c:	004d0d80 	call	4d0d8 <__floatunsidf>
   4fb70:	1009883a 	mov	r4,r2
   4fb74:	180b883a 	mov	r5,r3
   4fb78:	900d883a 	mov	r6,r18
   4fb7c:	880f883a 	mov	r7,r17
   4fb80:	0040fc40 	call	40fc4 <__adddf3>
   4fb84:	dfc00317 	ldw	ra,12(sp)
   4fb88:	dc800217 	ldw	r18,8(sp)
   4fb8c:	dc400117 	ldw	r17,4(sp)
   4fb90:	dc000017 	ldw	r16,0(sp)
   4fb94:	dec00404 	addi	sp,sp,16
   4fb98:	f800283a 	ret

0004fb9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4fb9c:	defffd04 	addi	sp,sp,-12
   4fba0:	df000215 	stw	fp,8(sp)
   4fba4:	df000204 	addi	fp,sp,8
   4fba8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4fbac:	0001883a 	nop
   4fbb0:	e0bfff17 	ldw	r2,-4(fp)
   4fbb4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4fbb8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4fbbc:	10000226 	beq	r2,zero,4fbc8 <_exit+0x2c>
    ALT_SIM_FAIL();
   4fbc0:	002af070 	cmpltui	zero,zero,43969
   4fbc4:	00000106 	br	4fbcc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4fbc8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4fbcc:	003fff06 	br	4fbcc <_exit+0x30>
